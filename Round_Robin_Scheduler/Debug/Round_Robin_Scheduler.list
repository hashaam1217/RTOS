
Round_Robin_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017f8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080019c8  080019c8  000029c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a18  08001a18  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001a18  08001a18  00002a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a20  08001a20  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a20  08001a20  00002a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a24  08001a24  00002a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001a28  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000406c  2000005c  08001a84  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040c8  08001a84  000030c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bf7  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000900  00000000  00000000  00004c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000258  00000000  00000000  00005588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000019e  00000000  00000000  000057e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab95  00000000  00000000  0000597e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002d69  00000000  00000000  00020513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e19  00000000  00000000  0002327c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4095  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e9c  00000000  00000000  000b40d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000b4f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080019b0 	.word	0x080019b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080019b0 	.word	0x080019b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	6039      	str	r1, [r7, #0]
 80002ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	db0a      	blt.n	80002da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	490c      	ldr	r1, [pc, #48]	@ (80002fc <__NVIC_SetPriority+0x4c>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	0112      	lsls	r2, r2, #4
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	440b      	add	r3, r1
 80002d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d8:	e00a      	b.n	80002f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4908      	ldr	r1, [pc, #32]	@ (8000300 <__NVIC_SetPriority+0x50>)
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	f003 030f 	and.w	r3, r3, #15
 80002e6:	3b04      	subs	r3, #4
 80002e8:	0112      	lsls	r2, r2, #4
 80002ea:	b2d2      	uxtb	r2, r2
 80002ec:	440b      	add	r3, r1
 80002ee:	761a      	strb	r2, [r3, #24]
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	e000e100 	.word	0xe000e100
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <kernel_stack_init>:
tcbType *currentPt;

int32_t TCB_STACK[NUM_OF_THREADS][STACKSIZE];

void kernel_stack_init(int i)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
    tcbs[i].stackPt = &TCB_STACK[i][STACKSIZE - 16]; // Stackpointer
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000312:	fb02 f303 	mul.w	r3, r2, r3
 8000316:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800031a:	4a60      	ldr	r2, [pc, #384]	@ (800049c <kernel_stack_init+0x198>)
 800031c:	441a      	add	r2, r3
 800031e:	4960      	ldr	r1, [pc, #384]	@ (80004a0 <kernel_stack_init+0x19c>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    // Sets bit 24 (T-bit) in PSR to 1, to operate in thumb mode
    TCB_STACK[i][STACKSIZE - 1] = (1U<<24);
 8000326:	4a5d      	ldr	r2, [pc, #372]	@ (800049c <kernel_stack_init+0x198>)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800032e:	fb01 f303 	mul.w	r3, r1, r3
 8000332:	4413      	add	r3, r2
 8000334:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 8000338:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800033c:	601a      	str	r2, [r3, #0]

    // Debug: Setting registers to a noticeable value
    TCB_STACK[i][STACKSIZE - 3] = 0xAAAAAAAA; // R14
 800033e:	4a57      	ldr	r2, [pc, #348]	@ (800049c <kernel_stack_init+0x198>)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000346:	fb01 f303 	mul.w	r3, r1, r3
 800034a:	4413      	add	r3, r2
 800034c:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8000350:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000354:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 4] = 0xAAAAAAAA; // R12
 8000356:	4a51      	ldr	r2, [pc, #324]	@ (800049c <kernel_stack_init+0x198>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800035e:	fb01 f303 	mul.w	r3, r1, r3
 8000362:	4413      	add	r3, r2
 8000364:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8000368:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800036c:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 5] = 0xAAAAAAAA; // R3
 800036e:	4a4b      	ldr	r2, [pc, #300]	@ (800049c <kernel_stack_init+0x198>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000376:	fb01 f303 	mul.w	r3, r1, r3
 800037a:	4413      	add	r3, r2
 800037c:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 8000380:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000384:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 6] = 0xAAAAAAAA; // R2
 8000386:	4a45      	ldr	r2, [pc, #276]	@ (800049c <kernel_stack_init+0x198>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800038e:	fb01 f303 	mul.w	r3, r1, r3
 8000392:	4413      	add	r3, r2
 8000394:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 8000398:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800039c:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 7] = 0xAAAAAAAA; // R1
 800039e:	4a3f      	ldr	r2, [pc, #252]	@ (800049c <kernel_stack_init+0x198>)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003a6:	fb01 f303 	mul.w	r3, r1, r3
 80003aa:	4413      	add	r3, r2
 80003ac:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80003b0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003b4:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 8] = 0xAAAAAAAA; // R0
 80003b6:	4a39      	ldr	r2, [pc, #228]	@ (800049c <kernel_stack_init+0x198>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003be:	fb01 f303 	mul.w	r3, r1, r3
 80003c2:	4413      	add	r3, r2
 80003c4:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 80003c8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003cc:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 9] = 0xAAAAAAAA; // R11
 80003ce:	4a33      	ldr	r2, [pc, #204]	@ (800049c <kernel_stack_init+0x198>)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003d6:	fb01 f303 	mul.w	r3, r1, r3
 80003da:	4413      	add	r3, r2
 80003dc:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 80003e0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003e4:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 10] = 0xAAAAAAAA; // R10
 80003e6:	4a2d      	ldr	r2, [pc, #180]	@ (800049c <kernel_stack_init+0x198>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003ee:	fb01 f303 	mul.w	r3, r1, r3
 80003f2:	4413      	add	r3, r2
 80003f4:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80003f8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003fc:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 11] = 0xAAAAAAAA; // R9
 80003fe:	4a27      	ldr	r2, [pc, #156]	@ (800049c <kernel_stack_init+0x198>)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000406:	fb01 f303 	mul.w	r3, r1, r3
 800040a:	4413      	add	r3, r2
 800040c:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 8000410:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000414:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 12] = 0xAAAAAAAA; // R8
 8000416:	4a21      	ldr	r2, [pc, #132]	@ (800049c <kernel_stack_init+0x198>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800041e:	fb01 f303 	mul.w	r3, r1, r3
 8000422:	4413      	add	r3, r2
 8000424:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 8000428:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800042c:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 13] = 0xAAAAAAAA; // R7
 800042e:	4a1b      	ldr	r2, [pc, #108]	@ (800049c <kernel_stack_init+0x198>)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000436:	fb01 f303 	mul.w	r3, r1, r3
 800043a:	4413      	add	r3, r2
 800043c:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 8000440:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000444:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 14] = 0xAAAAAAAA; // R6
 8000446:	4a15      	ldr	r2, [pc, #84]	@ (800049c <kernel_stack_init+0x198>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800044e:	fb01 f303 	mul.w	r3, r1, r3
 8000452:	4413      	add	r3, r2
 8000454:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 8000458:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800045c:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 15] = 0xAAAAAAAA; // R5
 800045e:	4a0f      	ldr	r2, [pc, #60]	@ (800049c <kernel_stack_init+0x198>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000466:	fb01 f303 	mul.w	r3, r1, r3
 800046a:	4413      	add	r3, r2
 800046c:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 8000470:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000474:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 16] = 0xAAAAAAAA; // R4
 8000476:	4a09      	ldr	r2, [pc, #36]	@ (800049c <kernel_stack_init+0x198>)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800047e:	fb01 f303 	mul.w	r3, r1, r3
 8000482:	4413      	add	r3, r2
 8000484:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000488:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800048c:	601a      	str	r2, [r3, #0]
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	200000d0 	.word	0x200000d0
 80004a0:	2000007c 	.word	0x2000007c

080004a4 <kernel_add_threads>:

uint8_t kernel_add_threads(void(*task0)(void), void(*task1)(void), void(*task2)(void), void(*task3)(void), void(*task4)(void), void(*task5)(void), void(*task6)(void), void(*task7)(void), void(*task8)(void), void(*task9)(void))
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
 80004b0:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b2:	b672      	cpsid	i
}
 80004b4:	bf00      	nop
    // Global Interrupts
    __disable_irq();

    tcbs[0].nextPt = &tcbs[1];
 80004b6:	4b3f      	ldr	r3, [pc, #252]	@ (80005b4 <kernel_add_threads+0x110>)
 80004b8:	4a3f      	ldr	r2, [pc, #252]	@ (80005b8 <kernel_add_threads+0x114>)
 80004ba:	605a      	str	r2, [r3, #4]
    tcbs[1].nextPt = &tcbs[2];
 80004bc:	4b3d      	ldr	r3, [pc, #244]	@ (80005b4 <kernel_add_threads+0x110>)
 80004be:	4a3f      	ldr	r2, [pc, #252]	@ (80005bc <kernel_add_threads+0x118>)
 80004c0:	60da      	str	r2, [r3, #12]
    tcbs[2].nextPt = &tcbs[3];
 80004c2:	4b3c      	ldr	r3, [pc, #240]	@ (80005b4 <kernel_add_threads+0x110>)
 80004c4:	4a3e      	ldr	r2, [pc, #248]	@ (80005c0 <kernel_add_threads+0x11c>)
 80004c6:	615a      	str	r2, [r3, #20]
    tcbs[3].nextPt = &tcbs[4];
 80004c8:	4b3a      	ldr	r3, [pc, #232]	@ (80005b4 <kernel_add_threads+0x110>)
 80004ca:	4a3e      	ldr	r2, [pc, #248]	@ (80005c4 <kernel_add_threads+0x120>)
 80004cc:	61da      	str	r2, [r3, #28]
    tcbs[4].nextPt = &tcbs[5];
 80004ce:	4b39      	ldr	r3, [pc, #228]	@ (80005b4 <kernel_add_threads+0x110>)
 80004d0:	4a3d      	ldr	r2, [pc, #244]	@ (80005c8 <kernel_add_threads+0x124>)
 80004d2:	625a      	str	r2, [r3, #36]	@ 0x24
    tcbs[5].nextPt = &tcbs[6];
 80004d4:	4b37      	ldr	r3, [pc, #220]	@ (80005b4 <kernel_add_threads+0x110>)
 80004d6:	4a3d      	ldr	r2, [pc, #244]	@ (80005cc <kernel_add_threads+0x128>)
 80004d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    tcbs[6].nextPt = &tcbs[7];
 80004da:	4b36      	ldr	r3, [pc, #216]	@ (80005b4 <kernel_add_threads+0x110>)
 80004dc:	4a3c      	ldr	r2, [pc, #240]	@ (80005d0 <kernel_add_threads+0x12c>)
 80004de:	635a      	str	r2, [r3, #52]	@ 0x34
    tcbs[7].nextPt = &tcbs[8];
 80004e0:	4b34      	ldr	r3, [pc, #208]	@ (80005b4 <kernel_add_threads+0x110>)
 80004e2:	4a3c      	ldr	r2, [pc, #240]	@ (80005d4 <kernel_add_threads+0x130>)
 80004e4:	63da      	str	r2, [r3, #60]	@ 0x3c
    tcbs[8].nextPt = &tcbs[9];
 80004e6:	4b33      	ldr	r3, [pc, #204]	@ (80005b4 <kernel_add_threads+0x110>)
 80004e8:	4a3b      	ldr	r2, [pc, #236]	@ (80005d8 <kernel_add_threads+0x134>)
 80004ea:	645a      	str	r2, [r3, #68]	@ 0x44
    tcbs[9].nextPt = &tcbs[0];
 80004ec:	4b31      	ldr	r3, [pc, #196]	@ (80005b4 <kernel_add_threads+0x110>)
 80004ee:	4a31      	ldr	r2, [pc, #196]	@ (80005b4 <kernel_add_threads+0x110>)
 80004f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    kernel_stack_init(0);
 80004f2:	2000      	movs	r0, #0
 80004f4:	f7ff ff06 	bl	8000304 <kernel_stack_init>
    // Initialize PC
    TCB_STACK[0][STACKSIZE - 2] = (int32_t)(task0);
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	4a38      	ldr	r2, [pc, #224]	@ (80005dc <kernel_add_threads+0x138>)
 80004fc:	f8c2 3638 	str.w	r3, [r2, #1592]	@ 0x638

    kernel_stack_init(1);
 8000500:	2001      	movs	r0, #1
 8000502:	f7ff feff 	bl	8000304 <kernel_stack_init>
    // Initialize PC
    TCB_STACK[1][STACKSIZE - 2] = (int32_t)(task1);
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	4a34      	ldr	r2, [pc, #208]	@ (80005dc <kernel_add_threads+0x138>)
 800050a:	f8c2 3c78 	str.w	r3, [r2, #3192]	@ 0xc78

    kernel_stack_init(2);
 800050e:	2002      	movs	r0, #2
 8000510:	f7ff fef8 	bl	8000304 <kernel_stack_init>
    // Initialize PC
    TCB_STACK[2][STACKSIZE - 2] = (int32_t)(task2);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a31      	ldr	r2, [pc, #196]	@ (80005dc <kernel_add_threads+0x138>)
 8000518:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800051c:	f8c2 32b8 	str.w	r3, [r2, #696]	@ 0x2b8

    kernel_stack_init(3);
 8000520:	2003      	movs	r0, #3
 8000522:	f7ff feef 	bl	8000304 <kernel_stack_init>
    // Initialize PC
    TCB_STACK[3][STACKSIZE - 2] = (int32_t)(task3);
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	4a2c      	ldr	r2, [pc, #176]	@ (80005dc <kernel_add_threads+0x138>)
 800052a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800052e:	f8c2 38f8 	str.w	r3, [r2, #2296]	@ 0x8f8

    kernel_stack_init(4);
 8000532:	2004      	movs	r0, #4
 8000534:	f7ff fee6 	bl	8000304 <kernel_stack_init>
    // Initialize PC
    TCB_STACK[4][STACKSIZE - 2] = (int32_t)(task4);
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	4a28      	ldr	r2, [pc, #160]	@ (80005dc <kernel_add_threads+0x138>)
 800053c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000540:	f8c2 3f38 	str.w	r3, [r2, #3896]	@ 0xf38

    kernel_stack_init(5);
 8000544:	2005      	movs	r0, #5
 8000546:	f7ff fedd 	bl	8000304 <kernel_stack_init>
    // Initialize PC
    TCB_STACK[5][STACKSIZE - 2] = (int32_t)(task5);
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	4a23      	ldr	r2, [pc, #140]	@ (80005dc <kernel_add_threads+0x138>)
 800054e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8000552:	f8c2 3578 	str.w	r3, [r2, #1400]	@ 0x578

    kernel_stack_init(6);
 8000556:	2006      	movs	r0, #6
 8000558:	f7ff fed4 	bl	8000304 <kernel_stack_init>
    // Initialize PC
    TCB_STACK[6][STACKSIZE - 2] = (int32_t)(task6);
 800055c:	6a3b      	ldr	r3, [r7, #32]
 800055e:	4a1f      	ldr	r2, [pc, #124]	@ (80005dc <kernel_add_threads+0x138>)
 8000560:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8000564:	f8c2 3bb8 	str.w	r3, [r2, #3000]	@ 0xbb8

    kernel_stack_init(7);
 8000568:	2007      	movs	r0, #7
 800056a:	f7ff fecb 	bl	8000304 <kernel_stack_init>
    // Initialize PC
    TCB_STACK[7][STACKSIZE - 2] = (int32_t)(task7);
 800056e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000570:	4a1a      	ldr	r2, [pc, #104]	@ (80005dc <kernel_add_threads+0x138>)
 8000572:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8000576:	f8c2 31f8 	str.w	r3, [r2, #504]	@ 0x1f8

    kernel_stack_init(8);
 800057a:	2008      	movs	r0, #8
 800057c:	f7ff fec2 	bl	8000304 <kernel_stack_init>
    // Initialize PC
    TCB_STACK[8][STACKSIZE - 2] = (int32_t)(task8);
 8000580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000582:	4a16      	ldr	r2, [pc, #88]	@ (80005dc <kernel_add_threads+0x138>)
 8000584:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8000588:	f8c2 3838 	str.w	r3, [r2, #2104]	@ 0x838

    kernel_stack_init(9);
 800058c:	2009      	movs	r0, #9
 800058e:	f7ff feb9 	bl	8000304 <kernel_stack_init>
    // Initialize PC
    TCB_STACK[9][STACKSIZE - 2] = (int32_t)(task9);
 8000592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000594:	4a11      	ldr	r2, [pc, #68]	@ (80005dc <kernel_add_threads+0x138>)
 8000596:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 800059a:	f8c2 3e78 	str.w	r3, [r2, #3704]	@ 0xe78


    // Start form thread 0
    currentPt = &tcbs[0];
 800059e:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <kernel_add_threads+0x13c>)
 80005a0:	4a04      	ldr	r2, [pc, #16]	@ (80005b4 <kernel_add_threads+0x110>)
 80005a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80005a4:	b662      	cpsie	i
}
 80005a6:	bf00      	nop

    // Global Interrupts
    __enable_irq();

    return 1;
 80005a8:	2301      	movs	r3, #1
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000007c 	.word	0x2000007c
 80005b8:	20000084 	.word	0x20000084
 80005bc:	2000008c 	.word	0x2000008c
 80005c0:	20000094 	.word	0x20000094
 80005c4:	2000009c 	.word	0x2000009c
 80005c8:	200000a4 	.word	0x200000a4
 80005cc:	200000ac 	.word	0x200000ac
 80005d0:	200000b4 	.word	0x200000b4
 80005d4:	200000bc 	.word	0x200000bc
 80005d8:	200000c4 	.word	0x200000c4
 80005dc:	200000d0 	.word	0x200000d0
 80005e0:	200000cc 	.word	0x200000cc

080005e4 <kernel_init>:

void kernel_init(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
    MILLIS_PRESCALER = (BUS_FREQ/1000);
 80005e8:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <kernel_init+0x18>)
 80005ea:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80005ee:	601a      	str	r2, [r3, #0]
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000078 	.word	0x20000078

08000600 <kernel_launch>:

void kernel_launch(uint32_t quanta)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    // Reset SysTick
    SysTick->CTRL = SYSTICK_RST;
 8000608:	4b13      	ldr	r3, [pc, #76]	@ (8000658 <kernel_launch+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]

    // Clear SysTick Current Value Register
    SysTick->VAL = 0;
 800060e:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <kernel_launch+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]

    // Load Quanta
    SysTick->LOAD = (quanta * MILLIS_PRESCALER) - 1;
 8000614:	4b11      	ldr	r3, [pc, #68]	@ (800065c <kernel_launch+0x5c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	fb02 f303 	mul.w	r3, r2, r3
 800061e:	4a0e      	ldr	r2, [pc, #56]	@ (8000658 <kernel_launch+0x58>)
 8000620:	3b01      	subs	r3, #1
 8000622:	6053      	str	r3, [r2, #4]

    // Set SysTick to low priority
    NVIC_SetPriority(SysTick_IRQn, 15);
 8000624:	210f      	movs	r1, #15
 8000626:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800062a:	f7ff fe41 	bl	80002b0 <__NVIC_SetPriority>

    // Enable SysTick select Clocksource
    SysTick->CTRL = CTRL_CS;
 800062e:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <kernel_launch+0x58>)
 8000630:	2204      	movs	r2, #4
 8000632:	601a      	str	r2, [r3, #0]
    SysTick->CTRL |= CTRL_E;
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <kernel_launch+0x58>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a07      	ldr	r2, [pc, #28]	@ (8000658 <kernel_launch+0x58>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6013      	str	r3, [r2, #0]

    // Enabling SysTick Interrupt
    SysTick->CTRL |= CTRL_TIE;
 8000640:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <kernel_launch+0x58>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a04      	ldr	r2, [pc, #16]	@ (8000658 <kernel_launch+0x58>)
 8000646:	f043 0302 	orr.w	r3, r3, #2
 800064a:	6013      	str	r3, [r2, #0]

    // Launch Scheduler
    scheduler_launch();
 800064c:	f000 f81a 	bl	8000684 <scheduler_launch>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	e000e010 	.word	0xe000e010
 800065c:	20000078 	.word	0x20000078

08000660 <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
    // Suspend Current Thread
    // Global Interrupts
    __asm("CPSID I");
 8000660:	b672      	cpsid	i

    // Save R4-R11
    __asm("PUSH {R4-R11}");
 8000662:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

    // Load address of currentPt into R0
    __asm("LDR R0, =currentPt");
 8000666:	4806      	ldr	r0, [pc, #24]	@ (8000680 <SysTick_Handler+0x20>)

    // R1=currentPt to current TCB
    __asm("LDR R1, [R0]");
 8000668:	6801      	ldr	r1, [r0, #0]

    // Cortex-M SP equals R1, save SP into TCB's first variable, stackPt
    __asm("STR SP, [R1]");
 800066a:	f8c1 d000 	str.w	sp, [r1]

    
    // Retrieve Second Thread
    // Load r1 from TCB's second variable nextPt
    __asm("LDR R1, [R1, #4]");
 800066e:	6849      	ldr	r1, [r1, #4]

    // Store R1 at address = R0, currentPt = r1, currentPt = nextPt
    __asm("STR R1, [R0]");
 8000670:	6001      	str	r1, [r0, #0]

     // Load SP of new TCB, SP = currentPt -> stackPt
     __asm("LDR SP, [R1]");
 8000672:	f8d1 d000 	ldr.w	sp, [r1]

     // Restore R4-R11
     __asm("POP {R4-R11}");
 8000676:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

     // Global Interrupts
     __asm("CPSIE I");
 800067a:	b662      	cpsie	i

     // Return from exception and restore R0 - R3, R12, LR, PC, PSR
     __asm("BX LR");
 800067c:	4770      	bx	lr
}
 800067e:	bf00      	nop
 8000680:	200000cc 	.word	0x200000cc

08000684 <scheduler_launch>:

void scheduler_launch(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
    // Load address of currentPt
    __asm("LDR R0, =currentPt");
 8000688:	4809      	ldr	r0, [pc, #36]	@ (80006b0 <scheduler_launch+0x2c>)

    // Load the value of currentPt
    __asm("LDR R2, [R0]");
 800068a:	6802      	ldr	r2, [r0, #0]

    // Load TCB Stack into SP
    __asm("LDR SP, [R2]");
 800068c:	f8d2 d000 	ldr.w	sp, [r2]

    // Restore R4-11
    __asm("POP {R4-R11}");
 8000690:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    
    // Restore R12
    __asm("POP {R12}");
 8000694:	f85d cb04 	ldr.w	ip, [sp], #4
    // Restore R0 - R3
    __asm("POP {R0-R3}");
 8000698:	bc0f      	pop	{r0, r1, r2, r3}

    // Skipping LR
    __asm("Add SP, SP, #4");
 800069a:	b001      	add	sp, #4

    // Create a new start location by popping LR
    __asm("POP {LR}");
 800069c:	f85d eb04 	ldr.w	lr, [sp], #4

    // Skip PSR
    __asm("ADD SP, SP, #4");
 80006a0:	b001      	add	sp, #4

    // Global Interrupts
    __asm("CPSIE I");
 80006a2:	b662      	cpsie	i
    // Return
    __asm("BX LR");
 80006a4:	4770      	bx	lr

    

}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	200000cc 	.word	0x200000cc

080006b4 <led_init>:
#include "led.h"

#define GPIOAEN			(1U<<0) //the bit we want to enable
#define LED_PIN 		(1U<<5)
void led_init(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	/*Enable clock access to led port A*/
	// Turning on AHB1 clock bus
	RCC->AHB1ENR |= GPIOAEN;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <led_init+0x34>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006bc:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <led_init+0x34>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Set led pin as output pin*/
	GPIOA->MODER |= (1U << 10);
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <led_init+0x38>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a08      	ldr	r2, [pc, #32]	@ (80006ec <led_init+0x38>)
 80006ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006ce:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 11);
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <led_init+0x38>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a05      	ldr	r2, [pc, #20]	@ (80006ec <led_init+0x38>)
 80006d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000

080006f0 <task0>:




void task0(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	while(1)
	{
		Task0_Profiler++;
 80006f4:	4b02      	ldr	r3, [pc, #8]	@ (8000700 <task0+0x10>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	4a01      	ldr	r2, [pc, #4]	@ (8000700 <task0+0x10>)
 80006fc:	6013      	str	r3, [r2, #0]
 80006fe:	e7f9      	b.n	80006f4 <task0+0x4>
 8000700:	20003f50 	.word	0x20003f50

08000704 <task1>:
	}
}

void task1(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
	while(1)
	{
		Task1_Profiler++;
 8000708:	4b02      	ldr	r3, [pc, #8]	@ (8000714 <task1+0x10>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	4a01      	ldr	r2, [pc, #4]	@ (8000714 <task1+0x10>)
 8000710:	6013      	str	r3, [r2, #0]
 8000712:	e7f9      	b.n	8000708 <task1+0x4>
 8000714:	20003f54 	.word	0x20003f54

08000718 <task2>:
	}
}

void task2(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2_Profiler++;
 800071c:	4b02      	ldr	r3, [pc, #8]	@ (8000728 <task2+0x10>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	4a01      	ldr	r2, [pc, #4]	@ (8000728 <task2+0x10>)
 8000724:	6013      	str	r3, [r2, #0]
 8000726:	e7f9      	b.n	800071c <task2+0x4>
 8000728:	20003f58 	.word	0x20003f58

0800072c <task3>:
	}
}

void task3(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
	while(1)
	{
		Task3_Profiler++;
 8000730:	4b02      	ldr	r3, [pc, #8]	@ (800073c <task3+0x10>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	4a01      	ldr	r2, [pc, #4]	@ (800073c <task3+0x10>)
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	e7f9      	b.n	8000730 <task3+0x4>
 800073c:	20003f5c 	.word	0x20003f5c

08000740 <task4>:
	}
}

void task4(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	while(1)
	{
		Task4_Profiler++;
 8000744:	4b02      	ldr	r3, [pc, #8]	@ (8000750 <task4+0x10>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	4a01      	ldr	r2, [pc, #4]	@ (8000750 <task4+0x10>)
 800074c:	6013      	str	r3, [r2, #0]
 800074e:	e7f9      	b.n	8000744 <task4+0x4>
 8000750:	20003f60 	.word	0x20003f60

08000754 <task5>:
	}
}

void task5(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
	while(1)
	{
		Task5_Profiler++;
 8000758:	4b02      	ldr	r3, [pc, #8]	@ (8000764 <task5+0x10>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	4a01      	ldr	r2, [pc, #4]	@ (8000764 <task5+0x10>)
 8000760:	6013      	str	r3, [r2, #0]
 8000762:	e7f9      	b.n	8000758 <task5+0x4>
 8000764:	20003f64 	.word	0x20003f64

08000768 <task6>:
	}
}

void task6(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
	while(1)
	{
		Task6_Profiler++;
 800076c:	4b02      	ldr	r3, [pc, #8]	@ (8000778 <task6+0x10>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	4a01      	ldr	r2, [pc, #4]	@ (8000778 <task6+0x10>)
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	e7f9      	b.n	800076c <task6+0x4>
 8000778:	20003f68 	.word	0x20003f68

0800077c <task7>:
	}
}

void task7(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	while(1)
	{
		Task7_Profiler++;
 8000780:	4b02      	ldr	r3, [pc, #8]	@ (800078c <task7+0x10>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	4a01      	ldr	r2, [pc, #4]	@ (800078c <task7+0x10>)
 8000788:	6013      	str	r3, [r2, #0]
 800078a:	e7f9      	b.n	8000780 <task7+0x4>
 800078c:	20003f6c 	.word	0x20003f6c

08000790 <task8>:
	}
}

void task8(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	while(1)
	{
		Task8_Profiler++;
 8000794:	4b02      	ldr	r3, [pc, #8]	@ (80007a0 <task8+0x10>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	4a01      	ldr	r2, [pc, #4]	@ (80007a0 <task8+0x10>)
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	e7f9      	b.n	8000794 <task8+0x4>
 80007a0:	20003f70 	.word	0x20003f70

080007a4 <task9>:
	}
}

void task9(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	while(1)
	{
		Task9_Profiler++;
 80007a8:	4b02      	ldr	r3, [pc, #8]	@ (80007b4 <task9+0x10>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	4a01      	ldr	r2, [pc, #4]	@ (80007b4 <task9+0x10>)
 80007b0:	6013      	str	r3, [r2, #0]
 80007b2:	e7f9      	b.n	80007a8 <task9+0x4>
 80007b4:	20003f74 	.word	0x20003f74

080007b8 <main>:
	}
}

int main (void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af06      	add	r7, sp, #24
	led_init();
 80007be:	f7ff ff79 	bl	80006b4 <led_init>
	uart_tx_init();
 80007c2:	f000 f911 	bl	80009e8 <uart_tx_init>
    timebase_init();
 80007c6:	f000 f8dd 	bl	8000984 <timebase_init>
    kernel_init();
 80007ca:	f7ff ff0b 	bl	80005e4 <kernel_init>

    printf("Starting \n\r");
 80007ce:	480f      	ldr	r0, [pc, #60]	@ (800080c <main+0x54>)
 80007d0:	f000 fa80 	bl	8000cd4 <iprintf>

    // Add Threads
    kernel_add_threads(&task0, &task1, &task2, &task3, &task4, &task5, &task6, &task7, &task8, &task9);
 80007d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <main+0x58>)
 80007d6:	9305      	str	r3, [sp, #20]
 80007d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <main+0x5c>)
 80007da:	9304      	str	r3, [sp, #16]
 80007dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <main+0x60>)
 80007de:	9303      	str	r3, [sp, #12]
 80007e0:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <main+0x64>)
 80007e2:	9302      	str	r3, [sp, #8]
 80007e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <main+0x68>)
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <main+0x6c>)
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <main+0x70>)
 80007ee:	4a0f      	ldr	r2, [pc, #60]	@ (800082c <main+0x74>)
 80007f0:	490f      	ldr	r1, [pc, #60]	@ (8000830 <main+0x78>)
 80007f2:	4810      	ldr	r0, [pc, #64]	@ (8000834 <main+0x7c>)
 80007f4:	f7ff fe56 	bl	80004a4 <kernel_add_threads>

    printf("Added Threads \n\r");
 80007f8:	480f      	ldr	r0, [pc, #60]	@ (8000838 <main+0x80>)
 80007fa:	f000 fa6b 	bl	8000cd4 <iprintf>
    // Set RoundRobin Time Quanta
	kernel_launch(QUANTA);
 80007fe:	200a      	movs	r0, #10
 8000800:	f7ff fefe 	bl	8000600 <kernel_launch>
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	080019c8 	.word	0x080019c8
 8000810:	080007a5 	.word	0x080007a5
 8000814:	08000791 	.word	0x08000791
 8000818:	0800077d 	.word	0x0800077d
 800081c:	08000769 	.word	0x08000769
 8000820:	08000755 	.word	0x08000755
 8000824:	08000741 	.word	0x08000741
 8000828:	0800072d 	.word	0x0800072d
 800082c:	08000719 	.word	0x08000719
 8000830:	08000705 	.word	0x08000705
 8000834:	080006f1 	.word	0x080006f1
 8000838:	080019d4 	.word	0x080019d4

0800083c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	e00a      	b.n	8000864 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800084e:	f3af 8000 	nop.w
 8000852:	4601      	mov	r1, r0
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	60ba      	str	r2, [r7, #8]
 800085a:	b2ca      	uxtb	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3301      	adds	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697a      	ldr	r2, [r7, #20]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	429a      	cmp	r2, r3
 800086a:	dbf0      	blt.n	800084e <_read+0x12>
  }

  return len;
 800086c:	687b      	ldr	r3, [r7, #4]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b086      	sub	sp, #24
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	e009      	b.n	800089c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	60ba      	str	r2, [r7, #8]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f000 f89d 	bl	80009d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	3301      	adds	r3, #1
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	dbf1      	blt.n	8000888 <_write+0x12>
  }
  return len;
 80008a4:	687b      	ldr	r3, [r7, #4]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <_close>:

int _close(int file)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b083      	sub	sp, #12
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
 80008ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008d6:	605a      	str	r2, [r3, #4]
  return 0;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <_isatty>:

int _isatty(int file)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000920:	4a14      	ldr	r2, [pc, #80]	@ (8000974 <_sbrk+0x5c>)
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <_sbrk+0x60>)
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800092c:	4b13      	ldr	r3, [pc, #76]	@ (800097c <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <_sbrk+0x64>)
 8000936:	4a12      	ldr	r2, [pc, #72]	@ (8000980 <_sbrk+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	429a      	cmp	r2, r3
 8000946:	d207      	bcs.n	8000958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000948:	f000 fa68 	bl	8000e1c <__errno>
 800094c:	4603      	mov	r3, r0
 800094e:	220c      	movs	r2, #12
 8000950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000956:	e009      	b.n	800096c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095e:	4b07      	ldr	r3, [pc, #28]	@ (800097c <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	4a05      	ldr	r2, [pc, #20]	@ (800097c <_sbrk+0x64>)
 8000968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20020000 	.word	0x20020000
 8000978:	00000400 	.word	0x00000400
 800097c:	20003f78 	.word	0x20003f78
 8000980:	200040c8 	.word	0x200040c8

08000984 <timebase_init>:
    g_curr_tick += tick_freq;
}


void timebase_init(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
	// Load the timer with number of cycles per seconds
    SysTick->LOAD = ONE_SEC_LOAD - 1;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <timebase_init+0x44>)
 800098a:	4a10      	ldr	r2, [pc, #64]	@ (80009cc <timebase_init+0x48>)
 800098c:	605a      	str	r2, [r3, #4]
	// Clear SysTick Current Value Register
    SysTick->VAL = 0;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <timebase_init+0x44>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
	// Select Internal Clock
    SysTick->CTRL |= CTRL_CS;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <timebase_init+0x44>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0b      	ldr	r2, [pc, #44]	@ (80009c8 <timebase_init+0x44>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	6013      	str	r3, [r2, #0]
	// Enable Interrupt
    SysTick->CTRL |= CTRL_TIE;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <timebase_init+0x44>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <timebase_init+0x44>)
 80009a6:	f043 0302 	orr.w	r3, r3, #2
 80009aa:	6013      	str	r3, [r2, #0]
	// Enable SysTick
    SysTick->CTRL |= CTRL_E;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <timebase_init+0x44>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a05      	ldr	r2, [pc, #20]	@ (80009c8 <timebase_init+0x44>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80009b8:	b662      	cpsie	i
}
 80009ba:	bf00      	nop
    // Enable global interrupts
    __enable_irq(); // Possibly redundant
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000e010 	.word	0xe000e010
 80009cc:	00f423ff 	.word	0x00f423ff

080009d0 <__io_putchar>:
static uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f84f 	bl	8000a7c <uart_write>
	return ch;
 80009de:	687b      	ldr	r3, [r7, #4]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <uart_tx_init>:

void uart_tx_init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	//enable clock access
	RCC->AHB1ENR |= GPIOAEN;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <uart_tx_init+0x84>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f0:	4a1e      	ldr	r2, [pc, #120]	@ (8000a6c <uart_tx_init+0x84>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6313      	str	r3, [r2, #48]	@ 0x30
	//Finding GPIO Pins for USART2

	GPIOA->MODER &= ~(1U<<4);
 80009f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <uart_tx_init+0x88>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000a70 <uart_tx_init+0x88>)
 80009fe:	f023 0310 	bic.w	r3, r3, #16
 8000a02:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<5);
 8000a04:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <uart_tx_init+0x88>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a19      	ldr	r2, [pc, #100]	@ (8000a70 <uart_tx_init+0x88>)
 8000a0a:	f043 0320 	orr.w	r3, r3, #32
 8000a0e:	6013      	str	r3, [r2, #0]
	//Set alternate function type to AF7 (UART2_TX)
	GPIOA->AFR[0] |=  (1U<<8);
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <uart_tx_init+0x88>)
 8000a12:	6a1b      	ldr	r3, [r3, #32]
 8000a14:	4a16      	ldr	r2, [pc, #88]	@ (8000a70 <uart_tx_init+0x88>)
 8000a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a1a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<9);
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <uart_tx_init+0x88>)
 8000a1e:	6a1b      	ldr	r3, [r3, #32]
 8000a20:	4a13      	ldr	r2, [pc, #76]	@ (8000a70 <uart_tx_init+0x88>)
 8000a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a26:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<10);
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <uart_tx_init+0x88>)
 8000a2a:	6a1b      	ldr	r3, [r3, #32]
 8000a2c:	4a10      	ldr	r2, [pc, #64]	@ (8000a70 <uart_tx_init+0x88>)
 8000a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a32:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000a34:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <uart_tx_init+0x88>)
 8000a36:	6a1b      	ldr	r3, [r3, #32]
 8000a38:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <uart_tx_init+0x88>)
 8000a3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000a3e:	6213      	str	r3, [r2, #32]
	//Enable clock access to UART
	RCC->APB1ENR |= UART2EN;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <uart_tx_init+0x84>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a44:	4a09      	ldr	r2, [pc, #36]	@ (8000a6c <uart_tx_init+0x84>)
 8000a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4a:	6413      	str	r3, [r2, #64]	@ 0x40
	//Configure baudrate
	set_uart_baudrate(APB1_CLK, UART_BAUDRATE);
 8000a4c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000a50:	4808      	ldr	r0, [pc, #32]	@ (8000a74 <uart_tx_init+0x8c>)
 8000a52:	f000 f82b 	bl	8000aac <set_uart_baudrate>

	//Configure the transfer direction
	USART2->CR1 = CR1_TE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <uart_tx_init+0x90>)
 8000a58:	2208      	movs	r2, #8
 8000a5a:	60da      	str	r2, [r3, #12]

	//Enable UART module
	USART2->CR1 |= CR1_UE;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <uart_tx_init+0x90>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <uart_tx_init+0x90>)
 8000a62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000
 8000a74:	00f42400 	.word	0x00f42400
 8000a78:	40004400 	.word	0x40004400

08000a7c <uart_write>:



static void uart_write(int ch)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	//Ensuring clear TX Register
	while (!(USART2->SR & SR_TXE)){}
 8000a84:	bf00      	nop
 8000a86:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <uart_write+0x2c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f9      	beq.n	8000a86 <uart_write+0xa>

	//TX
	USART2->DR = (ch & 0xFF);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <uart_write+0x2c>)
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	6053      	str	r3, [r2, #4]
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40004400 	.word	0x40004400

08000aac <set_uart_baudrate>:

static void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_baudrate(APB1_CLK, UART_BAUDRATE);
 8000ab6:	4c06      	ldr	r4, [pc, #24]	@ (8000ad0 <set_uart_baudrate+0x24>)
 8000ab8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <set_uart_baudrate+0x28>)
 8000abe:	f000 f80b 	bl	8000ad8 <compute_uart_baudrate>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	60a3      	str	r3, [r4, #8]
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd90      	pop	{r4, r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40004400 	.word	0x40004400
 8000ad4:	00f42400 	.word	0x00f42400

08000ad8 <compute_uart_baudrate>:

static uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
	return (periph_clk + (baudrate/2U))/baudrate;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	085a      	lsrs	r2, r3, #1
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	441a      	add	r2, r3
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000afc:	480d      	ldr	r0, [pc, #52]	@ (8000b34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000afe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	@ (8000b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	@ (8000b40 <LoopForever+0xe>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b48 <LoopForever+0x16>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b2a:	f000 f97d 	bl	8000e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2e:	f7ff fe43 	bl	80007b8 <main>

08000b32 <LoopForever>:

LoopForever:
  b LoopForever
 8000b32:	e7fe      	b.n	8000b32 <LoopForever>
  ldr   r0, =_estack
 8000b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b40:	08001a28 	.word	0x08001a28
  ldr r2, =_sbss
 8000b44:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b48:	200040c8 	.word	0x200040c8

08000b4c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC_IRQHandler>
	...

08000b50 <std>:
 8000b50:	2300      	movs	r3, #0
 8000b52:	b510      	push	{r4, lr}
 8000b54:	4604      	mov	r4, r0
 8000b56:	e9c0 3300 	strd	r3, r3, [r0]
 8000b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b5e:	6083      	str	r3, [r0, #8]
 8000b60:	8181      	strh	r1, [r0, #12]
 8000b62:	6643      	str	r3, [r0, #100]	@ 0x64
 8000b64:	81c2      	strh	r2, [r0, #14]
 8000b66:	6183      	str	r3, [r0, #24]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	2208      	movs	r2, #8
 8000b6c:	305c      	adds	r0, #92	@ 0x5c
 8000b6e:	f000 f906 	bl	8000d7e <memset>
 8000b72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <std+0x58>)
 8000b74:	6263      	str	r3, [r4, #36]	@ 0x24
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <std+0x5c>)
 8000b78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <std+0x60>)
 8000b7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <std+0x64>)
 8000b80:	6323      	str	r3, [r4, #48]	@ 0x30
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <std+0x68>)
 8000b84:	6224      	str	r4, [r4, #32]
 8000b86:	429c      	cmp	r4, r3
 8000b88:	d006      	beq.n	8000b98 <std+0x48>
 8000b8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000b8e:	4294      	cmp	r4, r2
 8000b90:	d002      	beq.n	8000b98 <std+0x48>
 8000b92:	33d0      	adds	r3, #208	@ 0xd0
 8000b94:	429c      	cmp	r4, r3
 8000b96:	d105      	bne.n	8000ba4 <std+0x54>
 8000b98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ba0:	f000 b966 	b.w	8000e70 <__retarget_lock_init_recursive>
 8000ba4:	bd10      	pop	{r4, pc}
 8000ba6:	bf00      	nop
 8000ba8:	08000cf9 	.word	0x08000cf9
 8000bac:	08000d1b 	.word	0x08000d1b
 8000bb0:	08000d53 	.word	0x08000d53
 8000bb4:	08000d77 	.word	0x08000d77
 8000bb8:	20003f7c 	.word	0x20003f7c

08000bbc <stdio_exit_handler>:
 8000bbc:	4a02      	ldr	r2, [pc, #8]	@ (8000bc8 <stdio_exit_handler+0xc>)
 8000bbe:	4903      	ldr	r1, [pc, #12]	@ (8000bcc <stdio_exit_handler+0x10>)
 8000bc0:	4803      	ldr	r0, [pc, #12]	@ (8000bd0 <stdio_exit_handler+0x14>)
 8000bc2:	f000 b869 	b.w	8000c98 <_fwalk_sglue>
 8000bc6:	bf00      	nop
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	08001711 	.word	0x08001711
 8000bd0:	20000010 	.word	0x20000010

08000bd4 <cleanup_stdio>:
 8000bd4:	6841      	ldr	r1, [r0, #4]
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <cleanup_stdio+0x34>)
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	b510      	push	{r4, lr}
 8000bdc:	4604      	mov	r4, r0
 8000bde:	d001      	beq.n	8000be4 <cleanup_stdio+0x10>
 8000be0:	f000 fd96 	bl	8001710 <_fflush_r>
 8000be4:	68a1      	ldr	r1, [r4, #8]
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <cleanup_stdio+0x38>)
 8000be8:	4299      	cmp	r1, r3
 8000bea:	d002      	beq.n	8000bf2 <cleanup_stdio+0x1e>
 8000bec:	4620      	mov	r0, r4
 8000bee:	f000 fd8f 	bl	8001710 <_fflush_r>
 8000bf2:	68e1      	ldr	r1, [r4, #12]
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <cleanup_stdio+0x3c>)
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d004      	beq.n	8000c04 <cleanup_stdio+0x30>
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c00:	f000 bd86 	b.w	8001710 <_fflush_r>
 8000c04:	bd10      	pop	{r4, pc}
 8000c06:	bf00      	nop
 8000c08:	20003f7c 	.word	0x20003f7c
 8000c0c:	20003fe4 	.word	0x20003fe4
 8000c10:	2000404c 	.word	0x2000404c

08000c14 <global_stdio_init.part.0>:
 8000c14:	b510      	push	{r4, lr}
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <global_stdio_init.part.0+0x30>)
 8000c18:	4c0b      	ldr	r4, [pc, #44]	@ (8000c48 <global_stdio_init.part.0+0x34>)
 8000c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c4c <global_stdio_init.part.0+0x38>)
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	4620      	mov	r0, r4
 8000c20:	2200      	movs	r2, #0
 8000c22:	2104      	movs	r1, #4
 8000c24:	f7ff ff94 	bl	8000b50 <std>
 8000c28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2109      	movs	r1, #9
 8000c30:	f7ff ff8e 	bl	8000b50 <std>
 8000c34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000c38:	2202      	movs	r2, #2
 8000c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c3e:	2112      	movs	r1, #18
 8000c40:	f7ff bf86 	b.w	8000b50 <std>
 8000c44:	200040b4 	.word	0x200040b4
 8000c48:	20003f7c 	.word	0x20003f7c
 8000c4c:	08000bbd 	.word	0x08000bbd

08000c50 <__sfp_lock_acquire>:
 8000c50:	4801      	ldr	r0, [pc, #4]	@ (8000c58 <__sfp_lock_acquire+0x8>)
 8000c52:	f000 b90e 	b.w	8000e72 <__retarget_lock_acquire_recursive>
 8000c56:	bf00      	nop
 8000c58:	200040bd 	.word	0x200040bd

08000c5c <__sfp_lock_release>:
 8000c5c:	4801      	ldr	r0, [pc, #4]	@ (8000c64 <__sfp_lock_release+0x8>)
 8000c5e:	f000 b909 	b.w	8000e74 <__retarget_lock_release_recursive>
 8000c62:	bf00      	nop
 8000c64:	200040bd 	.word	0x200040bd

08000c68 <__sinit>:
 8000c68:	b510      	push	{r4, lr}
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	f7ff fff0 	bl	8000c50 <__sfp_lock_acquire>
 8000c70:	6a23      	ldr	r3, [r4, #32]
 8000c72:	b11b      	cbz	r3, 8000c7c <__sinit+0x14>
 8000c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c78:	f7ff bff0 	b.w	8000c5c <__sfp_lock_release>
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <__sinit+0x28>)
 8000c7e:	6223      	str	r3, [r4, #32]
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <__sinit+0x2c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1f5      	bne.n	8000c74 <__sinit+0xc>
 8000c88:	f7ff ffc4 	bl	8000c14 <global_stdio_init.part.0>
 8000c8c:	e7f2      	b.n	8000c74 <__sinit+0xc>
 8000c8e:	bf00      	nop
 8000c90:	08000bd5 	.word	0x08000bd5
 8000c94:	200040b4 	.word	0x200040b4

08000c98 <_fwalk_sglue>:
 8000c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c9c:	4607      	mov	r7, r0
 8000c9e:	4688      	mov	r8, r1
 8000ca0:	4614      	mov	r4, r2
 8000ca2:	2600      	movs	r6, #0
 8000ca4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ca8:	f1b9 0901 	subs.w	r9, r9, #1
 8000cac:	d505      	bpl.n	8000cba <_fwalk_sglue+0x22>
 8000cae:	6824      	ldr	r4, [r4, #0]
 8000cb0:	2c00      	cmp	r4, #0
 8000cb2:	d1f7      	bne.n	8000ca4 <_fwalk_sglue+0xc>
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cba:	89ab      	ldrh	r3, [r5, #12]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d907      	bls.n	8000cd0 <_fwalk_sglue+0x38>
 8000cc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	d003      	beq.n	8000cd0 <_fwalk_sglue+0x38>
 8000cc8:	4629      	mov	r1, r5
 8000cca:	4638      	mov	r0, r7
 8000ccc:	47c0      	blx	r8
 8000cce:	4306      	orrs	r6, r0
 8000cd0:	3568      	adds	r5, #104	@ 0x68
 8000cd2:	e7e9      	b.n	8000ca8 <_fwalk_sglue+0x10>

08000cd4 <iprintf>:
 8000cd4:	b40f      	push	{r0, r1, r2, r3}
 8000cd6:	b507      	push	{r0, r1, r2, lr}
 8000cd8:	4906      	ldr	r1, [pc, #24]	@ (8000cf4 <iprintf+0x20>)
 8000cda:	ab04      	add	r3, sp, #16
 8000cdc:	6808      	ldr	r0, [r1, #0]
 8000cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ce2:	6881      	ldr	r1, [r0, #8]
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	f000 f9e9 	bl	80010bc <_vfiprintf_r>
 8000cea:	b003      	add	sp, #12
 8000cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4770      	bx	lr
 8000cf4:	2000000c 	.word	0x2000000c

08000cf8 <__sread>:
 8000cf8:	b510      	push	{r4, lr}
 8000cfa:	460c      	mov	r4, r1
 8000cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d00:	f000 f868 	bl	8000dd4 <_read_r>
 8000d04:	2800      	cmp	r0, #0
 8000d06:	bfab      	itete	ge
 8000d08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8000d0c:	181b      	addge	r3, r3, r0
 8000d0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000d12:	bfac      	ite	ge
 8000d14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000d16:	81a3      	strhlt	r3, [r4, #12]
 8000d18:	bd10      	pop	{r4, pc}

08000d1a <__swrite>:
 8000d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d1e:	461f      	mov	r7, r3
 8000d20:	898b      	ldrh	r3, [r1, #12]
 8000d22:	05db      	lsls	r3, r3, #23
 8000d24:	4605      	mov	r5, r0
 8000d26:	460c      	mov	r4, r1
 8000d28:	4616      	mov	r6, r2
 8000d2a:	d505      	bpl.n	8000d38 <__swrite+0x1e>
 8000d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d30:	2302      	movs	r3, #2
 8000d32:	2200      	movs	r2, #0
 8000d34:	f000 f83c 	bl	8000db0 <_lseek_r>
 8000d38:	89a3      	ldrh	r3, [r4, #12]
 8000d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d42:	81a3      	strh	r3, [r4, #12]
 8000d44:	4632      	mov	r2, r6
 8000d46:	463b      	mov	r3, r7
 8000d48:	4628      	mov	r0, r5
 8000d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d4e:	f000 b853 	b.w	8000df8 <_write_r>

08000d52 <__sseek>:
 8000d52:	b510      	push	{r4, lr}
 8000d54:	460c      	mov	r4, r1
 8000d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d5a:	f000 f829 	bl	8000db0 <_lseek_r>
 8000d5e:	1c43      	adds	r3, r0, #1
 8000d60:	89a3      	ldrh	r3, [r4, #12]
 8000d62:	bf15      	itete	ne
 8000d64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000d66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000d6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000d6e:	81a3      	strheq	r3, [r4, #12]
 8000d70:	bf18      	it	ne
 8000d72:	81a3      	strhne	r3, [r4, #12]
 8000d74:	bd10      	pop	{r4, pc}

08000d76 <__sclose>:
 8000d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d7a:	f000 b809 	b.w	8000d90 <_close_r>

08000d7e <memset>:
 8000d7e:	4402      	add	r2, r0
 8000d80:	4603      	mov	r3, r0
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d100      	bne.n	8000d88 <memset+0xa>
 8000d86:	4770      	bx	lr
 8000d88:	f803 1b01 	strb.w	r1, [r3], #1
 8000d8c:	e7f9      	b.n	8000d82 <memset+0x4>
	...

08000d90 <_close_r>:
 8000d90:	b538      	push	{r3, r4, r5, lr}
 8000d92:	4d06      	ldr	r5, [pc, #24]	@ (8000dac <_close_r+0x1c>)
 8000d94:	2300      	movs	r3, #0
 8000d96:	4604      	mov	r4, r0
 8000d98:	4608      	mov	r0, r1
 8000d9a:	602b      	str	r3, [r5, #0]
 8000d9c:	f7ff fd87 	bl	80008ae <_close>
 8000da0:	1c43      	adds	r3, r0, #1
 8000da2:	d102      	bne.n	8000daa <_close_r+0x1a>
 8000da4:	682b      	ldr	r3, [r5, #0]
 8000da6:	b103      	cbz	r3, 8000daa <_close_r+0x1a>
 8000da8:	6023      	str	r3, [r4, #0]
 8000daa:	bd38      	pop	{r3, r4, r5, pc}
 8000dac:	200040b8 	.word	0x200040b8

08000db0 <_lseek_r>:
 8000db0:	b538      	push	{r3, r4, r5, lr}
 8000db2:	4d07      	ldr	r5, [pc, #28]	@ (8000dd0 <_lseek_r+0x20>)
 8000db4:	4604      	mov	r4, r0
 8000db6:	4608      	mov	r0, r1
 8000db8:	4611      	mov	r1, r2
 8000dba:	2200      	movs	r2, #0
 8000dbc:	602a      	str	r2, [r5, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	f7ff fd9c 	bl	80008fc <_lseek>
 8000dc4:	1c43      	adds	r3, r0, #1
 8000dc6:	d102      	bne.n	8000dce <_lseek_r+0x1e>
 8000dc8:	682b      	ldr	r3, [r5, #0]
 8000dca:	b103      	cbz	r3, 8000dce <_lseek_r+0x1e>
 8000dcc:	6023      	str	r3, [r4, #0]
 8000dce:	bd38      	pop	{r3, r4, r5, pc}
 8000dd0:	200040b8 	.word	0x200040b8

08000dd4 <_read_r>:
 8000dd4:	b538      	push	{r3, r4, r5, lr}
 8000dd6:	4d07      	ldr	r5, [pc, #28]	@ (8000df4 <_read_r+0x20>)
 8000dd8:	4604      	mov	r4, r0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	4611      	mov	r1, r2
 8000dde:	2200      	movs	r2, #0
 8000de0:	602a      	str	r2, [r5, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	f7ff fd2a 	bl	800083c <_read>
 8000de8:	1c43      	adds	r3, r0, #1
 8000dea:	d102      	bne.n	8000df2 <_read_r+0x1e>
 8000dec:	682b      	ldr	r3, [r5, #0]
 8000dee:	b103      	cbz	r3, 8000df2 <_read_r+0x1e>
 8000df0:	6023      	str	r3, [r4, #0]
 8000df2:	bd38      	pop	{r3, r4, r5, pc}
 8000df4:	200040b8 	.word	0x200040b8

08000df8 <_write_r>:
 8000df8:	b538      	push	{r3, r4, r5, lr}
 8000dfa:	4d07      	ldr	r5, [pc, #28]	@ (8000e18 <_write_r+0x20>)
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	4608      	mov	r0, r1
 8000e00:	4611      	mov	r1, r2
 8000e02:	2200      	movs	r2, #0
 8000e04:	602a      	str	r2, [r5, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	f7ff fd35 	bl	8000876 <_write>
 8000e0c:	1c43      	adds	r3, r0, #1
 8000e0e:	d102      	bne.n	8000e16 <_write_r+0x1e>
 8000e10:	682b      	ldr	r3, [r5, #0]
 8000e12:	b103      	cbz	r3, 8000e16 <_write_r+0x1e>
 8000e14:	6023      	str	r3, [r4, #0]
 8000e16:	bd38      	pop	{r3, r4, r5, pc}
 8000e18:	200040b8 	.word	0x200040b8

08000e1c <__errno>:
 8000e1c:	4b01      	ldr	r3, [pc, #4]	@ (8000e24 <__errno+0x8>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	2000000c 	.word	0x2000000c

08000e28 <__libc_init_array>:
 8000e28:	b570      	push	{r4, r5, r6, lr}
 8000e2a:	4d0d      	ldr	r5, [pc, #52]	@ (8000e60 <__libc_init_array+0x38>)
 8000e2c:	4c0d      	ldr	r4, [pc, #52]	@ (8000e64 <__libc_init_array+0x3c>)
 8000e2e:	1b64      	subs	r4, r4, r5
 8000e30:	10a4      	asrs	r4, r4, #2
 8000e32:	2600      	movs	r6, #0
 8000e34:	42a6      	cmp	r6, r4
 8000e36:	d109      	bne.n	8000e4c <__libc_init_array+0x24>
 8000e38:	4d0b      	ldr	r5, [pc, #44]	@ (8000e68 <__libc_init_array+0x40>)
 8000e3a:	4c0c      	ldr	r4, [pc, #48]	@ (8000e6c <__libc_init_array+0x44>)
 8000e3c:	f000 fdb8 	bl	80019b0 <_init>
 8000e40:	1b64      	subs	r4, r4, r5
 8000e42:	10a4      	asrs	r4, r4, #2
 8000e44:	2600      	movs	r6, #0
 8000e46:	42a6      	cmp	r6, r4
 8000e48:	d105      	bne.n	8000e56 <__libc_init_array+0x2e>
 8000e4a:	bd70      	pop	{r4, r5, r6, pc}
 8000e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e50:	4798      	blx	r3
 8000e52:	3601      	adds	r6, #1
 8000e54:	e7ee      	b.n	8000e34 <__libc_init_array+0xc>
 8000e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e5a:	4798      	blx	r3
 8000e5c:	3601      	adds	r6, #1
 8000e5e:	e7f2      	b.n	8000e46 <__libc_init_array+0x1e>
 8000e60:	08001a20 	.word	0x08001a20
 8000e64:	08001a20 	.word	0x08001a20
 8000e68:	08001a20 	.word	0x08001a20
 8000e6c:	08001a24 	.word	0x08001a24

08000e70 <__retarget_lock_init_recursive>:
 8000e70:	4770      	bx	lr

08000e72 <__retarget_lock_acquire_recursive>:
 8000e72:	4770      	bx	lr

08000e74 <__retarget_lock_release_recursive>:
 8000e74:	4770      	bx	lr
	...

08000e78 <_free_r>:
 8000e78:	b538      	push	{r3, r4, r5, lr}
 8000e7a:	4605      	mov	r5, r0
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	d041      	beq.n	8000f04 <_free_r+0x8c>
 8000e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e84:	1f0c      	subs	r4, r1, #4
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	bfb8      	it	lt
 8000e8a:	18e4      	addlt	r4, r4, r3
 8000e8c:	f000 f8e0 	bl	8001050 <__malloc_lock>
 8000e90:	4a1d      	ldr	r2, [pc, #116]	@ (8000f08 <_free_r+0x90>)
 8000e92:	6813      	ldr	r3, [r2, #0]
 8000e94:	b933      	cbnz	r3, 8000ea4 <_free_r+0x2c>
 8000e96:	6063      	str	r3, [r4, #4]
 8000e98:	6014      	str	r4, [r2, #0]
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ea0:	f000 b8dc 	b.w	800105c <__malloc_unlock>
 8000ea4:	42a3      	cmp	r3, r4
 8000ea6:	d908      	bls.n	8000eba <_free_r+0x42>
 8000ea8:	6820      	ldr	r0, [r4, #0]
 8000eaa:	1821      	adds	r1, r4, r0
 8000eac:	428b      	cmp	r3, r1
 8000eae:	bf01      	itttt	eq
 8000eb0:	6819      	ldreq	r1, [r3, #0]
 8000eb2:	685b      	ldreq	r3, [r3, #4]
 8000eb4:	1809      	addeq	r1, r1, r0
 8000eb6:	6021      	streq	r1, [r4, #0]
 8000eb8:	e7ed      	b.n	8000e96 <_free_r+0x1e>
 8000eba:	461a      	mov	r2, r3
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	b10b      	cbz	r3, 8000ec4 <_free_r+0x4c>
 8000ec0:	42a3      	cmp	r3, r4
 8000ec2:	d9fa      	bls.n	8000eba <_free_r+0x42>
 8000ec4:	6811      	ldr	r1, [r2, #0]
 8000ec6:	1850      	adds	r0, r2, r1
 8000ec8:	42a0      	cmp	r0, r4
 8000eca:	d10b      	bne.n	8000ee4 <_free_r+0x6c>
 8000ecc:	6820      	ldr	r0, [r4, #0]
 8000ece:	4401      	add	r1, r0
 8000ed0:	1850      	adds	r0, r2, r1
 8000ed2:	4283      	cmp	r3, r0
 8000ed4:	6011      	str	r1, [r2, #0]
 8000ed6:	d1e0      	bne.n	8000e9a <_free_r+0x22>
 8000ed8:	6818      	ldr	r0, [r3, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	6053      	str	r3, [r2, #4]
 8000ede:	4408      	add	r0, r1
 8000ee0:	6010      	str	r0, [r2, #0]
 8000ee2:	e7da      	b.n	8000e9a <_free_r+0x22>
 8000ee4:	d902      	bls.n	8000eec <_free_r+0x74>
 8000ee6:	230c      	movs	r3, #12
 8000ee8:	602b      	str	r3, [r5, #0]
 8000eea:	e7d6      	b.n	8000e9a <_free_r+0x22>
 8000eec:	6820      	ldr	r0, [r4, #0]
 8000eee:	1821      	adds	r1, r4, r0
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	bf04      	itt	eq
 8000ef4:	6819      	ldreq	r1, [r3, #0]
 8000ef6:	685b      	ldreq	r3, [r3, #4]
 8000ef8:	6063      	str	r3, [r4, #4]
 8000efa:	bf04      	itt	eq
 8000efc:	1809      	addeq	r1, r1, r0
 8000efe:	6021      	streq	r1, [r4, #0]
 8000f00:	6054      	str	r4, [r2, #4]
 8000f02:	e7ca      	b.n	8000e9a <_free_r+0x22>
 8000f04:	bd38      	pop	{r3, r4, r5, pc}
 8000f06:	bf00      	nop
 8000f08:	200040c4 	.word	0x200040c4

08000f0c <sbrk_aligned>:
 8000f0c:	b570      	push	{r4, r5, r6, lr}
 8000f0e:	4e0f      	ldr	r6, [pc, #60]	@ (8000f4c <sbrk_aligned+0x40>)
 8000f10:	460c      	mov	r4, r1
 8000f12:	6831      	ldr	r1, [r6, #0]
 8000f14:	4605      	mov	r5, r0
 8000f16:	b911      	cbnz	r1, 8000f1e <sbrk_aligned+0x12>
 8000f18:	f000 fcb6 	bl	8001888 <_sbrk_r>
 8000f1c:	6030      	str	r0, [r6, #0]
 8000f1e:	4621      	mov	r1, r4
 8000f20:	4628      	mov	r0, r5
 8000f22:	f000 fcb1 	bl	8001888 <_sbrk_r>
 8000f26:	1c43      	adds	r3, r0, #1
 8000f28:	d103      	bne.n	8000f32 <sbrk_aligned+0x26>
 8000f2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000f2e:	4620      	mov	r0, r4
 8000f30:	bd70      	pop	{r4, r5, r6, pc}
 8000f32:	1cc4      	adds	r4, r0, #3
 8000f34:	f024 0403 	bic.w	r4, r4, #3
 8000f38:	42a0      	cmp	r0, r4
 8000f3a:	d0f8      	beq.n	8000f2e <sbrk_aligned+0x22>
 8000f3c:	1a21      	subs	r1, r4, r0
 8000f3e:	4628      	mov	r0, r5
 8000f40:	f000 fca2 	bl	8001888 <_sbrk_r>
 8000f44:	3001      	adds	r0, #1
 8000f46:	d1f2      	bne.n	8000f2e <sbrk_aligned+0x22>
 8000f48:	e7ef      	b.n	8000f2a <sbrk_aligned+0x1e>
 8000f4a:	bf00      	nop
 8000f4c:	200040c0 	.word	0x200040c0

08000f50 <_malloc_r>:
 8000f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f54:	1ccd      	adds	r5, r1, #3
 8000f56:	f025 0503 	bic.w	r5, r5, #3
 8000f5a:	3508      	adds	r5, #8
 8000f5c:	2d0c      	cmp	r5, #12
 8000f5e:	bf38      	it	cc
 8000f60:	250c      	movcc	r5, #12
 8000f62:	2d00      	cmp	r5, #0
 8000f64:	4606      	mov	r6, r0
 8000f66:	db01      	blt.n	8000f6c <_malloc_r+0x1c>
 8000f68:	42a9      	cmp	r1, r5
 8000f6a:	d904      	bls.n	8000f76 <_malloc_r+0x26>
 8000f6c:	230c      	movs	r3, #12
 8000f6e:	6033      	str	r3, [r6, #0]
 8000f70:	2000      	movs	r0, #0
 8000f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800104c <_malloc_r+0xfc>
 8000f7a:	f000 f869 	bl	8001050 <__malloc_lock>
 8000f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8000f82:	461c      	mov	r4, r3
 8000f84:	bb44      	cbnz	r4, 8000fd8 <_malloc_r+0x88>
 8000f86:	4629      	mov	r1, r5
 8000f88:	4630      	mov	r0, r6
 8000f8a:	f7ff ffbf 	bl	8000f0c <sbrk_aligned>
 8000f8e:	1c43      	adds	r3, r0, #1
 8000f90:	4604      	mov	r4, r0
 8000f92:	d158      	bne.n	8001046 <_malloc_r+0xf6>
 8000f94:	f8d8 4000 	ldr.w	r4, [r8]
 8000f98:	4627      	mov	r7, r4
 8000f9a:	2f00      	cmp	r7, #0
 8000f9c:	d143      	bne.n	8001026 <_malloc_r+0xd6>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d04b      	beq.n	800103a <_malloc_r+0xea>
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	4639      	mov	r1, r7
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	eb04 0903 	add.w	r9, r4, r3
 8000fac:	f000 fc6c 	bl	8001888 <_sbrk_r>
 8000fb0:	4581      	cmp	r9, r0
 8000fb2:	d142      	bne.n	800103a <_malloc_r+0xea>
 8000fb4:	6821      	ldr	r1, [r4, #0]
 8000fb6:	1a6d      	subs	r5, r5, r1
 8000fb8:	4629      	mov	r1, r5
 8000fba:	4630      	mov	r0, r6
 8000fbc:	f7ff ffa6 	bl	8000f0c <sbrk_aligned>
 8000fc0:	3001      	adds	r0, #1
 8000fc2:	d03a      	beq.n	800103a <_malloc_r+0xea>
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	442b      	add	r3, r5
 8000fc8:	6023      	str	r3, [r4, #0]
 8000fca:	f8d8 3000 	ldr.w	r3, [r8]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	bb62      	cbnz	r2, 800102c <_malloc_r+0xdc>
 8000fd2:	f8c8 7000 	str.w	r7, [r8]
 8000fd6:	e00f      	b.n	8000ff8 <_malloc_r+0xa8>
 8000fd8:	6822      	ldr	r2, [r4, #0]
 8000fda:	1b52      	subs	r2, r2, r5
 8000fdc:	d420      	bmi.n	8001020 <_malloc_r+0xd0>
 8000fde:	2a0b      	cmp	r2, #11
 8000fe0:	d917      	bls.n	8001012 <_malloc_r+0xc2>
 8000fe2:	1961      	adds	r1, r4, r5
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	6025      	str	r5, [r4, #0]
 8000fe8:	bf18      	it	ne
 8000fea:	6059      	strne	r1, [r3, #4]
 8000fec:	6863      	ldr	r3, [r4, #4]
 8000fee:	bf08      	it	eq
 8000ff0:	f8c8 1000 	streq.w	r1, [r8]
 8000ff4:	5162      	str	r2, [r4, r5]
 8000ff6:	604b      	str	r3, [r1, #4]
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	f000 f82f 	bl	800105c <__malloc_unlock>
 8000ffe:	f104 000b 	add.w	r0, r4, #11
 8001002:	1d23      	adds	r3, r4, #4
 8001004:	f020 0007 	bic.w	r0, r0, #7
 8001008:	1ac2      	subs	r2, r0, r3
 800100a:	bf1c      	itt	ne
 800100c:	1a1b      	subne	r3, r3, r0
 800100e:	50a3      	strne	r3, [r4, r2]
 8001010:	e7af      	b.n	8000f72 <_malloc_r+0x22>
 8001012:	6862      	ldr	r2, [r4, #4]
 8001014:	42a3      	cmp	r3, r4
 8001016:	bf0c      	ite	eq
 8001018:	f8c8 2000 	streq.w	r2, [r8]
 800101c:	605a      	strne	r2, [r3, #4]
 800101e:	e7eb      	b.n	8000ff8 <_malloc_r+0xa8>
 8001020:	4623      	mov	r3, r4
 8001022:	6864      	ldr	r4, [r4, #4]
 8001024:	e7ae      	b.n	8000f84 <_malloc_r+0x34>
 8001026:	463c      	mov	r4, r7
 8001028:	687f      	ldr	r7, [r7, #4]
 800102a:	e7b6      	b.n	8000f9a <_malloc_r+0x4a>
 800102c:	461a      	mov	r2, r3
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	42a3      	cmp	r3, r4
 8001032:	d1fb      	bne.n	800102c <_malloc_r+0xdc>
 8001034:	2300      	movs	r3, #0
 8001036:	6053      	str	r3, [r2, #4]
 8001038:	e7de      	b.n	8000ff8 <_malloc_r+0xa8>
 800103a:	230c      	movs	r3, #12
 800103c:	6033      	str	r3, [r6, #0]
 800103e:	4630      	mov	r0, r6
 8001040:	f000 f80c 	bl	800105c <__malloc_unlock>
 8001044:	e794      	b.n	8000f70 <_malloc_r+0x20>
 8001046:	6005      	str	r5, [r0, #0]
 8001048:	e7d6      	b.n	8000ff8 <_malloc_r+0xa8>
 800104a:	bf00      	nop
 800104c:	200040c4 	.word	0x200040c4

08001050 <__malloc_lock>:
 8001050:	4801      	ldr	r0, [pc, #4]	@ (8001058 <__malloc_lock+0x8>)
 8001052:	f7ff bf0e 	b.w	8000e72 <__retarget_lock_acquire_recursive>
 8001056:	bf00      	nop
 8001058:	200040bc 	.word	0x200040bc

0800105c <__malloc_unlock>:
 800105c:	4801      	ldr	r0, [pc, #4]	@ (8001064 <__malloc_unlock+0x8>)
 800105e:	f7ff bf09 	b.w	8000e74 <__retarget_lock_release_recursive>
 8001062:	bf00      	nop
 8001064:	200040bc 	.word	0x200040bc

08001068 <__sfputc_r>:
 8001068:	6893      	ldr	r3, [r2, #8]
 800106a:	3b01      	subs	r3, #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	b410      	push	{r4}
 8001070:	6093      	str	r3, [r2, #8]
 8001072:	da08      	bge.n	8001086 <__sfputc_r+0x1e>
 8001074:	6994      	ldr	r4, [r2, #24]
 8001076:	42a3      	cmp	r3, r4
 8001078:	db01      	blt.n	800107e <__sfputc_r+0x16>
 800107a:	290a      	cmp	r1, #10
 800107c:	d103      	bne.n	8001086 <__sfputc_r+0x1e>
 800107e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001082:	f000 bb6d 	b.w	8001760 <__swbuf_r>
 8001086:	6813      	ldr	r3, [r2, #0]
 8001088:	1c58      	adds	r0, r3, #1
 800108a:	6010      	str	r0, [r2, #0]
 800108c:	7019      	strb	r1, [r3, #0]
 800108e:	4608      	mov	r0, r1
 8001090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001094:	4770      	bx	lr

08001096 <__sfputs_r>:
 8001096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001098:	4606      	mov	r6, r0
 800109a:	460f      	mov	r7, r1
 800109c:	4614      	mov	r4, r2
 800109e:	18d5      	adds	r5, r2, r3
 80010a0:	42ac      	cmp	r4, r5
 80010a2:	d101      	bne.n	80010a8 <__sfputs_r+0x12>
 80010a4:	2000      	movs	r0, #0
 80010a6:	e007      	b.n	80010b8 <__sfputs_r+0x22>
 80010a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010ac:	463a      	mov	r2, r7
 80010ae:	4630      	mov	r0, r6
 80010b0:	f7ff ffda 	bl	8001068 <__sfputc_r>
 80010b4:	1c43      	adds	r3, r0, #1
 80010b6:	d1f3      	bne.n	80010a0 <__sfputs_r+0xa>
 80010b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080010bc <_vfiprintf_r>:
 80010bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010c0:	460d      	mov	r5, r1
 80010c2:	b09d      	sub	sp, #116	@ 0x74
 80010c4:	4614      	mov	r4, r2
 80010c6:	4698      	mov	r8, r3
 80010c8:	4606      	mov	r6, r0
 80010ca:	b118      	cbz	r0, 80010d4 <_vfiprintf_r+0x18>
 80010cc:	6a03      	ldr	r3, [r0, #32]
 80010ce:	b90b      	cbnz	r3, 80010d4 <_vfiprintf_r+0x18>
 80010d0:	f7ff fdca 	bl	8000c68 <__sinit>
 80010d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80010d6:	07d9      	lsls	r1, r3, #31
 80010d8:	d405      	bmi.n	80010e6 <_vfiprintf_r+0x2a>
 80010da:	89ab      	ldrh	r3, [r5, #12]
 80010dc:	059a      	lsls	r2, r3, #22
 80010de:	d402      	bmi.n	80010e6 <_vfiprintf_r+0x2a>
 80010e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80010e2:	f7ff fec6 	bl	8000e72 <__retarget_lock_acquire_recursive>
 80010e6:	89ab      	ldrh	r3, [r5, #12]
 80010e8:	071b      	lsls	r3, r3, #28
 80010ea:	d501      	bpl.n	80010f0 <_vfiprintf_r+0x34>
 80010ec:	692b      	ldr	r3, [r5, #16]
 80010ee:	b99b      	cbnz	r3, 8001118 <_vfiprintf_r+0x5c>
 80010f0:	4629      	mov	r1, r5
 80010f2:	4630      	mov	r0, r6
 80010f4:	f000 fb72 	bl	80017dc <__swsetup_r>
 80010f8:	b170      	cbz	r0, 8001118 <_vfiprintf_r+0x5c>
 80010fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80010fc:	07dc      	lsls	r4, r3, #31
 80010fe:	d504      	bpl.n	800110a <_vfiprintf_r+0x4e>
 8001100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001104:	b01d      	add	sp, #116	@ 0x74
 8001106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800110a:	89ab      	ldrh	r3, [r5, #12]
 800110c:	0598      	lsls	r0, r3, #22
 800110e:	d4f7      	bmi.n	8001100 <_vfiprintf_r+0x44>
 8001110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001112:	f7ff feaf 	bl	8000e74 <__retarget_lock_release_recursive>
 8001116:	e7f3      	b.n	8001100 <_vfiprintf_r+0x44>
 8001118:	2300      	movs	r3, #0
 800111a:	9309      	str	r3, [sp, #36]	@ 0x24
 800111c:	2320      	movs	r3, #32
 800111e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001122:	f8cd 800c 	str.w	r8, [sp, #12]
 8001126:	2330      	movs	r3, #48	@ 0x30
 8001128:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80012d8 <_vfiprintf_r+0x21c>
 800112c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001130:	f04f 0901 	mov.w	r9, #1
 8001134:	4623      	mov	r3, r4
 8001136:	469a      	mov	sl, r3
 8001138:	f813 2b01 	ldrb.w	r2, [r3], #1
 800113c:	b10a      	cbz	r2, 8001142 <_vfiprintf_r+0x86>
 800113e:	2a25      	cmp	r2, #37	@ 0x25
 8001140:	d1f9      	bne.n	8001136 <_vfiprintf_r+0x7a>
 8001142:	ebba 0b04 	subs.w	fp, sl, r4
 8001146:	d00b      	beq.n	8001160 <_vfiprintf_r+0xa4>
 8001148:	465b      	mov	r3, fp
 800114a:	4622      	mov	r2, r4
 800114c:	4629      	mov	r1, r5
 800114e:	4630      	mov	r0, r6
 8001150:	f7ff ffa1 	bl	8001096 <__sfputs_r>
 8001154:	3001      	adds	r0, #1
 8001156:	f000 80a7 	beq.w	80012a8 <_vfiprintf_r+0x1ec>
 800115a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800115c:	445a      	add	r2, fp
 800115e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001160:	f89a 3000 	ldrb.w	r3, [sl]
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 809f 	beq.w	80012a8 <_vfiprintf_r+0x1ec>
 800116a:	2300      	movs	r3, #0
 800116c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001170:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001174:	f10a 0a01 	add.w	sl, sl, #1
 8001178:	9304      	str	r3, [sp, #16]
 800117a:	9307      	str	r3, [sp, #28]
 800117c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001180:	931a      	str	r3, [sp, #104]	@ 0x68
 8001182:	4654      	mov	r4, sl
 8001184:	2205      	movs	r2, #5
 8001186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800118a:	4853      	ldr	r0, [pc, #332]	@ (80012d8 <_vfiprintf_r+0x21c>)
 800118c:	f7ff f840 	bl	8000210 <memchr>
 8001190:	9a04      	ldr	r2, [sp, #16]
 8001192:	b9d8      	cbnz	r0, 80011cc <_vfiprintf_r+0x110>
 8001194:	06d1      	lsls	r1, r2, #27
 8001196:	bf44      	itt	mi
 8001198:	2320      	movmi	r3, #32
 800119a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800119e:	0713      	lsls	r3, r2, #28
 80011a0:	bf44      	itt	mi
 80011a2:	232b      	movmi	r3, #43	@ 0x2b
 80011a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80011a8:	f89a 3000 	ldrb.w	r3, [sl]
 80011ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80011ae:	d015      	beq.n	80011dc <_vfiprintf_r+0x120>
 80011b0:	9a07      	ldr	r2, [sp, #28]
 80011b2:	4654      	mov	r4, sl
 80011b4:	2000      	movs	r0, #0
 80011b6:	f04f 0c0a 	mov.w	ip, #10
 80011ba:	4621      	mov	r1, r4
 80011bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80011c0:	3b30      	subs	r3, #48	@ 0x30
 80011c2:	2b09      	cmp	r3, #9
 80011c4:	d94b      	bls.n	800125e <_vfiprintf_r+0x1a2>
 80011c6:	b1b0      	cbz	r0, 80011f6 <_vfiprintf_r+0x13a>
 80011c8:	9207      	str	r2, [sp, #28]
 80011ca:	e014      	b.n	80011f6 <_vfiprintf_r+0x13a>
 80011cc:	eba0 0308 	sub.w	r3, r0, r8
 80011d0:	fa09 f303 	lsl.w	r3, r9, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	9304      	str	r3, [sp, #16]
 80011d8:	46a2      	mov	sl, r4
 80011da:	e7d2      	b.n	8001182 <_vfiprintf_r+0xc6>
 80011dc:	9b03      	ldr	r3, [sp, #12]
 80011de:	1d19      	adds	r1, r3, #4
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	9103      	str	r1, [sp, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bfbb      	ittet	lt
 80011e8:	425b      	neglt	r3, r3
 80011ea:	f042 0202 	orrlt.w	r2, r2, #2
 80011ee:	9307      	strge	r3, [sp, #28]
 80011f0:	9307      	strlt	r3, [sp, #28]
 80011f2:	bfb8      	it	lt
 80011f4:	9204      	strlt	r2, [sp, #16]
 80011f6:	7823      	ldrb	r3, [r4, #0]
 80011f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80011fa:	d10a      	bne.n	8001212 <_vfiprintf_r+0x156>
 80011fc:	7863      	ldrb	r3, [r4, #1]
 80011fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8001200:	d132      	bne.n	8001268 <_vfiprintf_r+0x1ac>
 8001202:	9b03      	ldr	r3, [sp, #12]
 8001204:	1d1a      	adds	r2, r3, #4
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	9203      	str	r2, [sp, #12]
 800120a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800120e:	3402      	adds	r4, #2
 8001210:	9305      	str	r3, [sp, #20]
 8001212:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80012e8 <_vfiprintf_r+0x22c>
 8001216:	7821      	ldrb	r1, [r4, #0]
 8001218:	2203      	movs	r2, #3
 800121a:	4650      	mov	r0, sl
 800121c:	f7fe fff8 	bl	8000210 <memchr>
 8001220:	b138      	cbz	r0, 8001232 <_vfiprintf_r+0x176>
 8001222:	9b04      	ldr	r3, [sp, #16]
 8001224:	eba0 000a 	sub.w	r0, r0, sl
 8001228:	2240      	movs	r2, #64	@ 0x40
 800122a:	4082      	lsls	r2, r0
 800122c:	4313      	orrs	r3, r2
 800122e:	3401      	adds	r4, #1
 8001230:	9304      	str	r3, [sp, #16]
 8001232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001236:	4829      	ldr	r0, [pc, #164]	@ (80012dc <_vfiprintf_r+0x220>)
 8001238:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800123c:	2206      	movs	r2, #6
 800123e:	f7fe ffe7 	bl	8000210 <memchr>
 8001242:	2800      	cmp	r0, #0
 8001244:	d03f      	beq.n	80012c6 <_vfiprintf_r+0x20a>
 8001246:	4b26      	ldr	r3, [pc, #152]	@ (80012e0 <_vfiprintf_r+0x224>)
 8001248:	bb1b      	cbnz	r3, 8001292 <_vfiprintf_r+0x1d6>
 800124a:	9b03      	ldr	r3, [sp, #12]
 800124c:	3307      	adds	r3, #7
 800124e:	f023 0307 	bic.w	r3, r3, #7
 8001252:	3308      	adds	r3, #8
 8001254:	9303      	str	r3, [sp, #12]
 8001256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001258:	443b      	add	r3, r7
 800125a:	9309      	str	r3, [sp, #36]	@ 0x24
 800125c:	e76a      	b.n	8001134 <_vfiprintf_r+0x78>
 800125e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001262:	460c      	mov	r4, r1
 8001264:	2001      	movs	r0, #1
 8001266:	e7a8      	b.n	80011ba <_vfiprintf_r+0xfe>
 8001268:	2300      	movs	r3, #0
 800126a:	3401      	adds	r4, #1
 800126c:	9305      	str	r3, [sp, #20]
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 0c0a 	mov.w	ip, #10
 8001274:	4620      	mov	r0, r4
 8001276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800127a:	3a30      	subs	r2, #48	@ 0x30
 800127c:	2a09      	cmp	r2, #9
 800127e:	d903      	bls.n	8001288 <_vfiprintf_r+0x1cc>
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0c6      	beq.n	8001212 <_vfiprintf_r+0x156>
 8001284:	9105      	str	r1, [sp, #20]
 8001286:	e7c4      	b.n	8001212 <_vfiprintf_r+0x156>
 8001288:	fb0c 2101 	mla	r1, ip, r1, r2
 800128c:	4604      	mov	r4, r0
 800128e:	2301      	movs	r3, #1
 8001290:	e7f0      	b.n	8001274 <_vfiprintf_r+0x1b8>
 8001292:	ab03      	add	r3, sp, #12
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	462a      	mov	r2, r5
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <_vfiprintf_r+0x228>)
 800129a:	a904      	add	r1, sp, #16
 800129c:	4630      	mov	r0, r6
 800129e:	f3af 8000 	nop.w
 80012a2:	4607      	mov	r7, r0
 80012a4:	1c78      	adds	r0, r7, #1
 80012a6:	d1d6      	bne.n	8001256 <_vfiprintf_r+0x19a>
 80012a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80012aa:	07d9      	lsls	r1, r3, #31
 80012ac:	d405      	bmi.n	80012ba <_vfiprintf_r+0x1fe>
 80012ae:	89ab      	ldrh	r3, [r5, #12]
 80012b0:	059a      	lsls	r2, r3, #22
 80012b2:	d402      	bmi.n	80012ba <_vfiprintf_r+0x1fe>
 80012b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80012b6:	f7ff fddd 	bl	8000e74 <__retarget_lock_release_recursive>
 80012ba:	89ab      	ldrh	r3, [r5, #12]
 80012bc:	065b      	lsls	r3, r3, #25
 80012be:	f53f af1f 	bmi.w	8001100 <_vfiprintf_r+0x44>
 80012c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80012c4:	e71e      	b.n	8001104 <_vfiprintf_r+0x48>
 80012c6:	ab03      	add	r3, sp, #12
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	462a      	mov	r2, r5
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <_vfiprintf_r+0x228>)
 80012ce:	a904      	add	r1, sp, #16
 80012d0:	4630      	mov	r0, r6
 80012d2:	f000 f879 	bl	80013c8 <_printf_i>
 80012d6:	e7e4      	b.n	80012a2 <_vfiprintf_r+0x1e6>
 80012d8:	080019e5 	.word	0x080019e5
 80012dc:	080019ef 	.word	0x080019ef
 80012e0:	00000000 	.word	0x00000000
 80012e4:	08001097 	.word	0x08001097
 80012e8:	080019eb 	.word	0x080019eb

080012ec <_printf_common>:
 80012ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012f0:	4616      	mov	r6, r2
 80012f2:	4698      	mov	r8, r3
 80012f4:	688a      	ldr	r2, [r1, #8]
 80012f6:	690b      	ldr	r3, [r1, #16]
 80012f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80012fc:	4293      	cmp	r3, r2
 80012fe:	bfb8      	it	lt
 8001300:	4613      	movlt	r3, r2
 8001302:	6033      	str	r3, [r6, #0]
 8001304:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001308:	4607      	mov	r7, r0
 800130a:	460c      	mov	r4, r1
 800130c:	b10a      	cbz	r2, 8001312 <_printf_common+0x26>
 800130e:	3301      	adds	r3, #1
 8001310:	6033      	str	r3, [r6, #0]
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	0699      	lsls	r1, r3, #26
 8001316:	bf42      	ittt	mi
 8001318:	6833      	ldrmi	r3, [r6, #0]
 800131a:	3302      	addmi	r3, #2
 800131c:	6033      	strmi	r3, [r6, #0]
 800131e:	6825      	ldr	r5, [r4, #0]
 8001320:	f015 0506 	ands.w	r5, r5, #6
 8001324:	d106      	bne.n	8001334 <_printf_common+0x48>
 8001326:	f104 0a19 	add.w	sl, r4, #25
 800132a:	68e3      	ldr	r3, [r4, #12]
 800132c:	6832      	ldr	r2, [r6, #0]
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	42ab      	cmp	r3, r5
 8001332:	dc26      	bgt.n	8001382 <_printf_common+0x96>
 8001334:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001338:	6822      	ldr	r2, [r4, #0]
 800133a:	3b00      	subs	r3, #0
 800133c:	bf18      	it	ne
 800133e:	2301      	movne	r3, #1
 8001340:	0692      	lsls	r2, r2, #26
 8001342:	d42b      	bmi.n	800139c <_printf_common+0xb0>
 8001344:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001348:	4641      	mov	r1, r8
 800134a:	4638      	mov	r0, r7
 800134c:	47c8      	blx	r9
 800134e:	3001      	adds	r0, #1
 8001350:	d01e      	beq.n	8001390 <_printf_common+0xa4>
 8001352:	6823      	ldr	r3, [r4, #0]
 8001354:	6922      	ldr	r2, [r4, #16]
 8001356:	f003 0306 	and.w	r3, r3, #6
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf02      	ittt	eq
 800135e:	68e5      	ldreq	r5, [r4, #12]
 8001360:	6833      	ldreq	r3, [r6, #0]
 8001362:	1aed      	subeq	r5, r5, r3
 8001364:	68a3      	ldr	r3, [r4, #8]
 8001366:	bf0c      	ite	eq
 8001368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800136c:	2500      	movne	r5, #0
 800136e:	4293      	cmp	r3, r2
 8001370:	bfc4      	itt	gt
 8001372:	1a9b      	subgt	r3, r3, r2
 8001374:	18ed      	addgt	r5, r5, r3
 8001376:	2600      	movs	r6, #0
 8001378:	341a      	adds	r4, #26
 800137a:	42b5      	cmp	r5, r6
 800137c:	d11a      	bne.n	80013b4 <_printf_common+0xc8>
 800137e:	2000      	movs	r0, #0
 8001380:	e008      	b.n	8001394 <_printf_common+0xa8>
 8001382:	2301      	movs	r3, #1
 8001384:	4652      	mov	r2, sl
 8001386:	4641      	mov	r1, r8
 8001388:	4638      	mov	r0, r7
 800138a:	47c8      	blx	r9
 800138c:	3001      	adds	r0, #1
 800138e:	d103      	bne.n	8001398 <_printf_common+0xac>
 8001390:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001398:	3501      	adds	r5, #1
 800139a:	e7c6      	b.n	800132a <_printf_common+0x3e>
 800139c:	18e1      	adds	r1, r4, r3
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	2030      	movs	r0, #48	@ 0x30
 80013a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80013a6:	4422      	add	r2, r4
 80013a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80013ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80013b0:	3302      	adds	r3, #2
 80013b2:	e7c7      	b.n	8001344 <_printf_common+0x58>
 80013b4:	2301      	movs	r3, #1
 80013b6:	4622      	mov	r2, r4
 80013b8:	4641      	mov	r1, r8
 80013ba:	4638      	mov	r0, r7
 80013bc:	47c8      	blx	r9
 80013be:	3001      	adds	r0, #1
 80013c0:	d0e6      	beq.n	8001390 <_printf_common+0xa4>
 80013c2:	3601      	adds	r6, #1
 80013c4:	e7d9      	b.n	800137a <_printf_common+0x8e>
	...

080013c8 <_printf_i>:
 80013c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013cc:	7e0f      	ldrb	r7, [r1, #24]
 80013ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80013d0:	2f78      	cmp	r7, #120	@ 0x78
 80013d2:	4691      	mov	r9, r2
 80013d4:	4680      	mov	r8, r0
 80013d6:	460c      	mov	r4, r1
 80013d8:	469a      	mov	sl, r3
 80013da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80013de:	d807      	bhi.n	80013f0 <_printf_i+0x28>
 80013e0:	2f62      	cmp	r7, #98	@ 0x62
 80013e2:	d80a      	bhi.n	80013fa <_printf_i+0x32>
 80013e4:	2f00      	cmp	r7, #0
 80013e6:	f000 80d2 	beq.w	800158e <_printf_i+0x1c6>
 80013ea:	2f58      	cmp	r7, #88	@ 0x58
 80013ec:	f000 80b9 	beq.w	8001562 <_printf_i+0x19a>
 80013f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80013f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80013f8:	e03a      	b.n	8001470 <_printf_i+0xa8>
 80013fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80013fe:	2b15      	cmp	r3, #21
 8001400:	d8f6      	bhi.n	80013f0 <_printf_i+0x28>
 8001402:	a101      	add	r1, pc, #4	@ (adr r1, 8001408 <_printf_i+0x40>)
 8001404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001408:	08001461 	.word	0x08001461
 800140c:	08001475 	.word	0x08001475
 8001410:	080013f1 	.word	0x080013f1
 8001414:	080013f1 	.word	0x080013f1
 8001418:	080013f1 	.word	0x080013f1
 800141c:	080013f1 	.word	0x080013f1
 8001420:	08001475 	.word	0x08001475
 8001424:	080013f1 	.word	0x080013f1
 8001428:	080013f1 	.word	0x080013f1
 800142c:	080013f1 	.word	0x080013f1
 8001430:	080013f1 	.word	0x080013f1
 8001434:	08001575 	.word	0x08001575
 8001438:	0800149f 	.word	0x0800149f
 800143c:	0800152f 	.word	0x0800152f
 8001440:	080013f1 	.word	0x080013f1
 8001444:	080013f1 	.word	0x080013f1
 8001448:	08001597 	.word	0x08001597
 800144c:	080013f1 	.word	0x080013f1
 8001450:	0800149f 	.word	0x0800149f
 8001454:	080013f1 	.word	0x080013f1
 8001458:	080013f1 	.word	0x080013f1
 800145c:	08001537 	.word	0x08001537
 8001460:	6833      	ldr	r3, [r6, #0]
 8001462:	1d1a      	adds	r2, r3, #4
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6032      	str	r2, [r6, #0]
 8001468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800146c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001470:	2301      	movs	r3, #1
 8001472:	e09d      	b.n	80015b0 <_printf_i+0x1e8>
 8001474:	6833      	ldr	r3, [r6, #0]
 8001476:	6820      	ldr	r0, [r4, #0]
 8001478:	1d19      	adds	r1, r3, #4
 800147a:	6031      	str	r1, [r6, #0]
 800147c:	0606      	lsls	r6, r0, #24
 800147e:	d501      	bpl.n	8001484 <_printf_i+0xbc>
 8001480:	681d      	ldr	r5, [r3, #0]
 8001482:	e003      	b.n	800148c <_printf_i+0xc4>
 8001484:	0645      	lsls	r5, r0, #25
 8001486:	d5fb      	bpl.n	8001480 <_printf_i+0xb8>
 8001488:	f9b3 5000 	ldrsh.w	r5, [r3]
 800148c:	2d00      	cmp	r5, #0
 800148e:	da03      	bge.n	8001498 <_printf_i+0xd0>
 8001490:	232d      	movs	r3, #45	@ 0x2d
 8001492:	426d      	negs	r5, r5
 8001494:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001498:	4859      	ldr	r0, [pc, #356]	@ (8001600 <_printf_i+0x238>)
 800149a:	230a      	movs	r3, #10
 800149c:	e011      	b.n	80014c2 <_printf_i+0xfa>
 800149e:	6821      	ldr	r1, [r4, #0]
 80014a0:	6833      	ldr	r3, [r6, #0]
 80014a2:	0608      	lsls	r0, r1, #24
 80014a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80014a8:	d402      	bmi.n	80014b0 <_printf_i+0xe8>
 80014aa:	0649      	lsls	r1, r1, #25
 80014ac:	bf48      	it	mi
 80014ae:	b2ad      	uxthmi	r5, r5
 80014b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80014b2:	4853      	ldr	r0, [pc, #332]	@ (8001600 <_printf_i+0x238>)
 80014b4:	6033      	str	r3, [r6, #0]
 80014b6:	bf14      	ite	ne
 80014b8:	230a      	movne	r3, #10
 80014ba:	2308      	moveq	r3, #8
 80014bc:	2100      	movs	r1, #0
 80014be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80014c2:	6866      	ldr	r6, [r4, #4]
 80014c4:	60a6      	str	r6, [r4, #8]
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	bfa2      	ittt	ge
 80014ca:	6821      	ldrge	r1, [r4, #0]
 80014cc:	f021 0104 	bicge.w	r1, r1, #4
 80014d0:	6021      	strge	r1, [r4, #0]
 80014d2:	b90d      	cbnz	r5, 80014d8 <_printf_i+0x110>
 80014d4:	2e00      	cmp	r6, #0
 80014d6:	d04b      	beq.n	8001570 <_printf_i+0x1a8>
 80014d8:	4616      	mov	r6, r2
 80014da:	fbb5 f1f3 	udiv	r1, r5, r3
 80014de:	fb03 5711 	mls	r7, r3, r1, r5
 80014e2:	5dc7      	ldrb	r7, [r0, r7]
 80014e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80014e8:	462f      	mov	r7, r5
 80014ea:	42bb      	cmp	r3, r7
 80014ec:	460d      	mov	r5, r1
 80014ee:	d9f4      	bls.n	80014da <_printf_i+0x112>
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d10b      	bne.n	800150c <_printf_i+0x144>
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	07df      	lsls	r7, r3, #31
 80014f8:	d508      	bpl.n	800150c <_printf_i+0x144>
 80014fa:	6923      	ldr	r3, [r4, #16]
 80014fc:	6861      	ldr	r1, [r4, #4]
 80014fe:	4299      	cmp	r1, r3
 8001500:	bfde      	ittt	le
 8001502:	2330      	movle	r3, #48	@ 0x30
 8001504:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001508:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800150c:	1b92      	subs	r2, r2, r6
 800150e:	6122      	str	r2, [r4, #16]
 8001510:	f8cd a000 	str.w	sl, [sp]
 8001514:	464b      	mov	r3, r9
 8001516:	aa03      	add	r2, sp, #12
 8001518:	4621      	mov	r1, r4
 800151a:	4640      	mov	r0, r8
 800151c:	f7ff fee6 	bl	80012ec <_printf_common>
 8001520:	3001      	adds	r0, #1
 8001522:	d14a      	bne.n	80015ba <_printf_i+0x1f2>
 8001524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001528:	b004      	add	sp, #16
 800152a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	f043 0320 	orr.w	r3, r3, #32
 8001534:	6023      	str	r3, [r4, #0]
 8001536:	4833      	ldr	r0, [pc, #204]	@ (8001604 <_printf_i+0x23c>)
 8001538:	2778      	movs	r7, #120	@ 0x78
 800153a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	6831      	ldr	r1, [r6, #0]
 8001542:	061f      	lsls	r7, r3, #24
 8001544:	f851 5b04 	ldr.w	r5, [r1], #4
 8001548:	d402      	bmi.n	8001550 <_printf_i+0x188>
 800154a:	065f      	lsls	r7, r3, #25
 800154c:	bf48      	it	mi
 800154e:	b2ad      	uxthmi	r5, r5
 8001550:	6031      	str	r1, [r6, #0]
 8001552:	07d9      	lsls	r1, r3, #31
 8001554:	bf44      	itt	mi
 8001556:	f043 0320 	orrmi.w	r3, r3, #32
 800155a:	6023      	strmi	r3, [r4, #0]
 800155c:	b11d      	cbz	r5, 8001566 <_printf_i+0x19e>
 800155e:	2310      	movs	r3, #16
 8001560:	e7ac      	b.n	80014bc <_printf_i+0xf4>
 8001562:	4827      	ldr	r0, [pc, #156]	@ (8001600 <_printf_i+0x238>)
 8001564:	e7e9      	b.n	800153a <_printf_i+0x172>
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	f023 0320 	bic.w	r3, r3, #32
 800156c:	6023      	str	r3, [r4, #0]
 800156e:	e7f6      	b.n	800155e <_printf_i+0x196>
 8001570:	4616      	mov	r6, r2
 8001572:	e7bd      	b.n	80014f0 <_printf_i+0x128>
 8001574:	6833      	ldr	r3, [r6, #0]
 8001576:	6825      	ldr	r5, [r4, #0]
 8001578:	6961      	ldr	r1, [r4, #20]
 800157a:	1d18      	adds	r0, r3, #4
 800157c:	6030      	str	r0, [r6, #0]
 800157e:	062e      	lsls	r6, r5, #24
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	d501      	bpl.n	8001588 <_printf_i+0x1c0>
 8001584:	6019      	str	r1, [r3, #0]
 8001586:	e002      	b.n	800158e <_printf_i+0x1c6>
 8001588:	0668      	lsls	r0, r5, #25
 800158a:	d5fb      	bpl.n	8001584 <_printf_i+0x1bc>
 800158c:	8019      	strh	r1, [r3, #0]
 800158e:	2300      	movs	r3, #0
 8001590:	6123      	str	r3, [r4, #16]
 8001592:	4616      	mov	r6, r2
 8001594:	e7bc      	b.n	8001510 <_printf_i+0x148>
 8001596:	6833      	ldr	r3, [r6, #0]
 8001598:	1d1a      	adds	r2, r3, #4
 800159a:	6032      	str	r2, [r6, #0]
 800159c:	681e      	ldr	r6, [r3, #0]
 800159e:	6862      	ldr	r2, [r4, #4]
 80015a0:	2100      	movs	r1, #0
 80015a2:	4630      	mov	r0, r6
 80015a4:	f7fe fe34 	bl	8000210 <memchr>
 80015a8:	b108      	cbz	r0, 80015ae <_printf_i+0x1e6>
 80015aa:	1b80      	subs	r0, r0, r6
 80015ac:	6060      	str	r0, [r4, #4]
 80015ae:	6863      	ldr	r3, [r4, #4]
 80015b0:	6123      	str	r3, [r4, #16]
 80015b2:	2300      	movs	r3, #0
 80015b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80015b8:	e7aa      	b.n	8001510 <_printf_i+0x148>
 80015ba:	6923      	ldr	r3, [r4, #16]
 80015bc:	4632      	mov	r2, r6
 80015be:	4649      	mov	r1, r9
 80015c0:	4640      	mov	r0, r8
 80015c2:	47d0      	blx	sl
 80015c4:	3001      	adds	r0, #1
 80015c6:	d0ad      	beq.n	8001524 <_printf_i+0x15c>
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	079b      	lsls	r3, r3, #30
 80015cc:	d413      	bmi.n	80015f6 <_printf_i+0x22e>
 80015ce:	68e0      	ldr	r0, [r4, #12]
 80015d0:	9b03      	ldr	r3, [sp, #12]
 80015d2:	4298      	cmp	r0, r3
 80015d4:	bfb8      	it	lt
 80015d6:	4618      	movlt	r0, r3
 80015d8:	e7a6      	b.n	8001528 <_printf_i+0x160>
 80015da:	2301      	movs	r3, #1
 80015dc:	4632      	mov	r2, r6
 80015de:	4649      	mov	r1, r9
 80015e0:	4640      	mov	r0, r8
 80015e2:	47d0      	blx	sl
 80015e4:	3001      	adds	r0, #1
 80015e6:	d09d      	beq.n	8001524 <_printf_i+0x15c>
 80015e8:	3501      	adds	r5, #1
 80015ea:	68e3      	ldr	r3, [r4, #12]
 80015ec:	9903      	ldr	r1, [sp, #12]
 80015ee:	1a5b      	subs	r3, r3, r1
 80015f0:	42ab      	cmp	r3, r5
 80015f2:	dcf2      	bgt.n	80015da <_printf_i+0x212>
 80015f4:	e7eb      	b.n	80015ce <_printf_i+0x206>
 80015f6:	2500      	movs	r5, #0
 80015f8:	f104 0619 	add.w	r6, r4, #25
 80015fc:	e7f5      	b.n	80015ea <_printf_i+0x222>
 80015fe:	bf00      	nop
 8001600:	080019f6 	.word	0x080019f6
 8001604:	08001a07 	.word	0x08001a07

08001608 <__sflush_r>:
 8001608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800160c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001610:	0716      	lsls	r6, r2, #28
 8001612:	4605      	mov	r5, r0
 8001614:	460c      	mov	r4, r1
 8001616:	d454      	bmi.n	80016c2 <__sflush_r+0xba>
 8001618:	684b      	ldr	r3, [r1, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	dc02      	bgt.n	8001624 <__sflush_r+0x1c>
 800161e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001620:	2b00      	cmp	r3, #0
 8001622:	dd48      	ble.n	80016b6 <__sflush_r+0xae>
 8001624:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001626:	2e00      	cmp	r6, #0
 8001628:	d045      	beq.n	80016b6 <__sflush_r+0xae>
 800162a:	2300      	movs	r3, #0
 800162c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001630:	682f      	ldr	r7, [r5, #0]
 8001632:	6a21      	ldr	r1, [r4, #32]
 8001634:	602b      	str	r3, [r5, #0]
 8001636:	d030      	beq.n	800169a <__sflush_r+0x92>
 8001638:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800163a:	89a3      	ldrh	r3, [r4, #12]
 800163c:	0759      	lsls	r1, r3, #29
 800163e:	d505      	bpl.n	800164c <__sflush_r+0x44>
 8001640:	6863      	ldr	r3, [r4, #4]
 8001642:	1ad2      	subs	r2, r2, r3
 8001644:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001646:	b10b      	cbz	r3, 800164c <__sflush_r+0x44>
 8001648:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800164a:	1ad2      	subs	r2, r2, r3
 800164c:	2300      	movs	r3, #0
 800164e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001650:	6a21      	ldr	r1, [r4, #32]
 8001652:	4628      	mov	r0, r5
 8001654:	47b0      	blx	r6
 8001656:	1c43      	adds	r3, r0, #1
 8001658:	89a3      	ldrh	r3, [r4, #12]
 800165a:	d106      	bne.n	800166a <__sflush_r+0x62>
 800165c:	6829      	ldr	r1, [r5, #0]
 800165e:	291d      	cmp	r1, #29
 8001660:	d82b      	bhi.n	80016ba <__sflush_r+0xb2>
 8001662:	4a2a      	ldr	r2, [pc, #168]	@ (800170c <__sflush_r+0x104>)
 8001664:	410a      	asrs	r2, r1
 8001666:	07d6      	lsls	r6, r2, #31
 8001668:	d427      	bmi.n	80016ba <__sflush_r+0xb2>
 800166a:	2200      	movs	r2, #0
 800166c:	6062      	str	r2, [r4, #4]
 800166e:	04d9      	lsls	r1, r3, #19
 8001670:	6922      	ldr	r2, [r4, #16]
 8001672:	6022      	str	r2, [r4, #0]
 8001674:	d504      	bpl.n	8001680 <__sflush_r+0x78>
 8001676:	1c42      	adds	r2, r0, #1
 8001678:	d101      	bne.n	800167e <__sflush_r+0x76>
 800167a:	682b      	ldr	r3, [r5, #0]
 800167c:	b903      	cbnz	r3, 8001680 <__sflush_r+0x78>
 800167e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001680:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001682:	602f      	str	r7, [r5, #0]
 8001684:	b1b9      	cbz	r1, 80016b6 <__sflush_r+0xae>
 8001686:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800168a:	4299      	cmp	r1, r3
 800168c:	d002      	beq.n	8001694 <__sflush_r+0x8c>
 800168e:	4628      	mov	r0, r5
 8001690:	f7ff fbf2 	bl	8000e78 <_free_r>
 8001694:	2300      	movs	r3, #0
 8001696:	6363      	str	r3, [r4, #52]	@ 0x34
 8001698:	e00d      	b.n	80016b6 <__sflush_r+0xae>
 800169a:	2301      	movs	r3, #1
 800169c:	4628      	mov	r0, r5
 800169e:	47b0      	blx	r6
 80016a0:	4602      	mov	r2, r0
 80016a2:	1c50      	adds	r0, r2, #1
 80016a4:	d1c9      	bne.n	800163a <__sflush_r+0x32>
 80016a6:	682b      	ldr	r3, [r5, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0c6      	beq.n	800163a <__sflush_r+0x32>
 80016ac:	2b1d      	cmp	r3, #29
 80016ae:	d001      	beq.n	80016b4 <__sflush_r+0xac>
 80016b0:	2b16      	cmp	r3, #22
 80016b2:	d11e      	bne.n	80016f2 <__sflush_r+0xea>
 80016b4:	602f      	str	r7, [r5, #0]
 80016b6:	2000      	movs	r0, #0
 80016b8:	e022      	b.n	8001700 <__sflush_r+0xf8>
 80016ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016be:	b21b      	sxth	r3, r3
 80016c0:	e01b      	b.n	80016fa <__sflush_r+0xf2>
 80016c2:	690f      	ldr	r7, [r1, #16]
 80016c4:	2f00      	cmp	r7, #0
 80016c6:	d0f6      	beq.n	80016b6 <__sflush_r+0xae>
 80016c8:	0793      	lsls	r3, r2, #30
 80016ca:	680e      	ldr	r6, [r1, #0]
 80016cc:	bf08      	it	eq
 80016ce:	694b      	ldreq	r3, [r1, #20]
 80016d0:	600f      	str	r7, [r1, #0]
 80016d2:	bf18      	it	ne
 80016d4:	2300      	movne	r3, #0
 80016d6:	eba6 0807 	sub.w	r8, r6, r7
 80016da:	608b      	str	r3, [r1, #8]
 80016dc:	f1b8 0f00 	cmp.w	r8, #0
 80016e0:	dde9      	ble.n	80016b6 <__sflush_r+0xae>
 80016e2:	6a21      	ldr	r1, [r4, #32]
 80016e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80016e6:	4643      	mov	r3, r8
 80016e8:	463a      	mov	r2, r7
 80016ea:	4628      	mov	r0, r5
 80016ec:	47b0      	blx	r6
 80016ee:	2800      	cmp	r0, #0
 80016f0:	dc08      	bgt.n	8001704 <__sflush_r+0xfc>
 80016f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016fa:	81a3      	strh	r3, [r4, #12]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001704:	4407      	add	r7, r0
 8001706:	eba8 0800 	sub.w	r8, r8, r0
 800170a:	e7e7      	b.n	80016dc <__sflush_r+0xd4>
 800170c:	dfbffffe 	.word	0xdfbffffe

08001710 <_fflush_r>:
 8001710:	b538      	push	{r3, r4, r5, lr}
 8001712:	690b      	ldr	r3, [r1, #16]
 8001714:	4605      	mov	r5, r0
 8001716:	460c      	mov	r4, r1
 8001718:	b913      	cbnz	r3, 8001720 <_fflush_r+0x10>
 800171a:	2500      	movs	r5, #0
 800171c:	4628      	mov	r0, r5
 800171e:	bd38      	pop	{r3, r4, r5, pc}
 8001720:	b118      	cbz	r0, 800172a <_fflush_r+0x1a>
 8001722:	6a03      	ldr	r3, [r0, #32]
 8001724:	b90b      	cbnz	r3, 800172a <_fflush_r+0x1a>
 8001726:	f7ff fa9f 	bl	8000c68 <__sinit>
 800172a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f3      	beq.n	800171a <_fflush_r+0xa>
 8001732:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001734:	07d0      	lsls	r0, r2, #31
 8001736:	d404      	bmi.n	8001742 <_fflush_r+0x32>
 8001738:	0599      	lsls	r1, r3, #22
 800173a:	d402      	bmi.n	8001742 <_fflush_r+0x32>
 800173c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800173e:	f7ff fb98 	bl	8000e72 <__retarget_lock_acquire_recursive>
 8001742:	4628      	mov	r0, r5
 8001744:	4621      	mov	r1, r4
 8001746:	f7ff ff5f 	bl	8001608 <__sflush_r>
 800174a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800174c:	07da      	lsls	r2, r3, #31
 800174e:	4605      	mov	r5, r0
 8001750:	d4e4      	bmi.n	800171c <_fflush_r+0xc>
 8001752:	89a3      	ldrh	r3, [r4, #12]
 8001754:	059b      	lsls	r3, r3, #22
 8001756:	d4e1      	bmi.n	800171c <_fflush_r+0xc>
 8001758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800175a:	f7ff fb8b 	bl	8000e74 <__retarget_lock_release_recursive>
 800175e:	e7dd      	b.n	800171c <_fflush_r+0xc>

08001760 <__swbuf_r>:
 8001760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001762:	460e      	mov	r6, r1
 8001764:	4614      	mov	r4, r2
 8001766:	4605      	mov	r5, r0
 8001768:	b118      	cbz	r0, 8001772 <__swbuf_r+0x12>
 800176a:	6a03      	ldr	r3, [r0, #32]
 800176c:	b90b      	cbnz	r3, 8001772 <__swbuf_r+0x12>
 800176e:	f7ff fa7b 	bl	8000c68 <__sinit>
 8001772:	69a3      	ldr	r3, [r4, #24]
 8001774:	60a3      	str	r3, [r4, #8]
 8001776:	89a3      	ldrh	r3, [r4, #12]
 8001778:	071a      	lsls	r2, r3, #28
 800177a:	d501      	bpl.n	8001780 <__swbuf_r+0x20>
 800177c:	6923      	ldr	r3, [r4, #16]
 800177e:	b943      	cbnz	r3, 8001792 <__swbuf_r+0x32>
 8001780:	4621      	mov	r1, r4
 8001782:	4628      	mov	r0, r5
 8001784:	f000 f82a 	bl	80017dc <__swsetup_r>
 8001788:	b118      	cbz	r0, 8001792 <__swbuf_r+0x32>
 800178a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800178e:	4638      	mov	r0, r7
 8001790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	6922      	ldr	r2, [r4, #16]
 8001796:	1a98      	subs	r0, r3, r2
 8001798:	6963      	ldr	r3, [r4, #20]
 800179a:	b2f6      	uxtb	r6, r6
 800179c:	4283      	cmp	r3, r0
 800179e:	4637      	mov	r7, r6
 80017a0:	dc05      	bgt.n	80017ae <__swbuf_r+0x4e>
 80017a2:	4621      	mov	r1, r4
 80017a4:	4628      	mov	r0, r5
 80017a6:	f7ff ffb3 	bl	8001710 <_fflush_r>
 80017aa:	2800      	cmp	r0, #0
 80017ac:	d1ed      	bne.n	800178a <__swbuf_r+0x2a>
 80017ae:	68a3      	ldr	r3, [r4, #8]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	60a3      	str	r3, [r4, #8]
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	6022      	str	r2, [r4, #0]
 80017ba:	701e      	strb	r6, [r3, #0]
 80017bc:	6962      	ldr	r2, [r4, #20]
 80017be:	1c43      	adds	r3, r0, #1
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d004      	beq.n	80017ce <__swbuf_r+0x6e>
 80017c4:	89a3      	ldrh	r3, [r4, #12]
 80017c6:	07db      	lsls	r3, r3, #31
 80017c8:	d5e1      	bpl.n	800178e <__swbuf_r+0x2e>
 80017ca:	2e0a      	cmp	r6, #10
 80017cc:	d1df      	bne.n	800178e <__swbuf_r+0x2e>
 80017ce:	4621      	mov	r1, r4
 80017d0:	4628      	mov	r0, r5
 80017d2:	f7ff ff9d 	bl	8001710 <_fflush_r>
 80017d6:	2800      	cmp	r0, #0
 80017d8:	d0d9      	beq.n	800178e <__swbuf_r+0x2e>
 80017da:	e7d6      	b.n	800178a <__swbuf_r+0x2a>

080017dc <__swsetup_r>:
 80017dc:	b538      	push	{r3, r4, r5, lr}
 80017de:	4b29      	ldr	r3, [pc, #164]	@ (8001884 <__swsetup_r+0xa8>)
 80017e0:	4605      	mov	r5, r0
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	460c      	mov	r4, r1
 80017e6:	b118      	cbz	r0, 80017f0 <__swsetup_r+0x14>
 80017e8:	6a03      	ldr	r3, [r0, #32]
 80017ea:	b90b      	cbnz	r3, 80017f0 <__swsetup_r+0x14>
 80017ec:	f7ff fa3c 	bl	8000c68 <__sinit>
 80017f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017f4:	0719      	lsls	r1, r3, #28
 80017f6:	d422      	bmi.n	800183e <__swsetup_r+0x62>
 80017f8:	06da      	lsls	r2, r3, #27
 80017fa:	d407      	bmi.n	800180c <__swsetup_r+0x30>
 80017fc:	2209      	movs	r2, #9
 80017fe:	602a      	str	r2, [r5, #0]
 8001800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001804:	81a3      	strh	r3, [r4, #12]
 8001806:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800180a:	e033      	b.n	8001874 <__swsetup_r+0x98>
 800180c:	0758      	lsls	r0, r3, #29
 800180e:	d512      	bpl.n	8001836 <__swsetup_r+0x5a>
 8001810:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001812:	b141      	cbz	r1, 8001826 <__swsetup_r+0x4a>
 8001814:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001818:	4299      	cmp	r1, r3
 800181a:	d002      	beq.n	8001822 <__swsetup_r+0x46>
 800181c:	4628      	mov	r0, r5
 800181e:	f7ff fb2b 	bl	8000e78 <_free_r>
 8001822:	2300      	movs	r3, #0
 8001824:	6363      	str	r3, [r4, #52]	@ 0x34
 8001826:	89a3      	ldrh	r3, [r4, #12]
 8001828:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800182c:	81a3      	strh	r3, [r4, #12]
 800182e:	2300      	movs	r3, #0
 8001830:	6063      	str	r3, [r4, #4]
 8001832:	6923      	ldr	r3, [r4, #16]
 8001834:	6023      	str	r3, [r4, #0]
 8001836:	89a3      	ldrh	r3, [r4, #12]
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	81a3      	strh	r3, [r4, #12]
 800183e:	6923      	ldr	r3, [r4, #16]
 8001840:	b94b      	cbnz	r3, 8001856 <__swsetup_r+0x7a>
 8001842:	89a3      	ldrh	r3, [r4, #12]
 8001844:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800184c:	d003      	beq.n	8001856 <__swsetup_r+0x7a>
 800184e:	4621      	mov	r1, r4
 8001850:	4628      	mov	r0, r5
 8001852:	f000 f84f 	bl	80018f4 <__smakebuf_r>
 8001856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800185a:	f013 0201 	ands.w	r2, r3, #1
 800185e:	d00a      	beq.n	8001876 <__swsetup_r+0x9a>
 8001860:	2200      	movs	r2, #0
 8001862:	60a2      	str	r2, [r4, #8]
 8001864:	6962      	ldr	r2, [r4, #20]
 8001866:	4252      	negs	r2, r2
 8001868:	61a2      	str	r2, [r4, #24]
 800186a:	6922      	ldr	r2, [r4, #16]
 800186c:	b942      	cbnz	r2, 8001880 <__swsetup_r+0xa4>
 800186e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001872:	d1c5      	bne.n	8001800 <__swsetup_r+0x24>
 8001874:	bd38      	pop	{r3, r4, r5, pc}
 8001876:	0799      	lsls	r1, r3, #30
 8001878:	bf58      	it	pl
 800187a:	6962      	ldrpl	r2, [r4, #20]
 800187c:	60a2      	str	r2, [r4, #8]
 800187e:	e7f4      	b.n	800186a <__swsetup_r+0x8e>
 8001880:	2000      	movs	r0, #0
 8001882:	e7f7      	b.n	8001874 <__swsetup_r+0x98>
 8001884:	2000000c 	.word	0x2000000c

08001888 <_sbrk_r>:
 8001888:	b538      	push	{r3, r4, r5, lr}
 800188a:	4d06      	ldr	r5, [pc, #24]	@ (80018a4 <_sbrk_r+0x1c>)
 800188c:	2300      	movs	r3, #0
 800188e:	4604      	mov	r4, r0
 8001890:	4608      	mov	r0, r1
 8001892:	602b      	str	r3, [r5, #0]
 8001894:	f7ff f840 	bl	8000918 <_sbrk>
 8001898:	1c43      	adds	r3, r0, #1
 800189a:	d102      	bne.n	80018a2 <_sbrk_r+0x1a>
 800189c:	682b      	ldr	r3, [r5, #0]
 800189e:	b103      	cbz	r3, 80018a2 <_sbrk_r+0x1a>
 80018a0:	6023      	str	r3, [r4, #0]
 80018a2:	bd38      	pop	{r3, r4, r5, pc}
 80018a4:	200040b8 	.word	0x200040b8

080018a8 <__swhatbuf_r>:
 80018a8:	b570      	push	{r4, r5, r6, lr}
 80018aa:	460c      	mov	r4, r1
 80018ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018b0:	2900      	cmp	r1, #0
 80018b2:	b096      	sub	sp, #88	@ 0x58
 80018b4:	4615      	mov	r5, r2
 80018b6:	461e      	mov	r6, r3
 80018b8:	da0d      	bge.n	80018d6 <__swhatbuf_r+0x2e>
 80018ba:	89a3      	ldrh	r3, [r4, #12]
 80018bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80018c0:	f04f 0100 	mov.w	r1, #0
 80018c4:	bf14      	ite	ne
 80018c6:	2340      	movne	r3, #64	@ 0x40
 80018c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80018cc:	2000      	movs	r0, #0
 80018ce:	6031      	str	r1, [r6, #0]
 80018d0:	602b      	str	r3, [r5, #0]
 80018d2:	b016      	add	sp, #88	@ 0x58
 80018d4:	bd70      	pop	{r4, r5, r6, pc}
 80018d6:	466a      	mov	r2, sp
 80018d8:	f000 f848 	bl	800196c <_fstat_r>
 80018dc:	2800      	cmp	r0, #0
 80018de:	dbec      	blt.n	80018ba <__swhatbuf_r+0x12>
 80018e0:	9901      	ldr	r1, [sp, #4]
 80018e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80018e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80018ea:	4259      	negs	r1, r3
 80018ec:	4159      	adcs	r1, r3
 80018ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018f2:	e7eb      	b.n	80018cc <__swhatbuf_r+0x24>

080018f4 <__smakebuf_r>:
 80018f4:	898b      	ldrh	r3, [r1, #12]
 80018f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018f8:	079d      	lsls	r5, r3, #30
 80018fa:	4606      	mov	r6, r0
 80018fc:	460c      	mov	r4, r1
 80018fe:	d507      	bpl.n	8001910 <__smakebuf_r+0x1c>
 8001900:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001904:	6023      	str	r3, [r4, #0]
 8001906:	6123      	str	r3, [r4, #16]
 8001908:	2301      	movs	r3, #1
 800190a:	6163      	str	r3, [r4, #20]
 800190c:	b003      	add	sp, #12
 800190e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001910:	ab01      	add	r3, sp, #4
 8001912:	466a      	mov	r2, sp
 8001914:	f7ff ffc8 	bl	80018a8 <__swhatbuf_r>
 8001918:	9f00      	ldr	r7, [sp, #0]
 800191a:	4605      	mov	r5, r0
 800191c:	4639      	mov	r1, r7
 800191e:	4630      	mov	r0, r6
 8001920:	f7ff fb16 	bl	8000f50 <_malloc_r>
 8001924:	b948      	cbnz	r0, 800193a <__smakebuf_r+0x46>
 8001926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800192a:	059a      	lsls	r2, r3, #22
 800192c:	d4ee      	bmi.n	800190c <__smakebuf_r+0x18>
 800192e:	f023 0303 	bic.w	r3, r3, #3
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	81a3      	strh	r3, [r4, #12]
 8001938:	e7e2      	b.n	8001900 <__smakebuf_r+0xc>
 800193a:	89a3      	ldrh	r3, [r4, #12]
 800193c:	6020      	str	r0, [r4, #0]
 800193e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001942:	81a3      	strh	r3, [r4, #12]
 8001944:	9b01      	ldr	r3, [sp, #4]
 8001946:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800194a:	b15b      	cbz	r3, 8001964 <__smakebuf_r+0x70>
 800194c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001950:	4630      	mov	r0, r6
 8001952:	f000 f81d 	bl	8001990 <_isatty_r>
 8001956:	b128      	cbz	r0, 8001964 <__smakebuf_r+0x70>
 8001958:	89a3      	ldrh	r3, [r4, #12]
 800195a:	f023 0303 	bic.w	r3, r3, #3
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	81a3      	strh	r3, [r4, #12]
 8001964:	89a3      	ldrh	r3, [r4, #12]
 8001966:	431d      	orrs	r5, r3
 8001968:	81a5      	strh	r5, [r4, #12]
 800196a:	e7cf      	b.n	800190c <__smakebuf_r+0x18>

0800196c <_fstat_r>:
 800196c:	b538      	push	{r3, r4, r5, lr}
 800196e:	4d07      	ldr	r5, [pc, #28]	@ (800198c <_fstat_r+0x20>)
 8001970:	2300      	movs	r3, #0
 8001972:	4604      	mov	r4, r0
 8001974:	4608      	mov	r0, r1
 8001976:	4611      	mov	r1, r2
 8001978:	602b      	str	r3, [r5, #0]
 800197a:	f7fe ffa4 	bl	80008c6 <_fstat>
 800197e:	1c43      	adds	r3, r0, #1
 8001980:	d102      	bne.n	8001988 <_fstat_r+0x1c>
 8001982:	682b      	ldr	r3, [r5, #0]
 8001984:	b103      	cbz	r3, 8001988 <_fstat_r+0x1c>
 8001986:	6023      	str	r3, [r4, #0]
 8001988:	bd38      	pop	{r3, r4, r5, pc}
 800198a:	bf00      	nop
 800198c:	200040b8 	.word	0x200040b8

08001990 <_isatty_r>:
 8001990:	b538      	push	{r3, r4, r5, lr}
 8001992:	4d06      	ldr	r5, [pc, #24]	@ (80019ac <_isatty_r+0x1c>)
 8001994:	2300      	movs	r3, #0
 8001996:	4604      	mov	r4, r0
 8001998:	4608      	mov	r0, r1
 800199a:	602b      	str	r3, [r5, #0]
 800199c:	f7fe ffa3 	bl	80008e6 <_isatty>
 80019a0:	1c43      	adds	r3, r0, #1
 80019a2:	d102      	bne.n	80019aa <_isatty_r+0x1a>
 80019a4:	682b      	ldr	r3, [r5, #0]
 80019a6:	b103      	cbz	r3, 80019aa <_isatty_r+0x1a>
 80019a8:	6023      	str	r3, [r4, #0]
 80019aa:	bd38      	pop	{r3, r4, r5, pc}
 80019ac:	200040b8 	.word	0x200040b8

080019b0 <_init>:
 80019b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b2:	bf00      	nop
 80019b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019b6:	bc08      	pop	{r3}
 80019b8:	469e      	mov	lr, r3
 80019ba:	4770      	bx	lr

080019bc <_fini>:
 80019bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019be:	bf00      	nop
 80019c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019c2:	bc08      	pop	{r3}
 80019c4:	469e      	mov	lr, r3
 80019c6:	4770      	bx	lr
