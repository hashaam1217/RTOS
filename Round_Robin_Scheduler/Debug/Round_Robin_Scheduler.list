
Round_Robin_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000166c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800183c  0800183c  0000283c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800188c  0800188c  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  0800188c  0800188c  0000288c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001894  08001894  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001894  08001894  00002894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001898  08001898  00002898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800189c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001458  2000005c  080018f8  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014b4  080018f8  000034b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a92  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000900  00000000  00000000  00004b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00005420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000172  00000000  00000000  00005640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab95  00000000  00000000  000057b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c75  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d85  00000000  00000000  00022fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3d41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dec  00000000  00000000  000b3d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000b4b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001824 	.word	0x08001824

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08001824 	.word	0x08001824

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	6039      	str	r1, [r7, #0]
 80002ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	db0a      	blt.n	80002da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	490c      	ldr	r1, [pc, #48]	@ (80002fc <__NVIC_SetPriority+0x4c>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	0112      	lsls	r2, r2, #4
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	440b      	add	r3, r1
 80002d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d8:	e00a      	b.n	80002f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4908      	ldr	r1, [pc, #32]	@ (8000300 <__NVIC_SetPriority+0x50>)
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	f003 030f 	and.w	r3, r3, #15
 80002e6:	3b04      	subs	r3, #4
 80002e8:	0112      	lsls	r2, r2, #4
 80002ea:	b2d2      	uxtb	r2, r2
 80002ec:	440b      	add	r3, r1
 80002ee:	761a      	strb	r2, [r3, #24]
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	e000e100 	.word	0xe000e100
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <kernel_stack_init>:
tcbType *currentPt;

int32_t TCB_STACK[NUM_OF_THREADS][STACKSIZE];

void kernel_stack_init(int i)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
    tcbs[i].stackPt = &TCB_STACK[i][STACKSIZE - 16]; // Stackpointer
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000312:	fb02 f303 	mul.w	r3, r2, r3
 8000316:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800031a:	4a60      	ldr	r2, [pc, #384]	@ (800049c <kernel_stack_init+0x198>)
 800031c:	441a      	add	r2, r3
 800031e:	4960      	ldr	r1, [pc, #384]	@ (80004a0 <kernel_stack_init+0x19c>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    // Sets bit 24 (T-bit) in PSR to 1, to operate in thumb mode
    TCB_STACK[i][STACKSIZE - 1] = (1U<<24);
 8000326:	4a5d      	ldr	r2, [pc, #372]	@ (800049c <kernel_stack_init+0x198>)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800032e:	fb01 f303 	mul.w	r3, r1, r3
 8000332:	4413      	add	r3, r2
 8000334:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 8000338:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800033c:	601a      	str	r2, [r3, #0]

    // Debug: Setting registers to a noticeable value
    TCB_STACK[i][STACKSIZE - 3] = 0xAAAAAAAA; // R14
 800033e:	4a57      	ldr	r2, [pc, #348]	@ (800049c <kernel_stack_init+0x198>)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000346:	fb01 f303 	mul.w	r3, r1, r3
 800034a:	4413      	add	r3, r2
 800034c:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8000350:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000354:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 4] = 0xAAAAAAAA; // R12
 8000356:	4a51      	ldr	r2, [pc, #324]	@ (800049c <kernel_stack_init+0x198>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800035e:	fb01 f303 	mul.w	r3, r1, r3
 8000362:	4413      	add	r3, r2
 8000364:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8000368:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800036c:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 5] = 0xAAAAAAAA; // R3
 800036e:	4a4b      	ldr	r2, [pc, #300]	@ (800049c <kernel_stack_init+0x198>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000376:	fb01 f303 	mul.w	r3, r1, r3
 800037a:	4413      	add	r3, r2
 800037c:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 8000380:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000384:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 6] = 0xAAAAAAAA; // R2
 8000386:	4a45      	ldr	r2, [pc, #276]	@ (800049c <kernel_stack_init+0x198>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800038e:	fb01 f303 	mul.w	r3, r1, r3
 8000392:	4413      	add	r3, r2
 8000394:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 8000398:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800039c:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 7] = 0xAAAAAAAA; // R1
 800039e:	4a3f      	ldr	r2, [pc, #252]	@ (800049c <kernel_stack_init+0x198>)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003a6:	fb01 f303 	mul.w	r3, r1, r3
 80003aa:	4413      	add	r3, r2
 80003ac:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80003b0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003b4:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 8] = 0xAAAAAAAA; // R0
 80003b6:	4a39      	ldr	r2, [pc, #228]	@ (800049c <kernel_stack_init+0x198>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003be:	fb01 f303 	mul.w	r3, r1, r3
 80003c2:	4413      	add	r3, r2
 80003c4:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 80003c8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003cc:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 9] = 0xAAAAAAAA; // R11
 80003ce:	4a33      	ldr	r2, [pc, #204]	@ (800049c <kernel_stack_init+0x198>)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003d6:	fb01 f303 	mul.w	r3, r1, r3
 80003da:	4413      	add	r3, r2
 80003dc:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 80003e0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003e4:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 10] = 0xAAAAAAAA; // R10
 80003e6:	4a2d      	ldr	r2, [pc, #180]	@ (800049c <kernel_stack_init+0x198>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003ee:	fb01 f303 	mul.w	r3, r1, r3
 80003f2:	4413      	add	r3, r2
 80003f4:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80003f8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003fc:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 11] = 0xAAAAAAAA; // R9
 80003fe:	4a27      	ldr	r2, [pc, #156]	@ (800049c <kernel_stack_init+0x198>)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000406:	fb01 f303 	mul.w	r3, r1, r3
 800040a:	4413      	add	r3, r2
 800040c:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 8000410:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000414:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 12] = 0xAAAAAAAA; // R8
 8000416:	4a21      	ldr	r2, [pc, #132]	@ (800049c <kernel_stack_init+0x198>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800041e:	fb01 f303 	mul.w	r3, r1, r3
 8000422:	4413      	add	r3, r2
 8000424:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 8000428:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800042c:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 13] = 0xAAAAAAAA; // R7
 800042e:	4a1b      	ldr	r2, [pc, #108]	@ (800049c <kernel_stack_init+0x198>)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000436:	fb01 f303 	mul.w	r3, r1, r3
 800043a:	4413      	add	r3, r2
 800043c:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 8000440:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000444:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 14] = 0xAAAAAAAA; // R6
 8000446:	4a15      	ldr	r2, [pc, #84]	@ (800049c <kernel_stack_init+0x198>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800044e:	fb01 f303 	mul.w	r3, r1, r3
 8000452:	4413      	add	r3, r2
 8000454:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 8000458:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800045c:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 15] = 0xAAAAAAAA; // R5
 800045e:	4a0f      	ldr	r2, [pc, #60]	@ (800049c <kernel_stack_init+0x198>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000466:	fb01 f303 	mul.w	r3, r1, r3
 800046a:	4413      	add	r3, r2
 800046c:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 8000470:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000474:	601a      	str	r2, [r3, #0]
    TCB_STACK[i][STACKSIZE - 16] = 0xAAAAAAAA; // R4
 8000476:	4a09      	ldr	r2, [pc, #36]	@ (800049c <kernel_stack_init+0x198>)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800047e:	fb01 f303 	mul.w	r3, r1, r3
 8000482:	4413      	add	r3, r2
 8000484:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000488:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800048c:	601a      	str	r2, [r3, #0]
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	20000098 	.word	0x20000098
 80004a0:	2000007c 	.word	0x2000007c

080004a4 <kernel_add_threads>:

uint8_t kernel_add_threads(void(*task0)(void), void(*task1)(void), void(*task2)(void))
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b0:	b672      	cpsid	i
}
 80004b2:	bf00      	nop
    // Global Interrupts
    __disable_irq();

    tcbs[0].nextPt = &tcbs[1];
 80004b4:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <kernel_add_threads+0x64>)
 80004b6:	4a15      	ldr	r2, [pc, #84]	@ (800050c <kernel_add_threads+0x68>)
 80004b8:	605a      	str	r2, [r3, #4]
    tcbs[1].nextPt = &tcbs[2];
 80004ba:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <kernel_add_threads+0x64>)
 80004bc:	4a14      	ldr	r2, [pc, #80]	@ (8000510 <kernel_add_threads+0x6c>)
 80004be:	60da      	str	r2, [r3, #12]
    tcbs[2].nextPt = &tcbs[0];
 80004c0:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <kernel_add_threads+0x64>)
 80004c2:	4a11      	ldr	r2, [pc, #68]	@ (8000508 <kernel_add_threads+0x64>)
 80004c4:	615a      	str	r2, [r3, #20]

    kernel_stack_init(0);
 80004c6:	2000      	movs	r0, #0
 80004c8:	f7ff ff1c 	bl	8000304 <kernel_stack_init>
    // Initialize PC
    TCB_STACK[0][STACKSIZE - 2] = (int32_t)(task0);
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a11      	ldr	r2, [pc, #68]	@ (8000514 <kernel_add_threads+0x70>)
 80004d0:	f8c2 3638 	str.w	r3, [r2, #1592]	@ 0x638

    kernel_stack_init(1);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f7ff ff15 	bl	8000304 <kernel_stack_init>
    // Initialize PC
    TCB_STACK[1][STACKSIZE - 2] = (int32_t)(task1);
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000514 <kernel_add_threads+0x70>)
 80004de:	f8c2 3c78 	str.w	r3, [r2, #3192]	@ 0xc78

    kernel_stack_init(2);
 80004e2:	2002      	movs	r0, #2
 80004e4:	f7ff ff0e 	bl	8000304 <kernel_stack_init>
    // Initialize PC
    TCB_STACK[2][STACKSIZE - 2] = (int32_t)(task2);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000514 <kernel_add_threads+0x70>)
 80004ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80004f0:	f8c2 32b8 	str.w	r3, [r2, #696]	@ 0x2b8


    // Start form thread 0
    currentPt = &tcbs[0];
 80004f4:	4b08      	ldr	r3, [pc, #32]	@ (8000518 <kernel_add_threads+0x74>)
 80004f6:	4a04      	ldr	r2, [pc, #16]	@ (8000508 <kernel_add_threads+0x64>)
 80004f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004fa:	b662      	cpsie	i
}
 80004fc:	bf00      	nop

    // Global Interrupts
    __enable_irq();

    return 1;
 80004fe:	2301      	movs	r3, #1
}
 8000500:	4618      	mov	r0, r3
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	2000007c 	.word	0x2000007c
 800050c:	20000084 	.word	0x20000084
 8000510:	2000008c 	.word	0x2000008c
 8000514:	20000098 	.word	0x20000098
 8000518:	20000094 	.word	0x20000094

0800051c <kernel_init>:

void kernel_init(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
    MILLIS_PRESCALER = (BUS_FREQ/1000);
 8000520:	4b04      	ldr	r3, [pc, #16]	@ (8000534 <kernel_init+0x18>)
 8000522:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000078 	.word	0x20000078

08000538 <kernel_launch>:

void kernel_launch(uint32_t quanta)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    // Reset SysTick
    SysTick->CTRL = SYSTICK_RST;
 8000540:	4b13      	ldr	r3, [pc, #76]	@ (8000590 <kernel_launch+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]

    // Clear SysTick Current Value Register
    SysTick->VAL = 0;
 8000546:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <kernel_launch+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]

    // Load Quanta
    SysTick->LOAD = (quanta * MILLIS_PRESCALER) - 1;
 800054c:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <kernel_launch+0x5c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	fb02 f303 	mul.w	r3, r2, r3
 8000556:	4a0e      	ldr	r2, [pc, #56]	@ (8000590 <kernel_launch+0x58>)
 8000558:	3b01      	subs	r3, #1
 800055a:	6053      	str	r3, [r2, #4]

    // Set SysTick to low priority
    NVIC_SetPriority(SysTick_IRQn, 15);
 800055c:	210f      	movs	r1, #15
 800055e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000562:	f7ff fea5 	bl	80002b0 <__NVIC_SetPriority>

    // Enable SysTick select Clocksource
    SysTick->CTRL = CTRL_CS;
 8000566:	4b0a      	ldr	r3, [pc, #40]	@ (8000590 <kernel_launch+0x58>)
 8000568:	2204      	movs	r2, #4
 800056a:	601a      	str	r2, [r3, #0]
    SysTick->CTRL |= CTRL_E;
 800056c:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <kernel_launch+0x58>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a07      	ldr	r2, [pc, #28]	@ (8000590 <kernel_launch+0x58>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]

    // Enabling SysTick Interrupt
    SysTick->CTRL |= CTRL_TIE;
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <kernel_launch+0x58>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a04      	ldr	r2, [pc, #16]	@ (8000590 <kernel_launch+0x58>)
 800057e:	f043 0302 	orr.w	r3, r3, #2
 8000582:	6013      	str	r3, [r2, #0]

    // Launch Scheduler
    scheduler_launch();
 8000584:	f000 f81a 	bl	80005bc <scheduler_launch>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	e000e010 	.word	0xe000e010
 8000594:	20000078 	.word	0x20000078

08000598 <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
    // Suspend Current Thread
    // Global Interrupts
    __asm("CPSID I");
 8000598:	b672      	cpsid	i

    // Save R4-R11
    __asm("PUSH {R4-R11}");
 800059a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

    // Load address of currentPt into R0
    __asm("LDR R0, =currentPt");
 800059e:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <SysTick_Handler+0x20>)

    // R1=currentPt to current TCB
    __asm("LDR R1, [R0]");
 80005a0:	6801      	ldr	r1, [r0, #0]

    // Cortex-M SP equals R1, save SP into TCB's first variable, stackPt
    __asm("STR SP, [R1]");
 80005a2:	f8c1 d000 	str.w	sp, [r1]

    
    // Retrieve Second Thread
    // Load r1 from TCB's second variable nextPt
    __asm("LDR R1, [R1, #4]");
 80005a6:	6849      	ldr	r1, [r1, #4]

    // Store R1 at address = R0, currentPt = r1, currentPt = nextPt
    __asm("STR R1, [R0]");
 80005a8:	6001      	str	r1, [r0, #0]

     // Load SP of new TCB, SP = currentPt -> stackPt
     __asm("LDR SP, [R1]");
 80005aa:	f8d1 d000 	ldr.w	sp, [r1]

     // Restore R4-R11
     __asm("POP {R4-R11}");
 80005ae:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

     // Global Interrupts
     __asm("CPSIE I");
 80005b2:	b662      	cpsie	i

     // Return from exception and restore R0 - R3, R12, LR, PC, PSR
     __asm("BX LR");
 80005b4:	4770      	bx	lr
}
 80005b6:	bf00      	nop
 80005b8:	20000094 	.word	0x20000094

080005bc <scheduler_launch>:

void scheduler_launch(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
    // Load address of currentPt
    __asm("LDR R0, =currentPt");
 80005c0:	4809      	ldr	r0, [pc, #36]	@ (80005e8 <scheduler_launch+0x2c>)

    // Load the value of currentPt
    __asm("LDR R2, [R0]");
 80005c2:	6802      	ldr	r2, [r0, #0]

    // Load TCB Stack into SP
    __asm("LDR SP, [R2]");
 80005c4:	f8d2 d000 	ldr.w	sp, [r2]

    // Restore R4-11
    __asm("POP {R4-R11}");
 80005c8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    
    // Restore R12
    __asm("POP {R12}");
 80005cc:	f85d cb04 	ldr.w	ip, [sp], #4
    // Restore R0 - R3
    __asm("POP {R0-R3}");
 80005d0:	bc0f      	pop	{r0, r1, r2, r3}

    // Skipping LR
    __asm("Add SP, SP, #4");
 80005d2:	b001      	add	sp, #4

    // Create a new start location by popping LR
    __asm("POP {LR}");
 80005d4:	f85d eb04 	ldr.w	lr, [sp], #4

    // Skip PSR
    __asm("ADD SP, SP, #4");
 80005d8:	b001      	add	sp, #4

    // Global Interrupts
    __asm("CPSIE I");
 80005da:	b662      	cpsie	i
    // Return
    __asm("BX LR");
 80005dc:	4770      	bx	lr

    

}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	20000094 	.word	0x20000094

080005ec <led_init>:
#include "led.h"

#define GPIOAEN			(1U<<0) //the bit we want to enable
#define LED_PIN 		(1U<<5)
void led_init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	/*Enable clock access to led port A*/
	// Turning on AHB1 clock bus
	RCC->AHB1ENR |= GPIOAEN;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <led_init+0x34>)
 80005f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000620 <led_init+0x34>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Set led pin as output pin*/
	GPIOA->MODER |= (1U << 10);
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <led_init+0x38>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <led_init+0x38>)
 8000602:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000606:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 11);
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <led_init+0x38>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a05      	ldr	r2, [pc, #20]	@ (8000624 <led_init+0x38>)
 800060e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000612:	6013      	str	r3, [r2, #0]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000

08000628 <task0>:
void task_hello2(void);



void task0(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
	while(1)
	{
		Task0_Profiler++;
 800062c:	4b02      	ldr	r3, [pc, #8]	@ (8000638 <task0+0x10>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	4a01      	ldr	r2, [pc, #4]	@ (8000638 <task0+0x10>)
 8000634:	6013      	str	r3, [r2, #0]
 8000636:	e7f9      	b.n	800062c <task0+0x4>
 8000638:	20001358 	.word	0x20001358

0800063c <task1>:
	}
}

void task1(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
	while(1)
	{
		Task1_Profiler++;
 8000640:	4b02      	ldr	r3, [pc, #8]	@ (800064c <task1+0x10>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	4a01      	ldr	r2, [pc, #4]	@ (800064c <task1+0x10>)
 8000648:	6013      	str	r3, [r2, #0]
 800064a:	e7f9      	b.n	8000640 <task1+0x4>
 800064c:	2000135c 	.word	0x2000135c

08000650 <task2>:
	}
}

void task2(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2_Profiler++;
 8000654:	4b02      	ldr	r3, [pc, #8]	@ (8000660 <task2+0x10>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	4a01      	ldr	r2, [pc, #4]	@ (8000660 <task2+0x10>)
 800065c:	6013      	str	r3, [r2, #0]
 800065e:	e7f9      	b.n	8000654 <task2+0x4>
 8000660:	20001360 	.word	0x20001360

08000664 <main>:
}



int main (void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	led_init();
 8000668:	f7ff ffc0 	bl	80005ec <led_init>
	uart_tx_init();
 800066c:	f000 f8f6 	bl	800085c <uart_tx_init>
    timebase_init();
 8000670:	f000 f8c2 	bl	80007f8 <timebase_init>
    kernel_init();
 8000674:	f7ff ff52 	bl	800051c <kernel_init>

    printf("Starting \n\r");
 8000678:	4808      	ldr	r0, [pc, #32]	@ (800069c <main+0x38>)
 800067a:	f000 fa65 	bl	8000b48 <iprintf>

    // Add Threads
    kernel_add_threads(&task0, &task1, &task2);
 800067e:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <main+0x3c>)
 8000680:	4908      	ldr	r1, [pc, #32]	@ (80006a4 <main+0x40>)
 8000682:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <main+0x44>)
 8000684:	f7ff ff0e 	bl	80004a4 <kernel_add_threads>

    printf("Added Threads \n\r");
 8000688:	4808      	ldr	r0, [pc, #32]	@ (80006ac <main+0x48>)
 800068a:	f000 fa5d 	bl	8000b48 <iprintf>
    // Set RoundRobin Time Quanta
	kernel_launch(QUANTA);
 800068e:	200a      	movs	r0, #10
 8000690:	f7ff ff52 	bl	8000538 <kernel_launch>
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	0800183c 	.word	0x0800183c
 80006a0:	08000651 	.word	0x08000651
 80006a4:	0800063d 	.word	0x0800063d
 80006a8:	08000629 	.word	0x08000629
 80006ac:	08001848 	.word	0x08001848

080006b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	e00a      	b.n	80006d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006c2:	f3af 8000 	nop.w
 80006c6:	4601      	mov	r1, r0
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	60ba      	str	r2, [r7, #8]
 80006ce:	b2ca      	uxtb	r2, r1
 80006d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dbf0      	blt.n	80006c2 <_read+0x12>
  }

  return len;
 80006e0:	687b      	ldr	r3, [r7, #4]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b086      	sub	sp, #24
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	e009      	b.n	8000710 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	60ba      	str	r2, [r7, #8]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f89d 	bl	8000844 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	dbf1      	blt.n	80006fc <_write+0x12>
  }
  return len;
 8000718:	687b      	ldr	r3, [r7, #4]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_close>:

int _close(int file)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800074a:	605a      	str	r2, [r3, #4]
  return 0;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <_isatty>:

int _isatty(int file)
{
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000762:	2301      	movs	r3, #1
}
 8000764:	4618      	mov	r0, r3
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000794:	4a14      	ldr	r2, [pc, #80]	@ (80007e8 <_sbrk+0x5c>)
 8000796:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <_sbrk+0x60>)
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <_sbrk+0x64>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d102      	bne.n	80007ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <_sbrk+0x64>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <_sbrk+0x68>)
 80007ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <_sbrk+0x64>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d207      	bcs.n	80007cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007bc:	f000 fa68 	bl	8000c90 <__errno>
 80007c0:	4603      	mov	r3, r0
 80007c2:	220c      	movs	r2, #12
 80007c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007ca:	e009      	b.n	80007e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <_sbrk+0x64>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007d2:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <_sbrk+0x64>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	4a05      	ldr	r2, [pc, #20]	@ (80007f0 <_sbrk+0x64>)
 80007dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007de:	68fb      	ldr	r3, [r7, #12]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20020000 	.word	0x20020000
 80007ec:	00000400 	.word	0x00000400
 80007f0:	20001364 	.word	0x20001364
 80007f4:	200014b8 	.word	0x200014b8

080007f8 <timebase_init>:
    g_curr_tick += tick_freq;
}


void timebase_init(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	// Load the timer with number of cycles per seconds
    SysTick->LOAD = ONE_SEC_LOAD - 1;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <timebase_init+0x44>)
 80007fe:	4a10      	ldr	r2, [pc, #64]	@ (8000840 <timebase_init+0x48>)
 8000800:	605a      	str	r2, [r3, #4]
	// Clear SysTick Current Value Register
    SysTick->VAL = 0;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <timebase_init+0x44>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
	// Select Internal Clock
    SysTick->CTRL |= CTRL_CS;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <timebase_init+0x44>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0b      	ldr	r2, [pc, #44]	@ (800083c <timebase_init+0x44>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6013      	str	r3, [r2, #0]
	// Enable Interrupt
    SysTick->CTRL |= CTRL_TIE;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <timebase_init+0x44>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a08      	ldr	r2, [pc, #32]	@ (800083c <timebase_init+0x44>)
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	6013      	str	r3, [r2, #0]
	// Enable SysTick
    SysTick->CTRL |= CTRL_E;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <timebase_init+0x44>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a05      	ldr	r2, [pc, #20]	@ (800083c <timebase_init+0x44>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800082c:	b662      	cpsie	i
}
 800082e:	bf00      	nop
    // Enable global interrupts
    __enable_irq(); // Possibly redundant
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000e010 	.word	0xe000e010
 8000840:	00f423ff 	.word	0x00f423ff

08000844 <__io_putchar>:
static uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f84f 	bl	80008f0 <uart_write>
	return ch;
 8000852:	687b      	ldr	r3, [r7, #4]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <uart_tx_init>:

void uart_tx_init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	//enable clock access
	RCC->AHB1ENR |= GPIOAEN;
 8000860:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <uart_tx_init+0x84>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000864:	4a1e      	ldr	r2, [pc, #120]	@ (80008e0 <uart_tx_init+0x84>)
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	6313      	str	r3, [r2, #48]	@ 0x30
	//Finding GPIO Pins for USART2

	GPIOA->MODER &= ~(1U<<4);
 800086c:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <uart_tx_init+0x88>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a1c      	ldr	r2, [pc, #112]	@ (80008e4 <uart_tx_init+0x88>)
 8000872:	f023 0310 	bic.w	r3, r3, #16
 8000876:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<5);
 8000878:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <uart_tx_init+0x88>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a19      	ldr	r2, [pc, #100]	@ (80008e4 <uart_tx_init+0x88>)
 800087e:	f043 0320 	orr.w	r3, r3, #32
 8000882:	6013      	str	r3, [r2, #0]
	//Set alternate function type to AF7 (UART2_TX)
	GPIOA->AFR[0] |=  (1U<<8);
 8000884:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <uart_tx_init+0x88>)
 8000886:	6a1b      	ldr	r3, [r3, #32]
 8000888:	4a16      	ldr	r2, [pc, #88]	@ (80008e4 <uart_tx_init+0x88>)
 800088a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800088e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<9);
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <uart_tx_init+0x88>)
 8000892:	6a1b      	ldr	r3, [r3, #32]
 8000894:	4a13      	ldr	r2, [pc, #76]	@ (80008e4 <uart_tx_init+0x88>)
 8000896:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800089a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<10);
 800089c:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <uart_tx_init+0x88>)
 800089e:	6a1b      	ldr	r3, [r3, #32]
 80008a0:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <uart_tx_init+0x88>)
 80008a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008a6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80008a8:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <uart_tx_init+0x88>)
 80008aa:	6a1b      	ldr	r3, [r3, #32]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	@ (80008e4 <uart_tx_init+0x88>)
 80008ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80008b2:	6213      	str	r3, [r2, #32]
	//Enable clock access to UART
	RCC->APB1ENR |= UART2EN;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <uart_tx_init+0x84>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b8:	4a09      	ldr	r2, [pc, #36]	@ (80008e0 <uart_tx_init+0x84>)
 80008ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008be:	6413      	str	r3, [r2, #64]	@ 0x40
	//Configure baudrate
	set_uart_baudrate(APB1_CLK, UART_BAUDRATE);
 80008c0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <uart_tx_init+0x8c>)
 80008c6:	f000 f82b 	bl	8000920 <set_uart_baudrate>

	//Configure the transfer direction
	USART2->CR1 = CR1_TE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <uart_tx_init+0x90>)
 80008cc:	2208      	movs	r2, #8
 80008ce:	60da      	str	r2, [r3, #12]

	//Enable UART module
	USART2->CR1 |= CR1_UE;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <uart_tx_init+0x90>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <uart_tx_init+0x90>)
 80008d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008da:	60d3      	str	r3, [r2, #12]
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000
 80008e8:	00f42400 	.word	0x00f42400
 80008ec:	40004400 	.word	0x40004400

080008f0 <uart_write>:



static void uart_write(int ch)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	//Ensuring clear TX Register
	while (!(USART2->SR & SR_TXE)){}
 80008f8:	bf00      	nop
 80008fa:	4b08      	ldr	r3, [pc, #32]	@ (800091c <uart_write+0x2c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000902:	2b00      	cmp	r3, #0
 8000904:	d0f9      	beq.n	80008fa <uart_write+0xa>

	//TX
	USART2->DR = (ch & 0xFF);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a04      	ldr	r2, [pc, #16]	@ (800091c <uart_write+0x2c>)
 800090a:	b2db      	uxtb	r3, r3
 800090c:	6053      	str	r3, [r2, #4]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40004400 	.word	0x40004400

08000920 <set_uart_baudrate>:

static void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_baudrate(APB1_CLK, UART_BAUDRATE);
 800092a:	4c06      	ldr	r4, [pc, #24]	@ (8000944 <set_uart_baudrate+0x24>)
 800092c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000930:	4805      	ldr	r0, [pc, #20]	@ (8000948 <set_uart_baudrate+0x28>)
 8000932:	f000 f80b 	bl	800094c <compute_uart_baudrate>
 8000936:	4603      	mov	r3, r0
 8000938:	60a3      	str	r3, [r4, #8]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bd90      	pop	{r4, r7, pc}
 8000942:	bf00      	nop
 8000944:	40004400 	.word	0x40004400
 8000948:	00f42400 	.word	0x00f42400

0800094c <compute_uart_baudrate>:

static uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	return (periph_clk + (baudrate/2U))/baudrate;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	085a      	lsrs	r2, r3, #1
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	441a      	add	r2, r3
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000964:	4618      	mov	r0, r3
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000970:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000972:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000974:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000978:	480c      	ldr	r0, [pc, #48]	@ (80009ac <LoopForever+0x6>)
  ldr r1, =_edata
 800097a:	490d      	ldr	r1, [pc, #52]	@ (80009b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800097c:	4a0d      	ldr	r2, [pc, #52]	@ (80009b4 <LoopForever+0xe>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000990:	4c0a      	ldr	r4, [pc, #40]	@ (80009bc <LoopForever+0x16>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800099e:	f000 f97d 	bl	8000c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a2:	f7ff fe5f 	bl	8000664 <main>

080009a6 <LoopForever>:

LoopForever:
  b LoopForever
 80009a6:	e7fe      	b.n	80009a6 <LoopForever>
  ldr   r0, =_estack
 80009a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009b4:	0800189c 	.word	0x0800189c
  ldr r2, =_sbss
 80009b8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009bc:	200014b4 	.word	0x200014b4

080009c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC_IRQHandler>
	...

080009c4 <std>:
 80009c4:	2300      	movs	r3, #0
 80009c6:	b510      	push	{r4, lr}
 80009c8:	4604      	mov	r4, r0
 80009ca:	e9c0 3300 	strd	r3, r3, [r0]
 80009ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009d2:	6083      	str	r3, [r0, #8]
 80009d4:	8181      	strh	r1, [r0, #12]
 80009d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80009d8:	81c2      	strh	r2, [r0, #14]
 80009da:	6183      	str	r3, [r0, #24]
 80009dc:	4619      	mov	r1, r3
 80009de:	2208      	movs	r2, #8
 80009e0:	305c      	adds	r0, #92	@ 0x5c
 80009e2:	f000 f906 	bl	8000bf2 <memset>
 80009e6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <std+0x58>)
 80009e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80009ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <std+0x5c>)
 80009ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <std+0x60>)
 80009f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <std+0x64>)
 80009f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <std+0x68>)
 80009f8:	6224      	str	r4, [r4, #32]
 80009fa:	429c      	cmp	r4, r3
 80009fc:	d006      	beq.n	8000a0c <std+0x48>
 80009fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000a02:	4294      	cmp	r4, r2
 8000a04:	d002      	beq.n	8000a0c <std+0x48>
 8000a06:	33d0      	adds	r3, #208	@ 0xd0
 8000a08:	429c      	cmp	r4, r3
 8000a0a:	d105      	bne.n	8000a18 <std+0x54>
 8000a0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a14:	f000 b966 	b.w	8000ce4 <__retarget_lock_init_recursive>
 8000a18:	bd10      	pop	{r4, pc}
 8000a1a:	bf00      	nop
 8000a1c:	08000b6d 	.word	0x08000b6d
 8000a20:	08000b8f 	.word	0x08000b8f
 8000a24:	08000bc7 	.word	0x08000bc7
 8000a28:	08000beb 	.word	0x08000beb
 8000a2c:	20001368 	.word	0x20001368

08000a30 <stdio_exit_handler>:
 8000a30:	4a02      	ldr	r2, [pc, #8]	@ (8000a3c <stdio_exit_handler+0xc>)
 8000a32:	4903      	ldr	r1, [pc, #12]	@ (8000a40 <stdio_exit_handler+0x10>)
 8000a34:	4803      	ldr	r0, [pc, #12]	@ (8000a44 <stdio_exit_handler+0x14>)
 8000a36:	f000 b869 	b.w	8000b0c <_fwalk_sglue>
 8000a3a:	bf00      	nop
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	08001585 	.word	0x08001585
 8000a44:	20000010 	.word	0x20000010

08000a48 <cleanup_stdio>:
 8000a48:	6841      	ldr	r1, [r0, #4]
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <cleanup_stdio+0x34>)
 8000a4c:	4299      	cmp	r1, r3
 8000a4e:	b510      	push	{r4, lr}
 8000a50:	4604      	mov	r4, r0
 8000a52:	d001      	beq.n	8000a58 <cleanup_stdio+0x10>
 8000a54:	f000 fd96 	bl	8001584 <_fflush_r>
 8000a58:	68a1      	ldr	r1, [r4, #8]
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <cleanup_stdio+0x38>)
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	d002      	beq.n	8000a66 <cleanup_stdio+0x1e>
 8000a60:	4620      	mov	r0, r4
 8000a62:	f000 fd8f 	bl	8001584 <_fflush_r>
 8000a66:	68e1      	ldr	r1, [r4, #12]
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <cleanup_stdio+0x3c>)
 8000a6a:	4299      	cmp	r1, r3
 8000a6c:	d004      	beq.n	8000a78 <cleanup_stdio+0x30>
 8000a6e:	4620      	mov	r0, r4
 8000a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a74:	f000 bd86 	b.w	8001584 <_fflush_r>
 8000a78:	bd10      	pop	{r4, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20001368 	.word	0x20001368
 8000a80:	200013d0 	.word	0x200013d0
 8000a84:	20001438 	.word	0x20001438

08000a88 <global_stdio_init.part.0>:
 8000a88:	b510      	push	{r4, lr}
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <global_stdio_init.part.0+0x30>)
 8000a8c:	4c0b      	ldr	r4, [pc, #44]	@ (8000abc <global_stdio_init.part.0+0x34>)
 8000a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac0 <global_stdio_init.part.0+0x38>)
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	4620      	mov	r0, r4
 8000a94:	2200      	movs	r2, #0
 8000a96:	2104      	movs	r1, #4
 8000a98:	f7ff ff94 	bl	80009c4 <std>
 8000a9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2109      	movs	r1, #9
 8000aa4:	f7ff ff8e 	bl	80009c4 <std>
 8000aa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000aac:	2202      	movs	r2, #2
 8000aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ab2:	2112      	movs	r1, #18
 8000ab4:	f7ff bf86 	b.w	80009c4 <std>
 8000ab8:	200014a0 	.word	0x200014a0
 8000abc:	20001368 	.word	0x20001368
 8000ac0:	08000a31 	.word	0x08000a31

08000ac4 <__sfp_lock_acquire>:
 8000ac4:	4801      	ldr	r0, [pc, #4]	@ (8000acc <__sfp_lock_acquire+0x8>)
 8000ac6:	f000 b90e 	b.w	8000ce6 <__retarget_lock_acquire_recursive>
 8000aca:	bf00      	nop
 8000acc:	200014a9 	.word	0x200014a9

08000ad0 <__sfp_lock_release>:
 8000ad0:	4801      	ldr	r0, [pc, #4]	@ (8000ad8 <__sfp_lock_release+0x8>)
 8000ad2:	f000 b909 	b.w	8000ce8 <__retarget_lock_release_recursive>
 8000ad6:	bf00      	nop
 8000ad8:	200014a9 	.word	0x200014a9

08000adc <__sinit>:
 8000adc:	b510      	push	{r4, lr}
 8000ade:	4604      	mov	r4, r0
 8000ae0:	f7ff fff0 	bl	8000ac4 <__sfp_lock_acquire>
 8000ae4:	6a23      	ldr	r3, [r4, #32]
 8000ae6:	b11b      	cbz	r3, 8000af0 <__sinit+0x14>
 8000ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000aec:	f7ff bff0 	b.w	8000ad0 <__sfp_lock_release>
 8000af0:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <__sinit+0x28>)
 8000af2:	6223      	str	r3, [r4, #32]
 8000af4:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <__sinit+0x2c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d1f5      	bne.n	8000ae8 <__sinit+0xc>
 8000afc:	f7ff ffc4 	bl	8000a88 <global_stdio_init.part.0>
 8000b00:	e7f2      	b.n	8000ae8 <__sinit+0xc>
 8000b02:	bf00      	nop
 8000b04:	08000a49 	.word	0x08000a49
 8000b08:	200014a0 	.word	0x200014a0

08000b0c <_fwalk_sglue>:
 8000b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b10:	4607      	mov	r7, r0
 8000b12:	4688      	mov	r8, r1
 8000b14:	4614      	mov	r4, r2
 8000b16:	2600      	movs	r6, #0
 8000b18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b1c:	f1b9 0901 	subs.w	r9, r9, #1
 8000b20:	d505      	bpl.n	8000b2e <_fwalk_sglue+0x22>
 8000b22:	6824      	ldr	r4, [r4, #0]
 8000b24:	2c00      	cmp	r4, #0
 8000b26:	d1f7      	bne.n	8000b18 <_fwalk_sglue+0xc>
 8000b28:	4630      	mov	r0, r6
 8000b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b2e:	89ab      	ldrh	r3, [r5, #12]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d907      	bls.n	8000b44 <_fwalk_sglue+0x38>
 8000b34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	d003      	beq.n	8000b44 <_fwalk_sglue+0x38>
 8000b3c:	4629      	mov	r1, r5
 8000b3e:	4638      	mov	r0, r7
 8000b40:	47c0      	blx	r8
 8000b42:	4306      	orrs	r6, r0
 8000b44:	3568      	adds	r5, #104	@ 0x68
 8000b46:	e7e9      	b.n	8000b1c <_fwalk_sglue+0x10>

08000b48 <iprintf>:
 8000b48:	b40f      	push	{r0, r1, r2, r3}
 8000b4a:	b507      	push	{r0, r1, r2, lr}
 8000b4c:	4906      	ldr	r1, [pc, #24]	@ (8000b68 <iprintf+0x20>)
 8000b4e:	ab04      	add	r3, sp, #16
 8000b50:	6808      	ldr	r0, [r1, #0]
 8000b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b56:	6881      	ldr	r1, [r0, #8]
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	f000 f9e9 	bl	8000f30 <_vfiprintf_r>
 8000b5e:	b003      	add	sp, #12
 8000b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b64:	b004      	add	sp, #16
 8000b66:	4770      	bx	lr
 8000b68:	2000000c 	.word	0x2000000c

08000b6c <__sread>:
 8000b6c:	b510      	push	{r4, lr}
 8000b6e:	460c      	mov	r4, r1
 8000b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b74:	f000 f868 	bl	8000c48 <_read_r>
 8000b78:	2800      	cmp	r0, #0
 8000b7a:	bfab      	itete	ge
 8000b7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8000b80:	181b      	addge	r3, r3, r0
 8000b82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000b86:	bfac      	ite	ge
 8000b88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000b8a:	81a3      	strhlt	r3, [r4, #12]
 8000b8c:	bd10      	pop	{r4, pc}

08000b8e <__swrite>:
 8000b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b92:	461f      	mov	r7, r3
 8000b94:	898b      	ldrh	r3, [r1, #12]
 8000b96:	05db      	lsls	r3, r3, #23
 8000b98:	4605      	mov	r5, r0
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	4616      	mov	r6, r2
 8000b9e:	d505      	bpl.n	8000bac <__swrite+0x1e>
 8000ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f000 f83c 	bl	8000c24 <_lseek_r>
 8000bac:	89a3      	ldrh	r3, [r4, #12]
 8000bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bb6:	81a3      	strh	r3, [r4, #12]
 8000bb8:	4632      	mov	r2, r6
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4628      	mov	r0, r5
 8000bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000bc2:	f000 b853 	b.w	8000c6c <_write_r>

08000bc6 <__sseek>:
 8000bc6:	b510      	push	{r4, lr}
 8000bc8:	460c      	mov	r4, r1
 8000bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bce:	f000 f829 	bl	8000c24 <_lseek_r>
 8000bd2:	1c43      	adds	r3, r0, #1
 8000bd4:	89a3      	ldrh	r3, [r4, #12]
 8000bd6:	bf15      	itete	ne
 8000bd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000bda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000bde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000be2:	81a3      	strheq	r3, [r4, #12]
 8000be4:	bf18      	it	ne
 8000be6:	81a3      	strhne	r3, [r4, #12]
 8000be8:	bd10      	pop	{r4, pc}

08000bea <__sclose>:
 8000bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bee:	f000 b809 	b.w	8000c04 <_close_r>

08000bf2 <memset>:
 8000bf2:	4402      	add	r2, r0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d100      	bne.n	8000bfc <memset+0xa>
 8000bfa:	4770      	bx	lr
 8000bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8000c00:	e7f9      	b.n	8000bf6 <memset+0x4>
	...

08000c04 <_close_r>:
 8000c04:	b538      	push	{r3, r4, r5, lr}
 8000c06:	4d06      	ldr	r5, [pc, #24]	@ (8000c20 <_close_r+0x1c>)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	602b      	str	r3, [r5, #0]
 8000c10:	f7ff fd87 	bl	8000722 <_close>
 8000c14:	1c43      	adds	r3, r0, #1
 8000c16:	d102      	bne.n	8000c1e <_close_r+0x1a>
 8000c18:	682b      	ldr	r3, [r5, #0]
 8000c1a:	b103      	cbz	r3, 8000c1e <_close_r+0x1a>
 8000c1c:	6023      	str	r3, [r4, #0]
 8000c1e:	bd38      	pop	{r3, r4, r5, pc}
 8000c20:	200014a4 	.word	0x200014a4

08000c24 <_lseek_r>:
 8000c24:	b538      	push	{r3, r4, r5, lr}
 8000c26:	4d07      	ldr	r5, [pc, #28]	@ (8000c44 <_lseek_r+0x20>)
 8000c28:	4604      	mov	r4, r0
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	2200      	movs	r2, #0
 8000c30:	602a      	str	r2, [r5, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	f7ff fd9c 	bl	8000770 <_lseek>
 8000c38:	1c43      	adds	r3, r0, #1
 8000c3a:	d102      	bne.n	8000c42 <_lseek_r+0x1e>
 8000c3c:	682b      	ldr	r3, [r5, #0]
 8000c3e:	b103      	cbz	r3, 8000c42 <_lseek_r+0x1e>
 8000c40:	6023      	str	r3, [r4, #0]
 8000c42:	bd38      	pop	{r3, r4, r5, pc}
 8000c44:	200014a4 	.word	0x200014a4

08000c48 <_read_r>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	4d07      	ldr	r5, [pc, #28]	@ (8000c68 <_read_r+0x20>)
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	4608      	mov	r0, r1
 8000c50:	4611      	mov	r1, r2
 8000c52:	2200      	movs	r2, #0
 8000c54:	602a      	str	r2, [r5, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	f7ff fd2a 	bl	80006b0 <_read>
 8000c5c:	1c43      	adds	r3, r0, #1
 8000c5e:	d102      	bne.n	8000c66 <_read_r+0x1e>
 8000c60:	682b      	ldr	r3, [r5, #0]
 8000c62:	b103      	cbz	r3, 8000c66 <_read_r+0x1e>
 8000c64:	6023      	str	r3, [r4, #0]
 8000c66:	bd38      	pop	{r3, r4, r5, pc}
 8000c68:	200014a4 	.word	0x200014a4

08000c6c <_write_r>:
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	4d07      	ldr	r5, [pc, #28]	@ (8000c8c <_write_r+0x20>)
 8000c70:	4604      	mov	r4, r0
 8000c72:	4608      	mov	r0, r1
 8000c74:	4611      	mov	r1, r2
 8000c76:	2200      	movs	r2, #0
 8000c78:	602a      	str	r2, [r5, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f7ff fd35 	bl	80006ea <_write>
 8000c80:	1c43      	adds	r3, r0, #1
 8000c82:	d102      	bne.n	8000c8a <_write_r+0x1e>
 8000c84:	682b      	ldr	r3, [r5, #0]
 8000c86:	b103      	cbz	r3, 8000c8a <_write_r+0x1e>
 8000c88:	6023      	str	r3, [r4, #0]
 8000c8a:	bd38      	pop	{r3, r4, r5, pc}
 8000c8c:	200014a4 	.word	0x200014a4

08000c90 <__errno>:
 8000c90:	4b01      	ldr	r3, [pc, #4]	@ (8000c98 <__errno+0x8>)
 8000c92:	6818      	ldr	r0, [r3, #0]
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	2000000c 	.word	0x2000000c

08000c9c <__libc_init_array>:
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8000cd4 <__libc_init_array+0x38>)
 8000ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8000cd8 <__libc_init_array+0x3c>)
 8000ca2:	1b64      	subs	r4, r4, r5
 8000ca4:	10a4      	asrs	r4, r4, #2
 8000ca6:	2600      	movs	r6, #0
 8000ca8:	42a6      	cmp	r6, r4
 8000caa:	d109      	bne.n	8000cc0 <__libc_init_array+0x24>
 8000cac:	4d0b      	ldr	r5, [pc, #44]	@ (8000cdc <__libc_init_array+0x40>)
 8000cae:	4c0c      	ldr	r4, [pc, #48]	@ (8000ce0 <__libc_init_array+0x44>)
 8000cb0:	f000 fdb8 	bl	8001824 <_init>
 8000cb4:	1b64      	subs	r4, r4, r5
 8000cb6:	10a4      	asrs	r4, r4, #2
 8000cb8:	2600      	movs	r6, #0
 8000cba:	42a6      	cmp	r6, r4
 8000cbc:	d105      	bne.n	8000cca <__libc_init_array+0x2e>
 8000cbe:	bd70      	pop	{r4, r5, r6, pc}
 8000cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cc4:	4798      	blx	r3
 8000cc6:	3601      	adds	r6, #1
 8000cc8:	e7ee      	b.n	8000ca8 <__libc_init_array+0xc>
 8000cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cce:	4798      	blx	r3
 8000cd0:	3601      	adds	r6, #1
 8000cd2:	e7f2      	b.n	8000cba <__libc_init_array+0x1e>
 8000cd4:	08001894 	.word	0x08001894
 8000cd8:	08001894 	.word	0x08001894
 8000cdc:	08001894 	.word	0x08001894
 8000ce0:	08001898 	.word	0x08001898

08000ce4 <__retarget_lock_init_recursive>:
 8000ce4:	4770      	bx	lr

08000ce6 <__retarget_lock_acquire_recursive>:
 8000ce6:	4770      	bx	lr

08000ce8 <__retarget_lock_release_recursive>:
 8000ce8:	4770      	bx	lr
	...

08000cec <_free_r>:
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	4605      	mov	r5, r0
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	d041      	beq.n	8000d78 <_free_r+0x8c>
 8000cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000cf8:	1f0c      	subs	r4, r1, #4
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bfb8      	it	lt
 8000cfe:	18e4      	addlt	r4, r4, r3
 8000d00:	f000 f8e0 	bl	8000ec4 <__malloc_lock>
 8000d04:	4a1d      	ldr	r2, [pc, #116]	@ (8000d7c <_free_r+0x90>)
 8000d06:	6813      	ldr	r3, [r2, #0]
 8000d08:	b933      	cbnz	r3, 8000d18 <_free_r+0x2c>
 8000d0a:	6063      	str	r3, [r4, #4]
 8000d0c:	6014      	str	r4, [r2, #0]
 8000d0e:	4628      	mov	r0, r5
 8000d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d14:	f000 b8dc 	b.w	8000ed0 <__malloc_unlock>
 8000d18:	42a3      	cmp	r3, r4
 8000d1a:	d908      	bls.n	8000d2e <_free_r+0x42>
 8000d1c:	6820      	ldr	r0, [r4, #0]
 8000d1e:	1821      	adds	r1, r4, r0
 8000d20:	428b      	cmp	r3, r1
 8000d22:	bf01      	itttt	eq
 8000d24:	6819      	ldreq	r1, [r3, #0]
 8000d26:	685b      	ldreq	r3, [r3, #4]
 8000d28:	1809      	addeq	r1, r1, r0
 8000d2a:	6021      	streq	r1, [r4, #0]
 8000d2c:	e7ed      	b.n	8000d0a <_free_r+0x1e>
 8000d2e:	461a      	mov	r2, r3
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	b10b      	cbz	r3, 8000d38 <_free_r+0x4c>
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d9fa      	bls.n	8000d2e <_free_r+0x42>
 8000d38:	6811      	ldr	r1, [r2, #0]
 8000d3a:	1850      	adds	r0, r2, r1
 8000d3c:	42a0      	cmp	r0, r4
 8000d3e:	d10b      	bne.n	8000d58 <_free_r+0x6c>
 8000d40:	6820      	ldr	r0, [r4, #0]
 8000d42:	4401      	add	r1, r0
 8000d44:	1850      	adds	r0, r2, r1
 8000d46:	4283      	cmp	r3, r0
 8000d48:	6011      	str	r1, [r2, #0]
 8000d4a:	d1e0      	bne.n	8000d0e <_free_r+0x22>
 8000d4c:	6818      	ldr	r0, [r3, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	6053      	str	r3, [r2, #4]
 8000d52:	4408      	add	r0, r1
 8000d54:	6010      	str	r0, [r2, #0]
 8000d56:	e7da      	b.n	8000d0e <_free_r+0x22>
 8000d58:	d902      	bls.n	8000d60 <_free_r+0x74>
 8000d5a:	230c      	movs	r3, #12
 8000d5c:	602b      	str	r3, [r5, #0]
 8000d5e:	e7d6      	b.n	8000d0e <_free_r+0x22>
 8000d60:	6820      	ldr	r0, [r4, #0]
 8000d62:	1821      	adds	r1, r4, r0
 8000d64:	428b      	cmp	r3, r1
 8000d66:	bf04      	itt	eq
 8000d68:	6819      	ldreq	r1, [r3, #0]
 8000d6a:	685b      	ldreq	r3, [r3, #4]
 8000d6c:	6063      	str	r3, [r4, #4]
 8000d6e:	bf04      	itt	eq
 8000d70:	1809      	addeq	r1, r1, r0
 8000d72:	6021      	streq	r1, [r4, #0]
 8000d74:	6054      	str	r4, [r2, #4]
 8000d76:	e7ca      	b.n	8000d0e <_free_r+0x22>
 8000d78:	bd38      	pop	{r3, r4, r5, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200014b0 	.word	0x200014b0

08000d80 <sbrk_aligned>:
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	4e0f      	ldr	r6, [pc, #60]	@ (8000dc0 <sbrk_aligned+0x40>)
 8000d84:	460c      	mov	r4, r1
 8000d86:	6831      	ldr	r1, [r6, #0]
 8000d88:	4605      	mov	r5, r0
 8000d8a:	b911      	cbnz	r1, 8000d92 <sbrk_aligned+0x12>
 8000d8c:	f000 fcb6 	bl	80016fc <_sbrk_r>
 8000d90:	6030      	str	r0, [r6, #0]
 8000d92:	4621      	mov	r1, r4
 8000d94:	4628      	mov	r0, r5
 8000d96:	f000 fcb1 	bl	80016fc <_sbrk_r>
 8000d9a:	1c43      	adds	r3, r0, #1
 8000d9c:	d103      	bne.n	8000da6 <sbrk_aligned+0x26>
 8000d9e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000da2:	4620      	mov	r0, r4
 8000da4:	bd70      	pop	{r4, r5, r6, pc}
 8000da6:	1cc4      	adds	r4, r0, #3
 8000da8:	f024 0403 	bic.w	r4, r4, #3
 8000dac:	42a0      	cmp	r0, r4
 8000dae:	d0f8      	beq.n	8000da2 <sbrk_aligned+0x22>
 8000db0:	1a21      	subs	r1, r4, r0
 8000db2:	4628      	mov	r0, r5
 8000db4:	f000 fca2 	bl	80016fc <_sbrk_r>
 8000db8:	3001      	adds	r0, #1
 8000dba:	d1f2      	bne.n	8000da2 <sbrk_aligned+0x22>
 8000dbc:	e7ef      	b.n	8000d9e <sbrk_aligned+0x1e>
 8000dbe:	bf00      	nop
 8000dc0:	200014ac 	.word	0x200014ac

08000dc4 <_malloc_r>:
 8000dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000dc8:	1ccd      	adds	r5, r1, #3
 8000dca:	f025 0503 	bic.w	r5, r5, #3
 8000dce:	3508      	adds	r5, #8
 8000dd0:	2d0c      	cmp	r5, #12
 8000dd2:	bf38      	it	cc
 8000dd4:	250c      	movcc	r5, #12
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	4606      	mov	r6, r0
 8000dda:	db01      	blt.n	8000de0 <_malloc_r+0x1c>
 8000ddc:	42a9      	cmp	r1, r5
 8000dde:	d904      	bls.n	8000dea <_malloc_r+0x26>
 8000de0:	230c      	movs	r3, #12
 8000de2:	6033      	str	r3, [r6, #0]
 8000de4:	2000      	movs	r0, #0
 8000de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ec0 <_malloc_r+0xfc>
 8000dee:	f000 f869 	bl	8000ec4 <__malloc_lock>
 8000df2:	f8d8 3000 	ldr.w	r3, [r8]
 8000df6:	461c      	mov	r4, r3
 8000df8:	bb44      	cbnz	r4, 8000e4c <_malloc_r+0x88>
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	f7ff ffbf 	bl	8000d80 <sbrk_aligned>
 8000e02:	1c43      	adds	r3, r0, #1
 8000e04:	4604      	mov	r4, r0
 8000e06:	d158      	bne.n	8000eba <_malloc_r+0xf6>
 8000e08:	f8d8 4000 	ldr.w	r4, [r8]
 8000e0c:	4627      	mov	r7, r4
 8000e0e:	2f00      	cmp	r7, #0
 8000e10:	d143      	bne.n	8000e9a <_malloc_r+0xd6>
 8000e12:	2c00      	cmp	r4, #0
 8000e14:	d04b      	beq.n	8000eae <_malloc_r+0xea>
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	eb04 0903 	add.w	r9, r4, r3
 8000e20:	f000 fc6c 	bl	80016fc <_sbrk_r>
 8000e24:	4581      	cmp	r9, r0
 8000e26:	d142      	bne.n	8000eae <_malloc_r+0xea>
 8000e28:	6821      	ldr	r1, [r4, #0]
 8000e2a:	1a6d      	subs	r5, r5, r1
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	4630      	mov	r0, r6
 8000e30:	f7ff ffa6 	bl	8000d80 <sbrk_aligned>
 8000e34:	3001      	adds	r0, #1
 8000e36:	d03a      	beq.n	8000eae <_malloc_r+0xea>
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	442b      	add	r3, r5
 8000e3c:	6023      	str	r3, [r4, #0]
 8000e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	bb62      	cbnz	r2, 8000ea0 <_malloc_r+0xdc>
 8000e46:	f8c8 7000 	str.w	r7, [r8]
 8000e4a:	e00f      	b.n	8000e6c <_malloc_r+0xa8>
 8000e4c:	6822      	ldr	r2, [r4, #0]
 8000e4e:	1b52      	subs	r2, r2, r5
 8000e50:	d420      	bmi.n	8000e94 <_malloc_r+0xd0>
 8000e52:	2a0b      	cmp	r2, #11
 8000e54:	d917      	bls.n	8000e86 <_malloc_r+0xc2>
 8000e56:	1961      	adds	r1, r4, r5
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	6025      	str	r5, [r4, #0]
 8000e5c:	bf18      	it	ne
 8000e5e:	6059      	strne	r1, [r3, #4]
 8000e60:	6863      	ldr	r3, [r4, #4]
 8000e62:	bf08      	it	eq
 8000e64:	f8c8 1000 	streq.w	r1, [r8]
 8000e68:	5162      	str	r2, [r4, r5]
 8000e6a:	604b      	str	r3, [r1, #4]
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	f000 f82f 	bl	8000ed0 <__malloc_unlock>
 8000e72:	f104 000b 	add.w	r0, r4, #11
 8000e76:	1d23      	adds	r3, r4, #4
 8000e78:	f020 0007 	bic.w	r0, r0, #7
 8000e7c:	1ac2      	subs	r2, r0, r3
 8000e7e:	bf1c      	itt	ne
 8000e80:	1a1b      	subne	r3, r3, r0
 8000e82:	50a3      	strne	r3, [r4, r2]
 8000e84:	e7af      	b.n	8000de6 <_malloc_r+0x22>
 8000e86:	6862      	ldr	r2, [r4, #4]
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	bf0c      	ite	eq
 8000e8c:	f8c8 2000 	streq.w	r2, [r8]
 8000e90:	605a      	strne	r2, [r3, #4]
 8000e92:	e7eb      	b.n	8000e6c <_malloc_r+0xa8>
 8000e94:	4623      	mov	r3, r4
 8000e96:	6864      	ldr	r4, [r4, #4]
 8000e98:	e7ae      	b.n	8000df8 <_malloc_r+0x34>
 8000e9a:	463c      	mov	r4, r7
 8000e9c:	687f      	ldr	r7, [r7, #4]
 8000e9e:	e7b6      	b.n	8000e0e <_malloc_r+0x4a>
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	42a3      	cmp	r3, r4
 8000ea6:	d1fb      	bne.n	8000ea0 <_malloc_r+0xdc>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	6053      	str	r3, [r2, #4]
 8000eac:	e7de      	b.n	8000e6c <_malloc_r+0xa8>
 8000eae:	230c      	movs	r3, #12
 8000eb0:	6033      	str	r3, [r6, #0]
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	f000 f80c 	bl	8000ed0 <__malloc_unlock>
 8000eb8:	e794      	b.n	8000de4 <_malloc_r+0x20>
 8000eba:	6005      	str	r5, [r0, #0]
 8000ebc:	e7d6      	b.n	8000e6c <_malloc_r+0xa8>
 8000ebe:	bf00      	nop
 8000ec0:	200014b0 	.word	0x200014b0

08000ec4 <__malloc_lock>:
 8000ec4:	4801      	ldr	r0, [pc, #4]	@ (8000ecc <__malloc_lock+0x8>)
 8000ec6:	f7ff bf0e 	b.w	8000ce6 <__retarget_lock_acquire_recursive>
 8000eca:	bf00      	nop
 8000ecc:	200014a8 	.word	0x200014a8

08000ed0 <__malloc_unlock>:
 8000ed0:	4801      	ldr	r0, [pc, #4]	@ (8000ed8 <__malloc_unlock+0x8>)
 8000ed2:	f7ff bf09 	b.w	8000ce8 <__retarget_lock_release_recursive>
 8000ed6:	bf00      	nop
 8000ed8:	200014a8 	.word	0x200014a8

08000edc <__sfputc_r>:
 8000edc:	6893      	ldr	r3, [r2, #8]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	b410      	push	{r4}
 8000ee4:	6093      	str	r3, [r2, #8]
 8000ee6:	da08      	bge.n	8000efa <__sfputc_r+0x1e>
 8000ee8:	6994      	ldr	r4, [r2, #24]
 8000eea:	42a3      	cmp	r3, r4
 8000eec:	db01      	blt.n	8000ef2 <__sfputc_r+0x16>
 8000eee:	290a      	cmp	r1, #10
 8000ef0:	d103      	bne.n	8000efa <__sfputc_r+0x1e>
 8000ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ef6:	f000 bb6d 	b.w	80015d4 <__swbuf_r>
 8000efa:	6813      	ldr	r3, [r2, #0]
 8000efc:	1c58      	adds	r0, r3, #1
 8000efe:	6010      	str	r0, [r2, #0]
 8000f00:	7019      	strb	r1, [r3, #0]
 8000f02:	4608      	mov	r0, r1
 8000f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <__sfputs_r>:
 8000f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0c:	4606      	mov	r6, r0
 8000f0e:	460f      	mov	r7, r1
 8000f10:	4614      	mov	r4, r2
 8000f12:	18d5      	adds	r5, r2, r3
 8000f14:	42ac      	cmp	r4, r5
 8000f16:	d101      	bne.n	8000f1c <__sfputs_r+0x12>
 8000f18:	2000      	movs	r0, #0
 8000f1a:	e007      	b.n	8000f2c <__sfputs_r+0x22>
 8000f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f20:	463a      	mov	r2, r7
 8000f22:	4630      	mov	r0, r6
 8000f24:	f7ff ffda 	bl	8000edc <__sfputc_r>
 8000f28:	1c43      	adds	r3, r0, #1
 8000f2a:	d1f3      	bne.n	8000f14 <__sfputs_r+0xa>
 8000f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f30 <_vfiprintf_r>:
 8000f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f34:	460d      	mov	r5, r1
 8000f36:	b09d      	sub	sp, #116	@ 0x74
 8000f38:	4614      	mov	r4, r2
 8000f3a:	4698      	mov	r8, r3
 8000f3c:	4606      	mov	r6, r0
 8000f3e:	b118      	cbz	r0, 8000f48 <_vfiprintf_r+0x18>
 8000f40:	6a03      	ldr	r3, [r0, #32]
 8000f42:	b90b      	cbnz	r3, 8000f48 <_vfiprintf_r+0x18>
 8000f44:	f7ff fdca 	bl	8000adc <__sinit>
 8000f48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f4a:	07d9      	lsls	r1, r3, #31
 8000f4c:	d405      	bmi.n	8000f5a <_vfiprintf_r+0x2a>
 8000f4e:	89ab      	ldrh	r3, [r5, #12]
 8000f50:	059a      	lsls	r2, r3, #22
 8000f52:	d402      	bmi.n	8000f5a <_vfiprintf_r+0x2a>
 8000f54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f56:	f7ff fec6 	bl	8000ce6 <__retarget_lock_acquire_recursive>
 8000f5a:	89ab      	ldrh	r3, [r5, #12]
 8000f5c:	071b      	lsls	r3, r3, #28
 8000f5e:	d501      	bpl.n	8000f64 <_vfiprintf_r+0x34>
 8000f60:	692b      	ldr	r3, [r5, #16]
 8000f62:	b99b      	cbnz	r3, 8000f8c <_vfiprintf_r+0x5c>
 8000f64:	4629      	mov	r1, r5
 8000f66:	4630      	mov	r0, r6
 8000f68:	f000 fb72 	bl	8001650 <__swsetup_r>
 8000f6c:	b170      	cbz	r0, 8000f8c <_vfiprintf_r+0x5c>
 8000f6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f70:	07dc      	lsls	r4, r3, #31
 8000f72:	d504      	bpl.n	8000f7e <_vfiprintf_r+0x4e>
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f78:	b01d      	add	sp, #116	@ 0x74
 8000f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f7e:	89ab      	ldrh	r3, [r5, #12]
 8000f80:	0598      	lsls	r0, r3, #22
 8000f82:	d4f7      	bmi.n	8000f74 <_vfiprintf_r+0x44>
 8000f84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f86:	f7ff feaf 	bl	8000ce8 <__retarget_lock_release_recursive>
 8000f8a:	e7f3      	b.n	8000f74 <_vfiprintf_r+0x44>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f90:	2320      	movs	r3, #32
 8000f92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000f96:	f8cd 800c 	str.w	r8, [sp, #12]
 8000f9a:	2330      	movs	r3, #48	@ 0x30
 8000f9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800114c <_vfiprintf_r+0x21c>
 8000fa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000fa4:	f04f 0901 	mov.w	r9, #1
 8000fa8:	4623      	mov	r3, r4
 8000faa:	469a      	mov	sl, r3
 8000fac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fb0:	b10a      	cbz	r2, 8000fb6 <_vfiprintf_r+0x86>
 8000fb2:	2a25      	cmp	r2, #37	@ 0x25
 8000fb4:	d1f9      	bne.n	8000faa <_vfiprintf_r+0x7a>
 8000fb6:	ebba 0b04 	subs.w	fp, sl, r4
 8000fba:	d00b      	beq.n	8000fd4 <_vfiprintf_r+0xa4>
 8000fbc:	465b      	mov	r3, fp
 8000fbe:	4622      	mov	r2, r4
 8000fc0:	4629      	mov	r1, r5
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	f7ff ffa1 	bl	8000f0a <__sfputs_r>
 8000fc8:	3001      	adds	r0, #1
 8000fca:	f000 80a7 	beq.w	800111c <_vfiprintf_r+0x1ec>
 8000fce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000fd0:	445a      	add	r2, fp
 8000fd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8000fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 809f 	beq.w	800111c <_vfiprintf_r+0x1ec>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000fe8:	f10a 0a01 	add.w	sl, sl, #1
 8000fec:	9304      	str	r3, [sp, #16]
 8000fee:	9307      	str	r3, [sp, #28]
 8000ff0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000ff4:	931a      	str	r3, [sp, #104]	@ 0x68
 8000ff6:	4654      	mov	r4, sl
 8000ff8:	2205      	movs	r2, #5
 8000ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ffe:	4853      	ldr	r0, [pc, #332]	@ (800114c <_vfiprintf_r+0x21c>)
 8001000:	f7ff f906 	bl	8000210 <memchr>
 8001004:	9a04      	ldr	r2, [sp, #16]
 8001006:	b9d8      	cbnz	r0, 8001040 <_vfiprintf_r+0x110>
 8001008:	06d1      	lsls	r1, r2, #27
 800100a:	bf44      	itt	mi
 800100c:	2320      	movmi	r3, #32
 800100e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001012:	0713      	lsls	r3, r2, #28
 8001014:	bf44      	itt	mi
 8001016:	232b      	movmi	r3, #43	@ 0x2b
 8001018:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800101c:	f89a 3000 	ldrb.w	r3, [sl]
 8001020:	2b2a      	cmp	r3, #42	@ 0x2a
 8001022:	d015      	beq.n	8001050 <_vfiprintf_r+0x120>
 8001024:	9a07      	ldr	r2, [sp, #28]
 8001026:	4654      	mov	r4, sl
 8001028:	2000      	movs	r0, #0
 800102a:	f04f 0c0a 	mov.w	ip, #10
 800102e:	4621      	mov	r1, r4
 8001030:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001034:	3b30      	subs	r3, #48	@ 0x30
 8001036:	2b09      	cmp	r3, #9
 8001038:	d94b      	bls.n	80010d2 <_vfiprintf_r+0x1a2>
 800103a:	b1b0      	cbz	r0, 800106a <_vfiprintf_r+0x13a>
 800103c:	9207      	str	r2, [sp, #28]
 800103e:	e014      	b.n	800106a <_vfiprintf_r+0x13a>
 8001040:	eba0 0308 	sub.w	r3, r0, r8
 8001044:	fa09 f303 	lsl.w	r3, r9, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	9304      	str	r3, [sp, #16]
 800104c:	46a2      	mov	sl, r4
 800104e:	e7d2      	b.n	8000ff6 <_vfiprintf_r+0xc6>
 8001050:	9b03      	ldr	r3, [sp, #12]
 8001052:	1d19      	adds	r1, r3, #4
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	9103      	str	r1, [sp, #12]
 8001058:	2b00      	cmp	r3, #0
 800105a:	bfbb      	ittet	lt
 800105c:	425b      	neglt	r3, r3
 800105e:	f042 0202 	orrlt.w	r2, r2, #2
 8001062:	9307      	strge	r3, [sp, #28]
 8001064:	9307      	strlt	r3, [sp, #28]
 8001066:	bfb8      	it	lt
 8001068:	9204      	strlt	r2, [sp, #16]
 800106a:	7823      	ldrb	r3, [r4, #0]
 800106c:	2b2e      	cmp	r3, #46	@ 0x2e
 800106e:	d10a      	bne.n	8001086 <_vfiprintf_r+0x156>
 8001070:	7863      	ldrb	r3, [r4, #1]
 8001072:	2b2a      	cmp	r3, #42	@ 0x2a
 8001074:	d132      	bne.n	80010dc <_vfiprintf_r+0x1ac>
 8001076:	9b03      	ldr	r3, [sp, #12]
 8001078:	1d1a      	adds	r2, r3, #4
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	9203      	str	r2, [sp, #12]
 800107e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001082:	3402      	adds	r4, #2
 8001084:	9305      	str	r3, [sp, #20]
 8001086:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800115c <_vfiprintf_r+0x22c>
 800108a:	7821      	ldrb	r1, [r4, #0]
 800108c:	2203      	movs	r2, #3
 800108e:	4650      	mov	r0, sl
 8001090:	f7ff f8be 	bl	8000210 <memchr>
 8001094:	b138      	cbz	r0, 80010a6 <_vfiprintf_r+0x176>
 8001096:	9b04      	ldr	r3, [sp, #16]
 8001098:	eba0 000a 	sub.w	r0, r0, sl
 800109c:	2240      	movs	r2, #64	@ 0x40
 800109e:	4082      	lsls	r2, r0
 80010a0:	4313      	orrs	r3, r2
 80010a2:	3401      	adds	r4, #1
 80010a4:	9304      	str	r3, [sp, #16]
 80010a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010aa:	4829      	ldr	r0, [pc, #164]	@ (8001150 <_vfiprintf_r+0x220>)
 80010ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80010b0:	2206      	movs	r2, #6
 80010b2:	f7ff f8ad 	bl	8000210 <memchr>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	d03f      	beq.n	800113a <_vfiprintf_r+0x20a>
 80010ba:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <_vfiprintf_r+0x224>)
 80010bc:	bb1b      	cbnz	r3, 8001106 <_vfiprintf_r+0x1d6>
 80010be:	9b03      	ldr	r3, [sp, #12]
 80010c0:	3307      	adds	r3, #7
 80010c2:	f023 0307 	bic.w	r3, r3, #7
 80010c6:	3308      	adds	r3, #8
 80010c8:	9303      	str	r3, [sp, #12]
 80010ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80010cc:	443b      	add	r3, r7
 80010ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80010d0:	e76a      	b.n	8000fa8 <_vfiprintf_r+0x78>
 80010d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80010d6:	460c      	mov	r4, r1
 80010d8:	2001      	movs	r0, #1
 80010da:	e7a8      	b.n	800102e <_vfiprintf_r+0xfe>
 80010dc:	2300      	movs	r3, #0
 80010de:	3401      	adds	r4, #1
 80010e0:	9305      	str	r3, [sp, #20]
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 0c0a 	mov.w	ip, #10
 80010e8:	4620      	mov	r0, r4
 80010ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80010ee:	3a30      	subs	r2, #48	@ 0x30
 80010f0:	2a09      	cmp	r2, #9
 80010f2:	d903      	bls.n	80010fc <_vfiprintf_r+0x1cc>
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0c6      	beq.n	8001086 <_vfiprintf_r+0x156>
 80010f8:	9105      	str	r1, [sp, #20]
 80010fa:	e7c4      	b.n	8001086 <_vfiprintf_r+0x156>
 80010fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001100:	4604      	mov	r4, r0
 8001102:	2301      	movs	r3, #1
 8001104:	e7f0      	b.n	80010e8 <_vfiprintf_r+0x1b8>
 8001106:	ab03      	add	r3, sp, #12
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	462a      	mov	r2, r5
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <_vfiprintf_r+0x228>)
 800110e:	a904      	add	r1, sp, #16
 8001110:	4630      	mov	r0, r6
 8001112:	f3af 8000 	nop.w
 8001116:	4607      	mov	r7, r0
 8001118:	1c78      	adds	r0, r7, #1
 800111a:	d1d6      	bne.n	80010ca <_vfiprintf_r+0x19a>
 800111c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800111e:	07d9      	lsls	r1, r3, #31
 8001120:	d405      	bmi.n	800112e <_vfiprintf_r+0x1fe>
 8001122:	89ab      	ldrh	r3, [r5, #12]
 8001124:	059a      	lsls	r2, r3, #22
 8001126:	d402      	bmi.n	800112e <_vfiprintf_r+0x1fe>
 8001128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800112a:	f7ff fddd 	bl	8000ce8 <__retarget_lock_release_recursive>
 800112e:	89ab      	ldrh	r3, [r5, #12]
 8001130:	065b      	lsls	r3, r3, #25
 8001132:	f53f af1f 	bmi.w	8000f74 <_vfiprintf_r+0x44>
 8001136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001138:	e71e      	b.n	8000f78 <_vfiprintf_r+0x48>
 800113a:	ab03      	add	r3, sp, #12
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	462a      	mov	r2, r5
 8001140:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <_vfiprintf_r+0x228>)
 8001142:	a904      	add	r1, sp, #16
 8001144:	4630      	mov	r0, r6
 8001146:	f000 f879 	bl	800123c <_printf_i>
 800114a:	e7e4      	b.n	8001116 <_vfiprintf_r+0x1e6>
 800114c:	08001859 	.word	0x08001859
 8001150:	08001863 	.word	0x08001863
 8001154:	00000000 	.word	0x00000000
 8001158:	08000f0b 	.word	0x08000f0b
 800115c:	0800185f 	.word	0x0800185f

08001160 <_printf_common>:
 8001160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001164:	4616      	mov	r6, r2
 8001166:	4698      	mov	r8, r3
 8001168:	688a      	ldr	r2, [r1, #8]
 800116a:	690b      	ldr	r3, [r1, #16]
 800116c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001170:	4293      	cmp	r3, r2
 8001172:	bfb8      	it	lt
 8001174:	4613      	movlt	r3, r2
 8001176:	6033      	str	r3, [r6, #0]
 8001178:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800117c:	4607      	mov	r7, r0
 800117e:	460c      	mov	r4, r1
 8001180:	b10a      	cbz	r2, 8001186 <_printf_common+0x26>
 8001182:	3301      	adds	r3, #1
 8001184:	6033      	str	r3, [r6, #0]
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	0699      	lsls	r1, r3, #26
 800118a:	bf42      	ittt	mi
 800118c:	6833      	ldrmi	r3, [r6, #0]
 800118e:	3302      	addmi	r3, #2
 8001190:	6033      	strmi	r3, [r6, #0]
 8001192:	6825      	ldr	r5, [r4, #0]
 8001194:	f015 0506 	ands.w	r5, r5, #6
 8001198:	d106      	bne.n	80011a8 <_printf_common+0x48>
 800119a:	f104 0a19 	add.w	sl, r4, #25
 800119e:	68e3      	ldr	r3, [r4, #12]
 80011a0:	6832      	ldr	r2, [r6, #0]
 80011a2:	1a9b      	subs	r3, r3, r2
 80011a4:	42ab      	cmp	r3, r5
 80011a6:	dc26      	bgt.n	80011f6 <_printf_common+0x96>
 80011a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80011ac:	6822      	ldr	r2, [r4, #0]
 80011ae:	3b00      	subs	r3, #0
 80011b0:	bf18      	it	ne
 80011b2:	2301      	movne	r3, #1
 80011b4:	0692      	lsls	r2, r2, #26
 80011b6:	d42b      	bmi.n	8001210 <_printf_common+0xb0>
 80011b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80011bc:	4641      	mov	r1, r8
 80011be:	4638      	mov	r0, r7
 80011c0:	47c8      	blx	r9
 80011c2:	3001      	adds	r0, #1
 80011c4:	d01e      	beq.n	8001204 <_printf_common+0xa4>
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	6922      	ldr	r2, [r4, #16]
 80011ca:	f003 0306 	and.w	r3, r3, #6
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf02      	ittt	eq
 80011d2:	68e5      	ldreq	r5, [r4, #12]
 80011d4:	6833      	ldreq	r3, [r6, #0]
 80011d6:	1aed      	subeq	r5, r5, r3
 80011d8:	68a3      	ldr	r3, [r4, #8]
 80011da:	bf0c      	ite	eq
 80011dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80011e0:	2500      	movne	r5, #0
 80011e2:	4293      	cmp	r3, r2
 80011e4:	bfc4      	itt	gt
 80011e6:	1a9b      	subgt	r3, r3, r2
 80011e8:	18ed      	addgt	r5, r5, r3
 80011ea:	2600      	movs	r6, #0
 80011ec:	341a      	adds	r4, #26
 80011ee:	42b5      	cmp	r5, r6
 80011f0:	d11a      	bne.n	8001228 <_printf_common+0xc8>
 80011f2:	2000      	movs	r0, #0
 80011f4:	e008      	b.n	8001208 <_printf_common+0xa8>
 80011f6:	2301      	movs	r3, #1
 80011f8:	4652      	mov	r2, sl
 80011fa:	4641      	mov	r1, r8
 80011fc:	4638      	mov	r0, r7
 80011fe:	47c8      	blx	r9
 8001200:	3001      	adds	r0, #1
 8001202:	d103      	bne.n	800120c <_printf_common+0xac>
 8001204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800120c:	3501      	adds	r5, #1
 800120e:	e7c6      	b.n	800119e <_printf_common+0x3e>
 8001210:	18e1      	adds	r1, r4, r3
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	2030      	movs	r0, #48	@ 0x30
 8001216:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800121a:	4422      	add	r2, r4
 800121c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001220:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001224:	3302      	adds	r3, #2
 8001226:	e7c7      	b.n	80011b8 <_printf_common+0x58>
 8001228:	2301      	movs	r3, #1
 800122a:	4622      	mov	r2, r4
 800122c:	4641      	mov	r1, r8
 800122e:	4638      	mov	r0, r7
 8001230:	47c8      	blx	r9
 8001232:	3001      	adds	r0, #1
 8001234:	d0e6      	beq.n	8001204 <_printf_common+0xa4>
 8001236:	3601      	adds	r6, #1
 8001238:	e7d9      	b.n	80011ee <_printf_common+0x8e>
	...

0800123c <_printf_i>:
 800123c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001240:	7e0f      	ldrb	r7, [r1, #24]
 8001242:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001244:	2f78      	cmp	r7, #120	@ 0x78
 8001246:	4691      	mov	r9, r2
 8001248:	4680      	mov	r8, r0
 800124a:	460c      	mov	r4, r1
 800124c:	469a      	mov	sl, r3
 800124e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001252:	d807      	bhi.n	8001264 <_printf_i+0x28>
 8001254:	2f62      	cmp	r7, #98	@ 0x62
 8001256:	d80a      	bhi.n	800126e <_printf_i+0x32>
 8001258:	2f00      	cmp	r7, #0
 800125a:	f000 80d2 	beq.w	8001402 <_printf_i+0x1c6>
 800125e:	2f58      	cmp	r7, #88	@ 0x58
 8001260:	f000 80b9 	beq.w	80013d6 <_printf_i+0x19a>
 8001264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001268:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800126c:	e03a      	b.n	80012e4 <_printf_i+0xa8>
 800126e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001272:	2b15      	cmp	r3, #21
 8001274:	d8f6      	bhi.n	8001264 <_printf_i+0x28>
 8001276:	a101      	add	r1, pc, #4	@ (adr r1, 800127c <_printf_i+0x40>)
 8001278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800127c:	080012d5 	.word	0x080012d5
 8001280:	080012e9 	.word	0x080012e9
 8001284:	08001265 	.word	0x08001265
 8001288:	08001265 	.word	0x08001265
 800128c:	08001265 	.word	0x08001265
 8001290:	08001265 	.word	0x08001265
 8001294:	080012e9 	.word	0x080012e9
 8001298:	08001265 	.word	0x08001265
 800129c:	08001265 	.word	0x08001265
 80012a0:	08001265 	.word	0x08001265
 80012a4:	08001265 	.word	0x08001265
 80012a8:	080013e9 	.word	0x080013e9
 80012ac:	08001313 	.word	0x08001313
 80012b0:	080013a3 	.word	0x080013a3
 80012b4:	08001265 	.word	0x08001265
 80012b8:	08001265 	.word	0x08001265
 80012bc:	0800140b 	.word	0x0800140b
 80012c0:	08001265 	.word	0x08001265
 80012c4:	08001313 	.word	0x08001313
 80012c8:	08001265 	.word	0x08001265
 80012cc:	08001265 	.word	0x08001265
 80012d0:	080013ab 	.word	0x080013ab
 80012d4:	6833      	ldr	r3, [r6, #0]
 80012d6:	1d1a      	adds	r2, r3, #4
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6032      	str	r2, [r6, #0]
 80012dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80012e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80012e4:	2301      	movs	r3, #1
 80012e6:	e09d      	b.n	8001424 <_printf_i+0x1e8>
 80012e8:	6833      	ldr	r3, [r6, #0]
 80012ea:	6820      	ldr	r0, [r4, #0]
 80012ec:	1d19      	adds	r1, r3, #4
 80012ee:	6031      	str	r1, [r6, #0]
 80012f0:	0606      	lsls	r6, r0, #24
 80012f2:	d501      	bpl.n	80012f8 <_printf_i+0xbc>
 80012f4:	681d      	ldr	r5, [r3, #0]
 80012f6:	e003      	b.n	8001300 <_printf_i+0xc4>
 80012f8:	0645      	lsls	r5, r0, #25
 80012fa:	d5fb      	bpl.n	80012f4 <_printf_i+0xb8>
 80012fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001300:	2d00      	cmp	r5, #0
 8001302:	da03      	bge.n	800130c <_printf_i+0xd0>
 8001304:	232d      	movs	r3, #45	@ 0x2d
 8001306:	426d      	negs	r5, r5
 8001308:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800130c:	4859      	ldr	r0, [pc, #356]	@ (8001474 <_printf_i+0x238>)
 800130e:	230a      	movs	r3, #10
 8001310:	e011      	b.n	8001336 <_printf_i+0xfa>
 8001312:	6821      	ldr	r1, [r4, #0]
 8001314:	6833      	ldr	r3, [r6, #0]
 8001316:	0608      	lsls	r0, r1, #24
 8001318:	f853 5b04 	ldr.w	r5, [r3], #4
 800131c:	d402      	bmi.n	8001324 <_printf_i+0xe8>
 800131e:	0649      	lsls	r1, r1, #25
 8001320:	bf48      	it	mi
 8001322:	b2ad      	uxthmi	r5, r5
 8001324:	2f6f      	cmp	r7, #111	@ 0x6f
 8001326:	4853      	ldr	r0, [pc, #332]	@ (8001474 <_printf_i+0x238>)
 8001328:	6033      	str	r3, [r6, #0]
 800132a:	bf14      	ite	ne
 800132c:	230a      	movne	r3, #10
 800132e:	2308      	moveq	r3, #8
 8001330:	2100      	movs	r1, #0
 8001332:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001336:	6866      	ldr	r6, [r4, #4]
 8001338:	60a6      	str	r6, [r4, #8]
 800133a:	2e00      	cmp	r6, #0
 800133c:	bfa2      	ittt	ge
 800133e:	6821      	ldrge	r1, [r4, #0]
 8001340:	f021 0104 	bicge.w	r1, r1, #4
 8001344:	6021      	strge	r1, [r4, #0]
 8001346:	b90d      	cbnz	r5, 800134c <_printf_i+0x110>
 8001348:	2e00      	cmp	r6, #0
 800134a:	d04b      	beq.n	80013e4 <_printf_i+0x1a8>
 800134c:	4616      	mov	r6, r2
 800134e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001352:	fb03 5711 	mls	r7, r3, r1, r5
 8001356:	5dc7      	ldrb	r7, [r0, r7]
 8001358:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800135c:	462f      	mov	r7, r5
 800135e:	42bb      	cmp	r3, r7
 8001360:	460d      	mov	r5, r1
 8001362:	d9f4      	bls.n	800134e <_printf_i+0x112>
 8001364:	2b08      	cmp	r3, #8
 8001366:	d10b      	bne.n	8001380 <_printf_i+0x144>
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	07df      	lsls	r7, r3, #31
 800136c:	d508      	bpl.n	8001380 <_printf_i+0x144>
 800136e:	6923      	ldr	r3, [r4, #16]
 8001370:	6861      	ldr	r1, [r4, #4]
 8001372:	4299      	cmp	r1, r3
 8001374:	bfde      	ittt	le
 8001376:	2330      	movle	r3, #48	@ 0x30
 8001378:	f806 3c01 	strble.w	r3, [r6, #-1]
 800137c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001380:	1b92      	subs	r2, r2, r6
 8001382:	6122      	str	r2, [r4, #16]
 8001384:	f8cd a000 	str.w	sl, [sp]
 8001388:	464b      	mov	r3, r9
 800138a:	aa03      	add	r2, sp, #12
 800138c:	4621      	mov	r1, r4
 800138e:	4640      	mov	r0, r8
 8001390:	f7ff fee6 	bl	8001160 <_printf_common>
 8001394:	3001      	adds	r0, #1
 8001396:	d14a      	bne.n	800142e <_printf_i+0x1f2>
 8001398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800139c:	b004      	add	sp, #16
 800139e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013a2:	6823      	ldr	r3, [r4, #0]
 80013a4:	f043 0320 	orr.w	r3, r3, #32
 80013a8:	6023      	str	r3, [r4, #0]
 80013aa:	4833      	ldr	r0, [pc, #204]	@ (8001478 <_printf_i+0x23c>)
 80013ac:	2778      	movs	r7, #120	@ 0x78
 80013ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	6831      	ldr	r1, [r6, #0]
 80013b6:	061f      	lsls	r7, r3, #24
 80013b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80013bc:	d402      	bmi.n	80013c4 <_printf_i+0x188>
 80013be:	065f      	lsls	r7, r3, #25
 80013c0:	bf48      	it	mi
 80013c2:	b2ad      	uxthmi	r5, r5
 80013c4:	6031      	str	r1, [r6, #0]
 80013c6:	07d9      	lsls	r1, r3, #31
 80013c8:	bf44      	itt	mi
 80013ca:	f043 0320 	orrmi.w	r3, r3, #32
 80013ce:	6023      	strmi	r3, [r4, #0]
 80013d0:	b11d      	cbz	r5, 80013da <_printf_i+0x19e>
 80013d2:	2310      	movs	r3, #16
 80013d4:	e7ac      	b.n	8001330 <_printf_i+0xf4>
 80013d6:	4827      	ldr	r0, [pc, #156]	@ (8001474 <_printf_i+0x238>)
 80013d8:	e7e9      	b.n	80013ae <_printf_i+0x172>
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	f023 0320 	bic.w	r3, r3, #32
 80013e0:	6023      	str	r3, [r4, #0]
 80013e2:	e7f6      	b.n	80013d2 <_printf_i+0x196>
 80013e4:	4616      	mov	r6, r2
 80013e6:	e7bd      	b.n	8001364 <_printf_i+0x128>
 80013e8:	6833      	ldr	r3, [r6, #0]
 80013ea:	6825      	ldr	r5, [r4, #0]
 80013ec:	6961      	ldr	r1, [r4, #20]
 80013ee:	1d18      	adds	r0, r3, #4
 80013f0:	6030      	str	r0, [r6, #0]
 80013f2:	062e      	lsls	r6, r5, #24
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	d501      	bpl.n	80013fc <_printf_i+0x1c0>
 80013f8:	6019      	str	r1, [r3, #0]
 80013fa:	e002      	b.n	8001402 <_printf_i+0x1c6>
 80013fc:	0668      	lsls	r0, r5, #25
 80013fe:	d5fb      	bpl.n	80013f8 <_printf_i+0x1bc>
 8001400:	8019      	strh	r1, [r3, #0]
 8001402:	2300      	movs	r3, #0
 8001404:	6123      	str	r3, [r4, #16]
 8001406:	4616      	mov	r6, r2
 8001408:	e7bc      	b.n	8001384 <_printf_i+0x148>
 800140a:	6833      	ldr	r3, [r6, #0]
 800140c:	1d1a      	adds	r2, r3, #4
 800140e:	6032      	str	r2, [r6, #0]
 8001410:	681e      	ldr	r6, [r3, #0]
 8001412:	6862      	ldr	r2, [r4, #4]
 8001414:	2100      	movs	r1, #0
 8001416:	4630      	mov	r0, r6
 8001418:	f7fe fefa 	bl	8000210 <memchr>
 800141c:	b108      	cbz	r0, 8001422 <_printf_i+0x1e6>
 800141e:	1b80      	subs	r0, r0, r6
 8001420:	6060      	str	r0, [r4, #4]
 8001422:	6863      	ldr	r3, [r4, #4]
 8001424:	6123      	str	r3, [r4, #16]
 8001426:	2300      	movs	r3, #0
 8001428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800142c:	e7aa      	b.n	8001384 <_printf_i+0x148>
 800142e:	6923      	ldr	r3, [r4, #16]
 8001430:	4632      	mov	r2, r6
 8001432:	4649      	mov	r1, r9
 8001434:	4640      	mov	r0, r8
 8001436:	47d0      	blx	sl
 8001438:	3001      	adds	r0, #1
 800143a:	d0ad      	beq.n	8001398 <_printf_i+0x15c>
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	079b      	lsls	r3, r3, #30
 8001440:	d413      	bmi.n	800146a <_printf_i+0x22e>
 8001442:	68e0      	ldr	r0, [r4, #12]
 8001444:	9b03      	ldr	r3, [sp, #12]
 8001446:	4298      	cmp	r0, r3
 8001448:	bfb8      	it	lt
 800144a:	4618      	movlt	r0, r3
 800144c:	e7a6      	b.n	800139c <_printf_i+0x160>
 800144e:	2301      	movs	r3, #1
 8001450:	4632      	mov	r2, r6
 8001452:	4649      	mov	r1, r9
 8001454:	4640      	mov	r0, r8
 8001456:	47d0      	blx	sl
 8001458:	3001      	adds	r0, #1
 800145a:	d09d      	beq.n	8001398 <_printf_i+0x15c>
 800145c:	3501      	adds	r5, #1
 800145e:	68e3      	ldr	r3, [r4, #12]
 8001460:	9903      	ldr	r1, [sp, #12]
 8001462:	1a5b      	subs	r3, r3, r1
 8001464:	42ab      	cmp	r3, r5
 8001466:	dcf2      	bgt.n	800144e <_printf_i+0x212>
 8001468:	e7eb      	b.n	8001442 <_printf_i+0x206>
 800146a:	2500      	movs	r5, #0
 800146c:	f104 0619 	add.w	r6, r4, #25
 8001470:	e7f5      	b.n	800145e <_printf_i+0x222>
 8001472:	bf00      	nop
 8001474:	0800186a 	.word	0x0800186a
 8001478:	0800187b 	.word	0x0800187b

0800147c <__sflush_r>:
 800147c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001484:	0716      	lsls	r6, r2, #28
 8001486:	4605      	mov	r5, r0
 8001488:	460c      	mov	r4, r1
 800148a:	d454      	bmi.n	8001536 <__sflush_r+0xba>
 800148c:	684b      	ldr	r3, [r1, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	dc02      	bgt.n	8001498 <__sflush_r+0x1c>
 8001492:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001494:	2b00      	cmp	r3, #0
 8001496:	dd48      	ble.n	800152a <__sflush_r+0xae>
 8001498:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800149a:	2e00      	cmp	r6, #0
 800149c:	d045      	beq.n	800152a <__sflush_r+0xae>
 800149e:	2300      	movs	r3, #0
 80014a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80014a4:	682f      	ldr	r7, [r5, #0]
 80014a6:	6a21      	ldr	r1, [r4, #32]
 80014a8:	602b      	str	r3, [r5, #0]
 80014aa:	d030      	beq.n	800150e <__sflush_r+0x92>
 80014ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80014ae:	89a3      	ldrh	r3, [r4, #12]
 80014b0:	0759      	lsls	r1, r3, #29
 80014b2:	d505      	bpl.n	80014c0 <__sflush_r+0x44>
 80014b4:	6863      	ldr	r3, [r4, #4]
 80014b6:	1ad2      	subs	r2, r2, r3
 80014b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80014ba:	b10b      	cbz	r3, 80014c0 <__sflush_r+0x44>
 80014bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80014be:	1ad2      	subs	r2, r2, r3
 80014c0:	2300      	movs	r3, #0
 80014c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80014c4:	6a21      	ldr	r1, [r4, #32]
 80014c6:	4628      	mov	r0, r5
 80014c8:	47b0      	blx	r6
 80014ca:	1c43      	adds	r3, r0, #1
 80014cc:	89a3      	ldrh	r3, [r4, #12]
 80014ce:	d106      	bne.n	80014de <__sflush_r+0x62>
 80014d0:	6829      	ldr	r1, [r5, #0]
 80014d2:	291d      	cmp	r1, #29
 80014d4:	d82b      	bhi.n	800152e <__sflush_r+0xb2>
 80014d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001580 <__sflush_r+0x104>)
 80014d8:	410a      	asrs	r2, r1
 80014da:	07d6      	lsls	r6, r2, #31
 80014dc:	d427      	bmi.n	800152e <__sflush_r+0xb2>
 80014de:	2200      	movs	r2, #0
 80014e0:	6062      	str	r2, [r4, #4]
 80014e2:	04d9      	lsls	r1, r3, #19
 80014e4:	6922      	ldr	r2, [r4, #16]
 80014e6:	6022      	str	r2, [r4, #0]
 80014e8:	d504      	bpl.n	80014f4 <__sflush_r+0x78>
 80014ea:	1c42      	adds	r2, r0, #1
 80014ec:	d101      	bne.n	80014f2 <__sflush_r+0x76>
 80014ee:	682b      	ldr	r3, [r5, #0]
 80014f0:	b903      	cbnz	r3, 80014f4 <__sflush_r+0x78>
 80014f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80014f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80014f6:	602f      	str	r7, [r5, #0]
 80014f8:	b1b9      	cbz	r1, 800152a <__sflush_r+0xae>
 80014fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80014fe:	4299      	cmp	r1, r3
 8001500:	d002      	beq.n	8001508 <__sflush_r+0x8c>
 8001502:	4628      	mov	r0, r5
 8001504:	f7ff fbf2 	bl	8000cec <_free_r>
 8001508:	2300      	movs	r3, #0
 800150a:	6363      	str	r3, [r4, #52]	@ 0x34
 800150c:	e00d      	b.n	800152a <__sflush_r+0xae>
 800150e:	2301      	movs	r3, #1
 8001510:	4628      	mov	r0, r5
 8001512:	47b0      	blx	r6
 8001514:	4602      	mov	r2, r0
 8001516:	1c50      	adds	r0, r2, #1
 8001518:	d1c9      	bne.n	80014ae <__sflush_r+0x32>
 800151a:	682b      	ldr	r3, [r5, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0c6      	beq.n	80014ae <__sflush_r+0x32>
 8001520:	2b1d      	cmp	r3, #29
 8001522:	d001      	beq.n	8001528 <__sflush_r+0xac>
 8001524:	2b16      	cmp	r3, #22
 8001526:	d11e      	bne.n	8001566 <__sflush_r+0xea>
 8001528:	602f      	str	r7, [r5, #0]
 800152a:	2000      	movs	r0, #0
 800152c:	e022      	b.n	8001574 <__sflush_r+0xf8>
 800152e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001532:	b21b      	sxth	r3, r3
 8001534:	e01b      	b.n	800156e <__sflush_r+0xf2>
 8001536:	690f      	ldr	r7, [r1, #16]
 8001538:	2f00      	cmp	r7, #0
 800153a:	d0f6      	beq.n	800152a <__sflush_r+0xae>
 800153c:	0793      	lsls	r3, r2, #30
 800153e:	680e      	ldr	r6, [r1, #0]
 8001540:	bf08      	it	eq
 8001542:	694b      	ldreq	r3, [r1, #20]
 8001544:	600f      	str	r7, [r1, #0]
 8001546:	bf18      	it	ne
 8001548:	2300      	movne	r3, #0
 800154a:	eba6 0807 	sub.w	r8, r6, r7
 800154e:	608b      	str	r3, [r1, #8]
 8001550:	f1b8 0f00 	cmp.w	r8, #0
 8001554:	dde9      	ble.n	800152a <__sflush_r+0xae>
 8001556:	6a21      	ldr	r1, [r4, #32]
 8001558:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800155a:	4643      	mov	r3, r8
 800155c:	463a      	mov	r2, r7
 800155e:	4628      	mov	r0, r5
 8001560:	47b0      	blx	r6
 8001562:	2800      	cmp	r0, #0
 8001564:	dc08      	bgt.n	8001578 <__sflush_r+0xfc>
 8001566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800156a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800156e:	81a3      	strh	r3, [r4, #12]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001578:	4407      	add	r7, r0
 800157a:	eba8 0800 	sub.w	r8, r8, r0
 800157e:	e7e7      	b.n	8001550 <__sflush_r+0xd4>
 8001580:	dfbffffe 	.word	0xdfbffffe

08001584 <_fflush_r>:
 8001584:	b538      	push	{r3, r4, r5, lr}
 8001586:	690b      	ldr	r3, [r1, #16]
 8001588:	4605      	mov	r5, r0
 800158a:	460c      	mov	r4, r1
 800158c:	b913      	cbnz	r3, 8001594 <_fflush_r+0x10>
 800158e:	2500      	movs	r5, #0
 8001590:	4628      	mov	r0, r5
 8001592:	bd38      	pop	{r3, r4, r5, pc}
 8001594:	b118      	cbz	r0, 800159e <_fflush_r+0x1a>
 8001596:	6a03      	ldr	r3, [r0, #32]
 8001598:	b90b      	cbnz	r3, 800159e <_fflush_r+0x1a>
 800159a:	f7ff fa9f 	bl	8000adc <__sinit>
 800159e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f3      	beq.n	800158e <_fflush_r+0xa>
 80015a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80015a8:	07d0      	lsls	r0, r2, #31
 80015aa:	d404      	bmi.n	80015b6 <_fflush_r+0x32>
 80015ac:	0599      	lsls	r1, r3, #22
 80015ae:	d402      	bmi.n	80015b6 <_fflush_r+0x32>
 80015b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015b2:	f7ff fb98 	bl	8000ce6 <__retarget_lock_acquire_recursive>
 80015b6:	4628      	mov	r0, r5
 80015b8:	4621      	mov	r1, r4
 80015ba:	f7ff ff5f 	bl	800147c <__sflush_r>
 80015be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80015c0:	07da      	lsls	r2, r3, #31
 80015c2:	4605      	mov	r5, r0
 80015c4:	d4e4      	bmi.n	8001590 <_fflush_r+0xc>
 80015c6:	89a3      	ldrh	r3, [r4, #12]
 80015c8:	059b      	lsls	r3, r3, #22
 80015ca:	d4e1      	bmi.n	8001590 <_fflush_r+0xc>
 80015cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015ce:	f7ff fb8b 	bl	8000ce8 <__retarget_lock_release_recursive>
 80015d2:	e7dd      	b.n	8001590 <_fflush_r+0xc>

080015d4 <__swbuf_r>:
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d6:	460e      	mov	r6, r1
 80015d8:	4614      	mov	r4, r2
 80015da:	4605      	mov	r5, r0
 80015dc:	b118      	cbz	r0, 80015e6 <__swbuf_r+0x12>
 80015de:	6a03      	ldr	r3, [r0, #32]
 80015e0:	b90b      	cbnz	r3, 80015e6 <__swbuf_r+0x12>
 80015e2:	f7ff fa7b 	bl	8000adc <__sinit>
 80015e6:	69a3      	ldr	r3, [r4, #24]
 80015e8:	60a3      	str	r3, [r4, #8]
 80015ea:	89a3      	ldrh	r3, [r4, #12]
 80015ec:	071a      	lsls	r2, r3, #28
 80015ee:	d501      	bpl.n	80015f4 <__swbuf_r+0x20>
 80015f0:	6923      	ldr	r3, [r4, #16]
 80015f2:	b943      	cbnz	r3, 8001606 <__swbuf_r+0x32>
 80015f4:	4621      	mov	r1, r4
 80015f6:	4628      	mov	r0, r5
 80015f8:	f000 f82a 	bl	8001650 <__swsetup_r>
 80015fc:	b118      	cbz	r0, 8001606 <__swbuf_r+0x32>
 80015fe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001602:	4638      	mov	r0, r7
 8001604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	6922      	ldr	r2, [r4, #16]
 800160a:	1a98      	subs	r0, r3, r2
 800160c:	6963      	ldr	r3, [r4, #20]
 800160e:	b2f6      	uxtb	r6, r6
 8001610:	4283      	cmp	r3, r0
 8001612:	4637      	mov	r7, r6
 8001614:	dc05      	bgt.n	8001622 <__swbuf_r+0x4e>
 8001616:	4621      	mov	r1, r4
 8001618:	4628      	mov	r0, r5
 800161a:	f7ff ffb3 	bl	8001584 <_fflush_r>
 800161e:	2800      	cmp	r0, #0
 8001620:	d1ed      	bne.n	80015fe <__swbuf_r+0x2a>
 8001622:	68a3      	ldr	r3, [r4, #8]
 8001624:	3b01      	subs	r3, #1
 8001626:	60a3      	str	r3, [r4, #8]
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	6022      	str	r2, [r4, #0]
 800162e:	701e      	strb	r6, [r3, #0]
 8001630:	6962      	ldr	r2, [r4, #20]
 8001632:	1c43      	adds	r3, r0, #1
 8001634:	429a      	cmp	r2, r3
 8001636:	d004      	beq.n	8001642 <__swbuf_r+0x6e>
 8001638:	89a3      	ldrh	r3, [r4, #12]
 800163a:	07db      	lsls	r3, r3, #31
 800163c:	d5e1      	bpl.n	8001602 <__swbuf_r+0x2e>
 800163e:	2e0a      	cmp	r6, #10
 8001640:	d1df      	bne.n	8001602 <__swbuf_r+0x2e>
 8001642:	4621      	mov	r1, r4
 8001644:	4628      	mov	r0, r5
 8001646:	f7ff ff9d 	bl	8001584 <_fflush_r>
 800164a:	2800      	cmp	r0, #0
 800164c:	d0d9      	beq.n	8001602 <__swbuf_r+0x2e>
 800164e:	e7d6      	b.n	80015fe <__swbuf_r+0x2a>

08001650 <__swsetup_r>:
 8001650:	b538      	push	{r3, r4, r5, lr}
 8001652:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <__swsetup_r+0xa8>)
 8001654:	4605      	mov	r5, r0
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	460c      	mov	r4, r1
 800165a:	b118      	cbz	r0, 8001664 <__swsetup_r+0x14>
 800165c:	6a03      	ldr	r3, [r0, #32]
 800165e:	b90b      	cbnz	r3, 8001664 <__swsetup_r+0x14>
 8001660:	f7ff fa3c 	bl	8000adc <__sinit>
 8001664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001668:	0719      	lsls	r1, r3, #28
 800166a:	d422      	bmi.n	80016b2 <__swsetup_r+0x62>
 800166c:	06da      	lsls	r2, r3, #27
 800166e:	d407      	bmi.n	8001680 <__swsetup_r+0x30>
 8001670:	2209      	movs	r2, #9
 8001672:	602a      	str	r2, [r5, #0]
 8001674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001678:	81a3      	strh	r3, [r4, #12]
 800167a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800167e:	e033      	b.n	80016e8 <__swsetup_r+0x98>
 8001680:	0758      	lsls	r0, r3, #29
 8001682:	d512      	bpl.n	80016aa <__swsetup_r+0x5a>
 8001684:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001686:	b141      	cbz	r1, 800169a <__swsetup_r+0x4a>
 8001688:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800168c:	4299      	cmp	r1, r3
 800168e:	d002      	beq.n	8001696 <__swsetup_r+0x46>
 8001690:	4628      	mov	r0, r5
 8001692:	f7ff fb2b 	bl	8000cec <_free_r>
 8001696:	2300      	movs	r3, #0
 8001698:	6363      	str	r3, [r4, #52]	@ 0x34
 800169a:	89a3      	ldrh	r3, [r4, #12]
 800169c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80016a0:	81a3      	strh	r3, [r4, #12]
 80016a2:	2300      	movs	r3, #0
 80016a4:	6063      	str	r3, [r4, #4]
 80016a6:	6923      	ldr	r3, [r4, #16]
 80016a8:	6023      	str	r3, [r4, #0]
 80016aa:	89a3      	ldrh	r3, [r4, #12]
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	81a3      	strh	r3, [r4, #12]
 80016b2:	6923      	ldr	r3, [r4, #16]
 80016b4:	b94b      	cbnz	r3, 80016ca <__swsetup_r+0x7a>
 80016b6:	89a3      	ldrh	r3, [r4, #12]
 80016b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80016bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016c0:	d003      	beq.n	80016ca <__swsetup_r+0x7a>
 80016c2:	4621      	mov	r1, r4
 80016c4:	4628      	mov	r0, r5
 80016c6:	f000 f84f 	bl	8001768 <__smakebuf_r>
 80016ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016ce:	f013 0201 	ands.w	r2, r3, #1
 80016d2:	d00a      	beq.n	80016ea <__swsetup_r+0x9a>
 80016d4:	2200      	movs	r2, #0
 80016d6:	60a2      	str	r2, [r4, #8]
 80016d8:	6962      	ldr	r2, [r4, #20]
 80016da:	4252      	negs	r2, r2
 80016dc:	61a2      	str	r2, [r4, #24]
 80016de:	6922      	ldr	r2, [r4, #16]
 80016e0:	b942      	cbnz	r2, 80016f4 <__swsetup_r+0xa4>
 80016e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80016e6:	d1c5      	bne.n	8001674 <__swsetup_r+0x24>
 80016e8:	bd38      	pop	{r3, r4, r5, pc}
 80016ea:	0799      	lsls	r1, r3, #30
 80016ec:	bf58      	it	pl
 80016ee:	6962      	ldrpl	r2, [r4, #20]
 80016f0:	60a2      	str	r2, [r4, #8]
 80016f2:	e7f4      	b.n	80016de <__swsetup_r+0x8e>
 80016f4:	2000      	movs	r0, #0
 80016f6:	e7f7      	b.n	80016e8 <__swsetup_r+0x98>
 80016f8:	2000000c 	.word	0x2000000c

080016fc <_sbrk_r>:
 80016fc:	b538      	push	{r3, r4, r5, lr}
 80016fe:	4d06      	ldr	r5, [pc, #24]	@ (8001718 <_sbrk_r+0x1c>)
 8001700:	2300      	movs	r3, #0
 8001702:	4604      	mov	r4, r0
 8001704:	4608      	mov	r0, r1
 8001706:	602b      	str	r3, [r5, #0]
 8001708:	f7ff f840 	bl	800078c <_sbrk>
 800170c:	1c43      	adds	r3, r0, #1
 800170e:	d102      	bne.n	8001716 <_sbrk_r+0x1a>
 8001710:	682b      	ldr	r3, [r5, #0]
 8001712:	b103      	cbz	r3, 8001716 <_sbrk_r+0x1a>
 8001714:	6023      	str	r3, [r4, #0]
 8001716:	bd38      	pop	{r3, r4, r5, pc}
 8001718:	200014a4 	.word	0x200014a4

0800171c <__swhatbuf_r>:
 800171c:	b570      	push	{r4, r5, r6, lr}
 800171e:	460c      	mov	r4, r1
 8001720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001724:	2900      	cmp	r1, #0
 8001726:	b096      	sub	sp, #88	@ 0x58
 8001728:	4615      	mov	r5, r2
 800172a:	461e      	mov	r6, r3
 800172c:	da0d      	bge.n	800174a <__swhatbuf_r+0x2e>
 800172e:	89a3      	ldrh	r3, [r4, #12]
 8001730:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	bf14      	ite	ne
 800173a:	2340      	movne	r3, #64	@ 0x40
 800173c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001740:	2000      	movs	r0, #0
 8001742:	6031      	str	r1, [r6, #0]
 8001744:	602b      	str	r3, [r5, #0]
 8001746:	b016      	add	sp, #88	@ 0x58
 8001748:	bd70      	pop	{r4, r5, r6, pc}
 800174a:	466a      	mov	r2, sp
 800174c:	f000 f848 	bl	80017e0 <_fstat_r>
 8001750:	2800      	cmp	r0, #0
 8001752:	dbec      	blt.n	800172e <__swhatbuf_r+0x12>
 8001754:	9901      	ldr	r1, [sp, #4]
 8001756:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800175a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800175e:	4259      	negs	r1, r3
 8001760:	4159      	adcs	r1, r3
 8001762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001766:	e7eb      	b.n	8001740 <__swhatbuf_r+0x24>

08001768 <__smakebuf_r>:
 8001768:	898b      	ldrh	r3, [r1, #12]
 800176a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800176c:	079d      	lsls	r5, r3, #30
 800176e:	4606      	mov	r6, r0
 8001770:	460c      	mov	r4, r1
 8001772:	d507      	bpl.n	8001784 <__smakebuf_r+0x1c>
 8001774:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001778:	6023      	str	r3, [r4, #0]
 800177a:	6123      	str	r3, [r4, #16]
 800177c:	2301      	movs	r3, #1
 800177e:	6163      	str	r3, [r4, #20]
 8001780:	b003      	add	sp, #12
 8001782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001784:	ab01      	add	r3, sp, #4
 8001786:	466a      	mov	r2, sp
 8001788:	f7ff ffc8 	bl	800171c <__swhatbuf_r>
 800178c:	9f00      	ldr	r7, [sp, #0]
 800178e:	4605      	mov	r5, r0
 8001790:	4639      	mov	r1, r7
 8001792:	4630      	mov	r0, r6
 8001794:	f7ff fb16 	bl	8000dc4 <_malloc_r>
 8001798:	b948      	cbnz	r0, 80017ae <__smakebuf_r+0x46>
 800179a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800179e:	059a      	lsls	r2, r3, #22
 80017a0:	d4ee      	bmi.n	8001780 <__smakebuf_r+0x18>
 80017a2:	f023 0303 	bic.w	r3, r3, #3
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	81a3      	strh	r3, [r4, #12]
 80017ac:	e7e2      	b.n	8001774 <__smakebuf_r+0xc>
 80017ae:	89a3      	ldrh	r3, [r4, #12]
 80017b0:	6020      	str	r0, [r4, #0]
 80017b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017b6:	81a3      	strh	r3, [r4, #12]
 80017b8:	9b01      	ldr	r3, [sp, #4]
 80017ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80017be:	b15b      	cbz	r3, 80017d8 <__smakebuf_r+0x70>
 80017c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017c4:	4630      	mov	r0, r6
 80017c6:	f000 f81d 	bl	8001804 <_isatty_r>
 80017ca:	b128      	cbz	r0, 80017d8 <__smakebuf_r+0x70>
 80017cc:	89a3      	ldrh	r3, [r4, #12]
 80017ce:	f023 0303 	bic.w	r3, r3, #3
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	81a3      	strh	r3, [r4, #12]
 80017d8:	89a3      	ldrh	r3, [r4, #12]
 80017da:	431d      	orrs	r5, r3
 80017dc:	81a5      	strh	r5, [r4, #12]
 80017de:	e7cf      	b.n	8001780 <__smakebuf_r+0x18>

080017e0 <_fstat_r>:
 80017e0:	b538      	push	{r3, r4, r5, lr}
 80017e2:	4d07      	ldr	r5, [pc, #28]	@ (8001800 <_fstat_r+0x20>)
 80017e4:	2300      	movs	r3, #0
 80017e6:	4604      	mov	r4, r0
 80017e8:	4608      	mov	r0, r1
 80017ea:	4611      	mov	r1, r2
 80017ec:	602b      	str	r3, [r5, #0]
 80017ee:	f7fe ffa4 	bl	800073a <_fstat>
 80017f2:	1c43      	adds	r3, r0, #1
 80017f4:	d102      	bne.n	80017fc <_fstat_r+0x1c>
 80017f6:	682b      	ldr	r3, [r5, #0]
 80017f8:	b103      	cbz	r3, 80017fc <_fstat_r+0x1c>
 80017fa:	6023      	str	r3, [r4, #0]
 80017fc:	bd38      	pop	{r3, r4, r5, pc}
 80017fe:	bf00      	nop
 8001800:	200014a4 	.word	0x200014a4

08001804 <_isatty_r>:
 8001804:	b538      	push	{r3, r4, r5, lr}
 8001806:	4d06      	ldr	r5, [pc, #24]	@ (8001820 <_isatty_r+0x1c>)
 8001808:	2300      	movs	r3, #0
 800180a:	4604      	mov	r4, r0
 800180c:	4608      	mov	r0, r1
 800180e:	602b      	str	r3, [r5, #0]
 8001810:	f7fe ffa3 	bl	800075a <_isatty>
 8001814:	1c43      	adds	r3, r0, #1
 8001816:	d102      	bne.n	800181e <_isatty_r+0x1a>
 8001818:	682b      	ldr	r3, [r5, #0]
 800181a:	b103      	cbz	r3, 800181e <_isatty_r+0x1a>
 800181c:	6023      	str	r3, [r4, #0]
 800181e:	bd38      	pop	{r3, r4, r5, pc}
 8001820:	200014a4 	.word	0x200014a4

08001824 <_init>:
 8001824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001826:	bf00      	nop
 8001828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800182a:	bc08      	pop	{r3}
 800182c:	469e      	mov	lr, r3
 800182e:	4770      	bx	lr

08001830 <_fini>:
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001832:	bf00      	nop
 8001834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001836:	bc08      	pop	{r3}
 8001838:	469e      	mov	lr, r3
 800183a:	4770      	bx	lr
