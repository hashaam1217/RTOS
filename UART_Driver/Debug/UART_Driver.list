
UART_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000137c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800154c  0800154c  0000254c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001590  08001590  00003060  2**0
                  CONTENTS
  4 .ARM          00000008  08001590  08001590  00002590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001598  08001598  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001598  08001598  00002598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800159c  0800159c  0000259c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080015a0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000060  08001600  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08001600  000031d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000123a  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006c1  00000000  00000000  000042ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00004990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000012e  00000000  00000000  00004b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa8c  00000000  00000000  00004c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000025c0  00000000  00000000  0001f70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000906cb  00000000  00000000  00021cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2395  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ccc  00000000  00000000  000b23d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000b30a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001534 	.word	0x08001534

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08001534 	.word	0x08001534

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <led_init>:
#include "led.h"

#define GPIOAEN			(1U<<0) //the bit we want to enable
#define LED_PIN 		(1U<<5)
void led_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/*Enable clock access to led port A*/
	// Turning on AHB1 clock bus
	RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <led_init+0x34>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a0a      	ldr	r2, [pc, #40]	@ (80002e4 <led_init+0x34>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Set led pin as output pin*/
	GPIOA->MODER |= (1U << 10);
 80002c0:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <led_init+0x38>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a08      	ldr	r2, [pc, #32]	@ (80002e8 <led_init+0x38>)
 80002c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 11);
 80002cc:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <led_init+0x38>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a05      	ldr	r2, [pc, #20]	@ (80002e8 <led_init+0x38>)
 80002d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002d6:	6013      	str	r3, [r2, #0]
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40023800 	.word	0x40023800
 80002e8:	40020000 	.word	0x40020000

080002ec <main>:
#include "led.h"
#include "uart.h"
#include "timebase.h"

int main (void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
	led_init();
 80002f2:	f7ff ffdd 	bl	80002b0 <led_init>
	uart_tx_init();
 80002f6:	f000 f939 	bl	800056c <uart_tx_init>
    timebase_init();
 80002fa:	f000 f8ff 	bl	80004fc <timebase_init>

	int j = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	607b      	str	r3, [r7, #4]

	while (1)
	{
		printf("Second: %i  \n\r", j);
 8000302:	6879      	ldr	r1, [r7, #4]
 8000304:	4805      	ldr	r0, [pc, #20]	@ (800031c <main+0x30>)
 8000306:	f000 faa7 	bl	8000858 <iprintf>
		j += 5;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3305      	adds	r3, #5
 800030e:	607b      	str	r3, [r7, #4]
		delay(5);
 8000310:	2005      	movs	r0, #5
 8000312:	f000 f8bf 	bl	8000494 <delay>
		printf("Second: %i  \n\r", j);
 8000316:	bf00      	nop
 8000318:	e7f3      	b.n	8000302 <main+0x16>
 800031a:	bf00      	nop
 800031c:	0800154c 	.word	0x0800154c

08000320 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
 8000330:	e00a      	b.n	8000348 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000332:	f3af 8000 	nop.w
 8000336:	4601      	mov	r1, r0
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	60ba      	str	r2, [r7, #8]
 800033e:	b2ca      	uxtb	r2, r1
 8000340:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	3301      	adds	r3, #1
 8000346:	617b      	str	r3, [r7, #20]
 8000348:	697a      	ldr	r2, [r7, #20]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	429a      	cmp	r2, r3
 800034e:	dbf0      	blt.n	8000332 <_read+0x12>
  }

  return len;
 8000350:	687b      	ldr	r3, [r7, #4]
}
 8000352:	4618      	mov	r0, r3
 8000354:	3718      	adds	r7, #24
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	b086      	sub	sp, #24
 800035e:	af00      	add	r7, sp, #0
 8000360:	60f8      	str	r0, [r7, #12]
 8000362:	60b9      	str	r1, [r7, #8]
 8000364:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
 800036a:	e009      	b.n	8000380 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	1c5a      	adds	r2, r3, #1
 8000370:	60ba      	str	r2, [r7, #8]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f8ed 	bl	8000554 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	3301      	adds	r3, #1
 800037e:	617b      	str	r3, [r7, #20]
 8000380:	697a      	ldr	r2, [r7, #20]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	429a      	cmp	r2, r3
 8000386:	dbf1      	blt.n	800036c <_write+0x12>
  }
  return len;
 8000388:	687b      	ldr	r3, [r7, #4]
}
 800038a:	4618      	mov	r0, r3
 800038c:	3718      	adds	r7, #24
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <_close>:

int _close(int file)
{
 8000392:	b480      	push	{r7}
 8000394:	b083      	sub	sp, #12
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800039a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800039e:	4618      	mov	r0, r3
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr

080003aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003aa:	b480      	push	{r7}
 80003ac:	b083      	sub	sp, #12
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003ba:	605a      	str	r2, [r3, #4]
  return 0;
 80003bc:	2300      	movs	r3, #0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr

080003ca <_isatty>:

int _isatty(int file)
{
 80003ca:	b480      	push	{r7}
 80003cc:	b083      	sub	sp, #12
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003d2:	2301      	movs	r3, #1
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003ec:	2300      	movs	r3, #0
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
	...

080003fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000404:	4a14      	ldr	r2, [pc, #80]	@ (8000458 <_sbrk+0x5c>)
 8000406:	4b15      	ldr	r3, [pc, #84]	@ (800045c <_sbrk+0x60>)
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <_sbrk+0x64>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d102      	bne.n	800041e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000418:	4b11      	ldr	r3, [pc, #68]	@ (8000460 <_sbrk+0x64>)
 800041a:	4a12      	ldr	r2, [pc, #72]	@ (8000464 <_sbrk+0x68>)
 800041c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800041e:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <_sbrk+0x64>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	693a      	ldr	r2, [r7, #16]
 8000428:	429a      	cmp	r2, r3
 800042a:	d207      	bcs.n	800043c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800042c:	f000 fab8 	bl	80009a0 <__errno>
 8000430:	4603      	mov	r3, r0
 8000432:	220c      	movs	r2, #12
 8000434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800043a:	e009      	b.n	8000450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800043c:	4b08      	ldr	r3, [pc, #32]	@ (8000460 <_sbrk+0x64>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000442:	4b07      	ldr	r3, [pc, #28]	@ (8000460 <_sbrk+0x64>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4413      	add	r3, r2
 800044a:	4a05      	ldr	r2, [pc, #20]	@ (8000460 <_sbrk+0x64>)
 800044c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800044e:	68fb      	ldr	r3, [r7, #12]
}
 8000450:	4618      	mov	r0, r3
 8000452:	3718      	adds	r7, #24
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20020000 	.word	0x20020000
 800045c:	00000400 	.word	0x00000400
 8000460:	2000007c 	.word	0x2000007c
 8000464:	200001d8 	.word	0x200001d8

08000468 <get_tick>:
volatile uint32_t g_curr_tick;
volatile uint32_t g_curr_tick_p;
volatile uint32_t tick_freq = 1;

uint32_t get_tick(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	bf00      	nop
    __disable_irq();
    g_curr_tick_p = g_curr_tick;
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <get_tick+0x24>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a06      	ldr	r2, [pc, #24]	@ (8000490 <get_tick+0x28>)
 8000476:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000478:	b662      	cpsie	i
}
 800047a:	bf00      	nop
    __enable_irq();
    return g_curr_tick_p;
 800047c:	4b04      	ldr	r3, [pc, #16]	@ (8000490 <get_tick+0x28>)
 800047e:	681b      	ldr	r3, [r3, #0]
}
 8000480:	4618      	mov	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	20000080 	.word	0x20000080
 8000490:	20000084 	.word	0x20000084

08000494 <delay>:

//Delays in seconds
void delay(uint32_t delay)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = get_tick();
 800049c:	f7ff ffe4 	bl	8000468 <get_tick>
 80004a0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = delay;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	60fb      	str	r3, [r7, #12]
    if (wait < MAX_DELAY)
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80004ac:	d004      	beq.n	80004b8 <delay+0x24>
    {
        wait += tick_freq;
 80004ae:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <delay+0x40>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	4413      	add	r3, r2
 80004b6:	60fb      	str	r3, [r7, #12]
    }
    while((get_tick() - tickstart) < wait){}
 80004b8:	bf00      	nop
 80004ba:	f7ff ffd5 	bl	8000468 <get_tick>
 80004be:	4602      	mov	r2, r0
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	1ad3      	subs	r3, r2, r3
 80004c4:	68fa      	ldr	r2, [r7, #12]
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d8f7      	bhi.n	80004ba <delay+0x26>

}
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000000 	.word	0x20000000

080004d8 <tick_increment>:

void tick_increment(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
    g_curr_tick += tick_freq;
 80004dc:	4b05      	ldr	r3, [pc, #20]	@ (80004f4 <tick_increment+0x1c>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <tick_increment+0x20>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4413      	add	r3, r2
 80004e6:	4a04      	ldr	r2, [pc, #16]	@ (80004f8 <tick_increment+0x20>)
 80004e8:	6013      	str	r3, [r2, #0]
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	20000000 	.word	0x20000000
 80004f8:	20000080 	.word	0x20000080

080004fc <timebase_init>:


void timebase_init(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	// Load the timer with number of cycles per seconds
    SysTick->LOAD = ONE_SEC_LOAD - 1;
 8000500:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <timebase_init+0x44>)
 8000502:	4a10      	ldr	r2, [pc, #64]	@ (8000544 <timebase_init+0x48>)
 8000504:	605a      	str	r2, [r3, #4]
	// Clear SysTick Current Value Register
    SysTick->VAL = 0;
 8000506:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <timebase_init+0x44>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
	// Select Internal Clock
    SysTick->CTRL |= CSR_CS;
 800050c:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <timebase_init+0x44>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0b      	ldr	r2, [pc, #44]	@ (8000540 <timebase_init+0x44>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6013      	str	r3, [r2, #0]
	// Enable Interrupt
    SysTick->CTRL |= CSR_TIE;
 8000518:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <timebase_init+0x44>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a08      	ldr	r2, [pc, #32]	@ (8000540 <timebase_init+0x44>)
 800051e:	f043 0302 	orr.w	r3, r3, #2
 8000522:	6013      	str	r3, [r2, #0]
	// Enable SysTick
    SysTick->CTRL |= CSR_E;
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <timebase_init+0x44>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a05      	ldr	r2, [pc, #20]	@ (8000540 <timebase_init+0x44>)
 800052a:	f043 0301 	orr.w	r3, r3, #1
 800052e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000530:	b662      	cpsie	i
}
 8000532:	bf00      	nop
    // Enable global interrupts
    __enable_irq(); // Possibly redundant
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	e000e010 	.word	0xe000e010
 8000544:	00f423ff 	.word	0x00f423ff

08000548 <SysTick_Handler>:

void SysTick_Handler() // Interrupt handler
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
    tick_increment();
 800054c:	f7ff ffc4 	bl	80004d8 <tick_increment>
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <__io_putchar>:
static uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f000 f84f 	bl	8000600 <uart_write>
	return ch;
 8000562:	687b      	ldr	r3, [r7, #4]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <uart_tx_init>:

void uart_tx_init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	//enable clock access
	RCC->AHB1ENR |= GPIOAEN;
 8000570:	4b1f      	ldr	r3, [pc, #124]	@ (80005f0 <uart_tx_init+0x84>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000574:	4a1e      	ldr	r2, [pc, #120]	@ (80005f0 <uart_tx_init+0x84>)
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	6313      	str	r3, [r2, #48]	@ 0x30
	//Finding GPIO Pins for USART2

	GPIOA->MODER &= ~(1U<<4);
 800057c:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <uart_tx_init+0x88>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a1c      	ldr	r2, [pc, #112]	@ (80005f4 <uart_tx_init+0x88>)
 8000582:	f023 0310 	bic.w	r3, r3, #16
 8000586:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<5);
 8000588:	4b1a      	ldr	r3, [pc, #104]	@ (80005f4 <uart_tx_init+0x88>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a19      	ldr	r2, [pc, #100]	@ (80005f4 <uart_tx_init+0x88>)
 800058e:	f043 0320 	orr.w	r3, r3, #32
 8000592:	6013      	str	r3, [r2, #0]
	//Set alternate function type to AF7 (UART2_TX)
	GPIOA->AFR[0] |=  (1U<<8);
 8000594:	4b17      	ldr	r3, [pc, #92]	@ (80005f4 <uart_tx_init+0x88>)
 8000596:	6a1b      	ldr	r3, [r3, #32]
 8000598:	4a16      	ldr	r2, [pc, #88]	@ (80005f4 <uart_tx_init+0x88>)
 800059a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800059e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<9);
 80005a0:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <uart_tx_init+0x88>)
 80005a2:	6a1b      	ldr	r3, [r3, #32]
 80005a4:	4a13      	ldr	r2, [pc, #76]	@ (80005f4 <uart_tx_init+0x88>)
 80005a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1U<<10);
 80005ac:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <uart_tx_init+0x88>)
 80005ae:	6a1b      	ldr	r3, [r3, #32]
 80005b0:	4a10      	ldr	r2, [pc, #64]	@ (80005f4 <uart_tx_init+0x88>)
 80005b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80005b8:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <uart_tx_init+0x88>)
 80005ba:	6a1b      	ldr	r3, [r3, #32]
 80005bc:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <uart_tx_init+0x88>)
 80005be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80005c2:	6213      	str	r3, [r2, #32]
	//Enable clock access to UART
	RCC->APB1ENR |= UART2EN;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <uart_tx_init+0x84>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	4a09      	ldr	r2, [pc, #36]	@ (80005f0 <uart_tx_init+0x84>)
 80005ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ce:	6413      	str	r3, [r2, #64]	@ 0x40
	//Configure baudrate
	set_uart_baudrate(APB1_CLK, UART_BAUDRATE);
 80005d0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80005d4:	4808      	ldr	r0, [pc, #32]	@ (80005f8 <uart_tx_init+0x8c>)
 80005d6:	f000 f82b 	bl	8000630 <set_uart_baudrate>

	//Configure the transfer direction
	USART2->CR1 = CR1_TE;
 80005da:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <uart_tx_init+0x90>)
 80005dc:	2208      	movs	r2, #8
 80005de:	60da      	str	r2, [r3, #12]

	//Enable UART module
	USART2->CR1 |= CR1_UE;
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <uart_tx_init+0x90>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	4a05      	ldr	r2, [pc, #20]	@ (80005fc <uart_tx_init+0x90>)
 80005e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005ea:	60d3      	str	r3, [r2, #12]
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40020000 	.word	0x40020000
 80005f8:	00f42400 	.word	0x00f42400
 80005fc:	40004400 	.word	0x40004400

08000600 <uart_write>:



static void uart_write(int ch)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	//Ensuring clear TX Register
	while (!(USART2->SR & SR_TXE)){}
 8000608:	bf00      	nop
 800060a:	4b08      	ldr	r3, [pc, #32]	@ (800062c <uart_write+0x2c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f9      	beq.n	800060a <uart_write+0xa>

	//TX
	USART2->DR = (ch & 0xFF);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a04      	ldr	r2, [pc, #16]	@ (800062c <uart_write+0x2c>)
 800061a:	b2db      	uxtb	r3, r3
 800061c:	6053      	str	r3, [r2, #4]
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40004400 	.word	0x40004400

08000630 <set_uart_baudrate>:

static void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_baudrate(APB1_CLK, UART_BAUDRATE);
 800063a:	4c06      	ldr	r4, [pc, #24]	@ (8000654 <set_uart_baudrate+0x24>)
 800063c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000640:	4805      	ldr	r0, [pc, #20]	@ (8000658 <set_uart_baudrate+0x28>)
 8000642:	f000 f80b 	bl	800065c <compute_uart_baudrate>
 8000646:	4603      	mov	r3, r0
 8000648:	60a3      	str	r3, [r4, #8]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	bd90      	pop	{r4, r7, pc}
 8000652:	bf00      	nop
 8000654:	40004400 	.word	0x40004400
 8000658:	00f42400 	.word	0x00f42400

0800065c <compute_uart_baudrate>:

static uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
	return (periph_clk + (baudrate/2U))/baudrate;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	085a      	lsrs	r2, r3, #1
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	441a      	add	r2, r3
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000680:	480d      	ldr	r0, [pc, #52]	@ (80006b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000682:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000684:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000688:	480c      	ldr	r0, [pc, #48]	@ (80006bc <LoopForever+0x6>)
  ldr r1, =_edata
 800068a:	490d      	ldr	r1, [pc, #52]	@ (80006c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800068c:	4a0d      	ldr	r2, [pc, #52]	@ (80006c4 <LoopForever+0xe>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000690:	e002      	b.n	8000698 <LoopCopyDataInit>

08000692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000696:	3304      	adds	r3, #4

08000698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800069c:	d3f9      	bcc.n	8000692 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069e:	4a0a      	ldr	r2, [pc, #40]	@ (80006c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a0:	4c0a      	ldr	r4, [pc, #40]	@ (80006cc <LoopForever+0x16>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a4:	e001      	b.n	80006aa <LoopFillZerobss>

080006a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a8:	3204      	adds	r2, #4

080006aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ac:	d3fb      	bcc.n	80006a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ae:	f000 f97d 	bl	80009ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b2:	f7ff fe1b 	bl	80002ec <main>

080006b6 <LoopForever>:

LoopForever:
  b LoopForever
 80006b6:	e7fe      	b.n	80006b6 <LoopForever>
  ldr   r0, =_estack
 80006b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006c4:	080015a0 	.word	0x080015a0
  ldr r2, =_sbss
 80006c8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006cc:	200001d4 	.word	0x200001d4

080006d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC_IRQHandler>
	...

080006d4 <std>:
 80006d4:	2300      	movs	r3, #0
 80006d6:	b510      	push	{r4, lr}
 80006d8:	4604      	mov	r4, r0
 80006da:	e9c0 3300 	strd	r3, r3, [r0]
 80006de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006e2:	6083      	str	r3, [r0, #8]
 80006e4:	8181      	strh	r1, [r0, #12]
 80006e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80006e8:	81c2      	strh	r2, [r0, #14]
 80006ea:	6183      	str	r3, [r0, #24]
 80006ec:	4619      	mov	r1, r3
 80006ee:	2208      	movs	r2, #8
 80006f0:	305c      	adds	r0, #92	@ 0x5c
 80006f2:	f000 f906 	bl	8000902 <memset>
 80006f6:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <std+0x58>)
 80006f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80006fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <std+0x5c>)
 80006fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <std+0x60>)
 8000700:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <std+0x64>)
 8000704:	6323      	str	r3, [r4, #48]	@ 0x30
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <std+0x68>)
 8000708:	6224      	str	r4, [r4, #32]
 800070a:	429c      	cmp	r4, r3
 800070c:	d006      	beq.n	800071c <std+0x48>
 800070e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000712:	4294      	cmp	r4, r2
 8000714:	d002      	beq.n	800071c <std+0x48>
 8000716:	33d0      	adds	r3, #208	@ 0xd0
 8000718:	429c      	cmp	r4, r3
 800071a:	d105      	bne.n	8000728 <std+0x54>
 800071c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000724:	f000 b966 	b.w	80009f4 <__retarget_lock_init_recursive>
 8000728:	bd10      	pop	{r4, pc}
 800072a:	bf00      	nop
 800072c:	0800087d 	.word	0x0800087d
 8000730:	0800089f 	.word	0x0800089f
 8000734:	080008d7 	.word	0x080008d7
 8000738:	080008fb 	.word	0x080008fb
 800073c:	20000088 	.word	0x20000088

08000740 <stdio_exit_handler>:
 8000740:	4a02      	ldr	r2, [pc, #8]	@ (800074c <stdio_exit_handler+0xc>)
 8000742:	4903      	ldr	r1, [pc, #12]	@ (8000750 <stdio_exit_handler+0x10>)
 8000744:	4803      	ldr	r0, [pc, #12]	@ (8000754 <stdio_exit_handler+0x14>)
 8000746:	f000 b869 	b.w	800081c <_fwalk_sglue>
 800074a:	bf00      	nop
 800074c:	20000004 	.word	0x20000004
 8000750:	08001295 	.word	0x08001295
 8000754:	20000014 	.word	0x20000014

08000758 <cleanup_stdio>:
 8000758:	6841      	ldr	r1, [r0, #4]
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <cleanup_stdio+0x34>)
 800075c:	4299      	cmp	r1, r3
 800075e:	b510      	push	{r4, lr}
 8000760:	4604      	mov	r4, r0
 8000762:	d001      	beq.n	8000768 <cleanup_stdio+0x10>
 8000764:	f000 fd96 	bl	8001294 <_fflush_r>
 8000768:	68a1      	ldr	r1, [r4, #8]
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <cleanup_stdio+0x38>)
 800076c:	4299      	cmp	r1, r3
 800076e:	d002      	beq.n	8000776 <cleanup_stdio+0x1e>
 8000770:	4620      	mov	r0, r4
 8000772:	f000 fd8f 	bl	8001294 <_fflush_r>
 8000776:	68e1      	ldr	r1, [r4, #12]
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <cleanup_stdio+0x3c>)
 800077a:	4299      	cmp	r1, r3
 800077c:	d004      	beq.n	8000788 <cleanup_stdio+0x30>
 800077e:	4620      	mov	r0, r4
 8000780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000784:	f000 bd86 	b.w	8001294 <_fflush_r>
 8000788:	bd10      	pop	{r4, pc}
 800078a:	bf00      	nop
 800078c:	20000088 	.word	0x20000088
 8000790:	200000f0 	.word	0x200000f0
 8000794:	20000158 	.word	0x20000158

08000798 <global_stdio_init.part.0>:
 8000798:	b510      	push	{r4, lr}
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <global_stdio_init.part.0+0x30>)
 800079c:	4c0b      	ldr	r4, [pc, #44]	@ (80007cc <global_stdio_init.part.0+0x34>)
 800079e:	4a0c      	ldr	r2, [pc, #48]	@ (80007d0 <global_stdio_init.part.0+0x38>)
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	4620      	mov	r0, r4
 80007a4:	2200      	movs	r2, #0
 80007a6:	2104      	movs	r1, #4
 80007a8:	f7ff ff94 	bl	80006d4 <std>
 80007ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007b0:	2201      	movs	r2, #1
 80007b2:	2109      	movs	r1, #9
 80007b4:	f7ff ff8e 	bl	80006d4 <std>
 80007b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007bc:	2202      	movs	r2, #2
 80007be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007c2:	2112      	movs	r1, #18
 80007c4:	f7ff bf86 	b.w	80006d4 <std>
 80007c8:	200001c0 	.word	0x200001c0
 80007cc:	20000088 	.word	0x20000088
 80007d0:	08000741 	.word	0x08000741

080007d4 <__sfp_lock_acquire>:
 80007d4:	4801      	ldr	r0, [pc, #4]	@ (80007dc <__sfp_lock_acquire+0x8>)
 80007d6:	f000 b90e 	b.w	80009f6 <__retarget_lock_acquire_recursive>
 80007da:	bf00      	nop
 80007dc:	200001c9 	.word	0x200001c9

080007e0 <__sfp_lock_release>:
 80007e0:	4801      	ldr	r0, [pc, #4]	@ (80007e8 <__sfp_lock_release+0x8>)
 80007e2:	f000 b909 	b.w	80009f8 <__retarget_lock_release_recursive>
 80007e6:	bf00      	nop
 80007e8:	200001c9 	.word	0x200001c9

080007ec <__sinit>:
 80007ec:	b510      	push	{r4, lr}
 80007ee:	4604      	mov	r4, r0
 80007f0:	f7ff fff0 	bl	80007d4 <__sfp_lock_acquire>
 80007f4:	6a23      	ldr	r3, [r4, #32]
 80007f6:	b11b      	cbz	r3, 8000800 <__sinit+0x14>
 80007f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007fc:	f7ff bff0 	b.w	80007e0 <__sfp_lock_release>
 8000800:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <__sinit+0x28>)
 8000802:	6223      	str	r3, [r4, #32]
 8000804:	4b04      	ldr	r3, [pc, #16]	@ (8000818 <__sinit+0x2c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1f5      	bne.n	80007f8 <__sinit+0xc>
 800080c:	f7ff ffc4 	bl	8000798 <global_stdio_init.part.0>
 8000810:	e7f2      	b.n	80007f8 <__sinit+0xc>
 8000812:	bf00      	nop
 8000814:	08000759 	.word	0x08000759
 8000818:	200001c0 	.word	0x200001c0

0800081c <_fwalk_sglue>:
 800081c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000820:	4607      	mov	r7, r0
 8000822:	4688      	mov	r8, r1
 8000824:	4614      	mov	r4, r2
 8000826:	2600      	movs	r6, #0
 8000828:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800082c:	f1b9 0901 	subs.w	r9, r9, #1
 8000830:	d505      	bpl.n	800083e <_fwalk_sglue+0x22>
 8000832:	6824      	ldr	r4, [r4, #0]
 8000834:	2c00      	cmp	r4, #0
 8000836:	d1f7      	bne.n	8000828 <_fwalk_sglue+0xc>
 8000838:	4630      	mov	r0, r6
 800083a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800083e:	89ab      	ldrh	r3, [r5, #12]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d907      	bls.n	8000854 <_fwalk_sglue+0x38>
 8000844:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000848:	3301      	adds	r3, #1
 800084a:	d003      	beq.n	8000854 <_fwalk_sglue+0x38>
 800084c:	4629      	mov	r1, r5
 800084e:	4638      	mov	r0, r7
 8000850:	47c0      	blx	r8
 8000852:	4306      	orrs	r6, r0
 8000854:	3568      	adds	r5, #104	@ 0x68
 8000856:	e7e9      	b.n	800082c <_fwalk_sglue+0x10>

08000858 <iprintf>:
 8000858:	b40f      	push	{r0, r1, r2, r3}
 800085a:	b507      	push	{r0, r1, r2, lr}
 800085c:	4906      	ldr	r1, [pc, #24]	@ (8000878 <iprintf+0x20>)
 800085e:	ab04      	add	r3, sp, #16
 8000860:	6808      	ldr	r0, [r1, #0]
 8000862:	f853 2b04 	ldr.w	r2, [r3], #4
 8000866:	6881      	ldr	r1, [r0, #8]
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	f000 f9e9 	bl	8000c40 <_vfiprintf_r>
 800086e:	b003      	add	sp, #12
 8000870:	f85d eb04 	ldr.w	lr, [sp], #4
 8000874:	b004      	add	sp, #16
 8000876:	4770      	bx	lr
 8000878:	20000010 	.word	0x20000010

0800087c <__sread>:
 800087c:	b510      	push	{r4, lr}
 800087e:	460c      	mov	r4, r1
 8000880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000884:	f000 f868 	bl	8000958 <_read_r>
 8000888:	2800      	cmp	r0, #0
 800088a:	bfab      	itete	ge
 800088c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800088e:	89a3      	ldrhlt	r3, [r4, #12]
 8000890:	181b      	addge	r3, r3, r0
 8000892:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000896:	bfac      	ite	ge
 8000898:	6563      	strge	r3, [r4, #84]	@ 0x54
 800089a:	81a3      	strhlt	r3, [r4, #12]
 800089c:	bd10      	pop	{r4, pc}

0800089e <__swrite>:
 800089e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008a2:	461f      	mov	r7, r3
 80008a4:	898b      	ldrh	r3, [r1, #12]
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	4605      	mov	r5, r0
 80008aa:	460c      	mov	r4, r1
 80008ac:	4616      	mov	r6, r2
 80008ae:	d505      	bpl.n	80008bc <__swrite+0x1e>
 80008b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008b4:	2302      	movs	r3, #2
 80008b6:	2200      	movs	r2, #0
 80008b8:	f000 f83c 	bl	8000934 <_lseek_r>
 80008bc:	89a3      	ldrh	r3, [r4, #12]
 80008be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008c6:	81a3      	strh	r3, [r4, #12]
 80008c8:	4632      	mov	r2, r6
 80008ca:	463b      	mov	r3, r7
 80008cc:	4628      	mov	r0, r5
 80008ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008d2:	f000 b853 	b.w	800097c <_write_r>

080008d6 <__sseek>:
 80008d6:	b510      	push	{r4, lr}
 80008d8:	460c      	mov	r4, r1
 80008da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008de:	f000 f829 	bl	8000934 <_lseek_r>
 80008e2:	1c43      	adds	r3, r0, #1
 80008e4:	89a3      	ldrh	r3, [r4, #12]
 80008e6:	bf15      	itete	ne
 80008e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008f2:	81a3      	strheq	r3, [r4, #12]
 80008f4:	bf18      	it	ne
 80008f6:	81a3      	strhne	r3, [r4, #12]
 80008f8:	bd10      	pop	{r4, pc}

080008fa <__sclose>:
 80008fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008fe:	f000 b809 	b.w	8000914 <_close_r>

08000902 <memset>:
 8000902:	4402      	add	r2, r0
 8000904:	4603      	mov	r3, r0
 8000906:	4293      	cmp	r3, r2
 8000908:	d100      	bne.n	800090c <memset+0xa>
 800090a:	4770      	bx	lr
 800090c:	f803 1b01 	strb.w	r1, [r3], #1
 8000910:	e7f9      	b.n	8000906 <memset+0x4>
	...

08000914 <_close_r>:
 8000914:	b538      	push	{r3, r4, r5, lr}
 8000916:	4d06      	ldr	r5, [pc, #24]	@ (8000930 <_close_r+0x1c>)
 8000918:	2300      	movs	r3, #0
 800091a:	4604      	mov	r4, r0
 800091c:	4608      	mov	r0, r1
 800091e:	602b      	str	r3, [r5, #0]
 8000920:	f7ff fd37 	bl	8000392 <_close>
 8000924:	1c43      	adds	r3, r0, #1
 8000926:	d102      	bne.n	800092e <_close_r+0x1a>
 8000928:	682b      	ldr	r3, [r5, #0]
 800092a:	b103      	cbz	r3, 800092e <_close_r+0x1a>
 800092c:	6023      	str	r3, [r4, #0]
 800092e:	bd38      	pop	{r3, r4, r5, pc}
 8000930:	200001c4 	.word	0x200001c4

08000934 <_lseek_r>:
 8000934:	b538      	push	{r3, r4, r5, lr}
 8000936:	4d07      	ldr	r5, [pc, #28]	@ (8000954 <_lseek_r+0x20>)
 8000938:	4604      	mov	r4, r0
 800093a:	4608      	mov	r0, r1
 800093c:	4611      	mov	r1, r2
 800093e:	2200      	movs	r2, #0
 8000940:	602a      	str	r2, [r5, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	f7ff fd4c 	bl	80003e0 <_lseek>
 8000948:	1c43      	adds	r3, r0, #1
 800094a:	d102      	bne.n	8000952 <_lseek_r+0x1e>
 800094c:	682b      	ldr	r3, [r5, #0]
 800094e:	b103      	cbz	r3, 8000952 <_lseek_r+0x1e>
 8000950:	6023      	str	r3, [r4, #0]
 8000952:	bd38      	pop	{r3, r4, r5, pc}
 8000954:	200001c4 	.word	0x200001c4

08000958 <_read_r>:
 8000958:	b538      	push	{r3, r4, r5, lr}
 800095a:	4d07      	ldr	r5, [pc, #28]	@ (8000978 <_read_r+0x20>)
 800095c:	4604      	mov	r4, r0
 800095e:	4608      	mov	r0, r1
 8000960:	4611      	mov	r1, r2
 8000962:	2200      	movs	r2, #0
 8000964:	602a      	str	r2, [r5, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	f7ff fcda 	bl	8000320 <_read>
 800096c:	1c43      	adds	r3, r0, #1
 800096e:	d102      	bne.n	8000976 <_read_r+0x1e>
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	b103      	cbz	r3, 8000976 <_read_r+0x1e>
 8000974:	6023      	str	r3, [r4, #0]
 8000976:	bd38      	pop	{r3, r4, r5, pc}
 8000978:	200001c4 	.word	0x200001c4

0800097c <_write_r>:
 800097c:	b538      	push	{r3, r4, r5, lr}
 800097e:	4d07      	ldr	r5, [pc, #28]	@ (800099c <_write_r+0x20>)
 8000980:	4604      	mov	r4, r0
 8000982:	4608      	mov	r0, r1
 8000984:	4611      	mov	r1, r2
 8000986:	2200      	movs	r2, #0
 8000988:	602a      	str	r2, [r5, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	f7ff fce5 	bl	800035a <_write>
 8000990:	1c43      	adds	r3, r0, #1
 8000992:	d102      	bne.n	800099a <_write_r+0x1e>
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	b103      	cbz	r3, 800099a <_write_r+0x1e>
 8000998:	6023      	str	r3, [r4, #0]
 800099a:	bd38      	pop	{r3, r4, r5, pc}
 800099c:	200001c4 	.word	0x200001c4

080009a0 <__errno>:
 80009a0:	4b01      	ldr	r3, [pc, #4]	@ (80009a8 <__errno+0x8>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000010 	.word	0x20000010

080009ac <__libc_init_array>:
 80009ac:	b570      	push	{r4, r5, r6, lr}
 80009ae:	4d0d      	ldr	r5, [pc, #52]	@ (80009e4 <__libc_init_array+0x38>)
 80009b0:	4c0d      	ldr	r4, [pc, #52]	@ (80009e8 <__libc_init_array+0x3c>)
 80009b2:	1b64      	subs	r4, r4, r5
 80009b4:	10a4      	asrs	r4, r4, #2
 80009b6:	2600      	movs	r6, #0
 80009b8:	42a6      	cmp	r6, r4
 80009ba:	d109      	bne.n	80009d0 <__libc_init_array+0x24>
 80009bc:	4d0b      	ldr	r5, [pc, #44]	@ (80009ec <__libc_init_array+0x40>)
 80009be:	4c0c      	ldr	r4, [pc, #48]	@ (80009f0 <__libc_init_array+0x44>)
 80009c0:	f000 fdb8 	bl	8001534 <_init>
 80009c4:	1b64      	subs	r4, r4, r5
 80009c6:	10a4      	asrs	r4, r4, #2
 80009c8:	2600      	movs	r6, #0
 80009ca:	42a6      	cmp	r6, r4
 80009cc:	d105      	bne.n	80009da <__libc_init_array+0x2e>
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d4:	4798      	blx	r3
 80009d6:	3601      	adds	r6, #1
 80009d8:	e7ee      	b.n	80009b8 <__libc_init_array+0xc>
 80009da:	f855 3b04 	ldr.w	r3, [r5], #4
 80009de:	4798      	blx	r3
 80009e0:	3601      	adds	r6, #1
 80009e2:	e7f2      	b.n	80009ca <__libc_init_array+0x1e>
 80009e4:	08001598 	.word	0x08001598
 80009e8:	08001598 	.word	0x08001598
 80009ec:	08001598 	.word	0x08001598
 80009f0:	0800159c 	.word	0x0800159c

080009f4 <__retarget_lock_init_recursive>:
 80009f4:	4770      	bx	lr

080009f6 <__retarget_lock_acquire_recursive>:
 80009f6:	4770      	bx	lr

080009f8 <__retarget_lock_release_recursive>:
 80009f8:	4770      	bx	lr
	...

080009fc <_free_r>:
 80009fc:	b538      	push	{r3, r4, r5, lr}
 80009fe:	4605      	mov	r5, r0
 8000a00:	2900      	cmp	r1, #0
 8000a02:	d041      	beq.n	8000a88 <_free_r+0x8c>
 8000a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a08:	1f0c      	subs	r4, r1, #4
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bfb8      	it	lt
 8000a0e:	18e4      	addlt	r4, r4, r3
 8000a10:	f000 f8e0 	bl	8000bd4 <__malloc_lock>
 8000a14:	4a1d      	ldr	r2, [pc, #116]	@ (8000a8c <_free_r+0x90>)
 8000a16:	6813      	ldr	r3, [r2, #0]
 8000a18:	b933      	cbnz	r3, 8000a28 <_free_r+0x2c>
 8000a1a:	6063      	str	r3, [r4, #4]
 8000a1c:	6014      	str	r4, [r2, #0]
 8000a1e:	4628      	mov	r0, r5
 8000a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a24:	f000 b8dc 	b.w	8000be0 <__malloc_unlock>
 8000a28:	42a3      	cmp	r3, r4
 8000a2a:	d908      	bls.n	8000a3e <_free_r+0x42>
 8000a2c:	6820      	ldr	r0, [r4, #0]
 8000a2e:	1821      	adds	r1, r4, r0
 8000a30:	428b      	cmp	r3, r1
 8000a32:	bf01      	itttt	eq
 8000a34:	6819      	ldreq	r1, [r3, #0]
 8000a36:	685b      	ldreq	r3, [r3, #4]
 8000a38:	1809      	addeq	r1, r1, r0
 8000a3a:	6021      	streq	r1, [r4, #0]
 8000a3c:	e7ed      	b.n	8000a1a <_free_r+0x1e>
 8000a3e:	461a      	mov	r2, r3
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	b10b      	cbz	r3, 8000a48 <_free_r+0x4c>
 8000a44:	42a3      	cmp	r3, r4
 8000a46:	d9fa      	bls.n	8000a3e <_free_r+0x42>
 8000a48:	6811      	ldr	r1, [r2, #0]
 8000a4a:	1850      	adds	r0, r2, r1
 8000a4c:	42a0      	cmp	r0, r4
 8000a4e:	d10b      	bne.n	8000a68 <_free_r+0x6c>
 8000a50:	6820      	ldr	r0, [r4, #0]
 8000a52:	4401      	add	r1, r0
 8000a54:	1850      	adds	r0, r2, r1
 8000a56:	4283      	cmp	r3, r0
 8000a58:	6011      	str	r1, [r2, #0]
 8000a5a:	d1e0      	bne.n	8000a1e <_free_r+0x22>
 8000a5c:	6818      	ldr	r0, [r3, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	6053      	str	r3, [r2, #4]
 8000a62:	4408      	add	r0, r1
 8000a64:	6010      	str	r0, [r2, #0]
 8000a66:	e7da      	b.n	8000a1e <_free_r+0x22>
 8000a68:	d902      	bls.n	8000a70 <_free_r+0x74>
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	602b      	str	r3, [r5, #0]
 8000a6e:	e7d6      	b.n	8000a1e <_free_r+0x22>
 8000a70:	6820      	ldr	r0, [r4, #0]
 8000a72:	1821      	adds	r1, r4, r0
 8000a74:	428b      	cmp	r3, r1
 8000a76:	bf04      	itt	eq
 8000a78:	6819      	ldreq	r1, [r3, #0]
 8000a7a:	685b      	ldreq	r3, [r3, #4]
 8000a7c:	6063      	str	r3, [r4, #4]
 8000a7e:	bf04      	itt	eq
 8000a80:	1809      	addeq	r1, r1, r0
 8000a82:	6021      	streq	r1, [r4, #0]
 8000a84:	6054      	str	r4, [r2, #4]
 8000a86:	e7ca      	b.n	8000a1e <_free_r+0x22>
 8000a88:	bd38      	pop	{r3, r4, r5, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200001d0 	.word	0x200001d0

08000a90 <sbrk_aligned>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	4e0f      	ldr	r6, [pc, #60]	@ (8000ad0 <sbrk_aligned+0x40>)
 8000a94:	460c      	mov	r4, r1
 8000a96:	6831      	ldr	r1, [r6, #0]
 8000a98:	4605      	mov	r5, r0
 8000a9a:	b911      	cbnz	r1, 8000aa2 <sbrk_aligned+0x12>
 8000a9c:	f000 fcb6 	bl	800140c <_sbrk_r>
 8000aa0:	6030      	str	r0, [r6, #0]
 8000aa2:	4621      	mov	r1, r4
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	f000 fcb1 	bl	800140c <_sbrk_r>
 8000aaa:	1c43      	adds	r3, r0, #1
 8000aac:	d103      	bne.n	8000ab6 <sbrk_aligned+0x26>
 8000aae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	bd70      	pop	{r4, r5, r6, pc}
 8000ab6:	1cc4      	adds	r4, r0, #3
 8000ab8:	f024 0403 	bic.w	r4, r4, #3
 8000abc:	42a0      	cmp	r0, r4
 8000abe:	d0f8      	beq.n	8000ab2 <sbrk_aligned+0x22>
 8000ac0:	1a21      	subs	r1, r4, r0
 8000ac2:	4628      	mov	r0, r5
 8000ac4:	f000 fca2 	bl	800140c <_sbrk_r>
 8000ac8:	3001      	adds	r0, #1
 8000aca:	d1f2      	bne.n	8000ab2 <sbrk_aligned+0x22>
 8000acc:	e7ef      	b.n	8000aae <sbrk_aligned+0x1e>
 8000ace:	bf00      	nop
 8000ad0:	200001cc 	.word	0x200001cc

08000ad4 <_malloc_r>:
 8000ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ad8:	1ccd      	adds	r5, r1, #3
 8000ada:	f025 0503 	bic.w	r5, r5, #3
 8000ade:	3508      	adds	r5, #8
 8000ae0:	2d0c      	cmp	r5, #12
 8000ae2:	bf38      	it	cc
 8000ae4:	250c      	movcc	r5, #12
 8000ae6:	2d00      	cmp	r5, #0
 8000ae8:	4606      	mov	r6, r0
 8000aea:	db01      	blt.n	8000af0 <_malloc_r+0x1c>
 8000aec:	42a9      	cmp	r1, r5
 8000aee:	d904      	bls.n	8000afa <_malloc_r+0x26>
 8000af0:	230c      	movs	r3, #12
 8000af2:	6033      	str	r3, [r6, #0]
 8000af4:	2000      	movs	r0, #0
 8000af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000afa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bd0 <_malloc_r+0xfc>
 8000afe:	f000 f869 	bl	8000bd4 <__malloc_lock>
 8000b02:	f8d8 3000 	ldr.w	r3, [r8]
 8000b06:	461c      	mov	r4, r3
 8000b08:	bb44      	cbnz	r4, 8000b5c <_malloc_r+0x88>
 8000b0a:	4629      	mov	r1, r5
 8000b0c:	4630      	mov	r0, r6
 8000b0e:	f7ff ffbf 	bl	8000a90 <sbrk_aligned>
 8000b12:	1c43      	adds	r3, r0, #1
 8000b14:	4604      	mov	r4, r0
 8000b16:	d158      	bne.n	8000bca <_malloc_r+0xf6>
 8000b18:	f8d8 4000 	ldr.w	r4, [r8]
 8000b1c:	4627      	mov	r7, r4
 8000b1e:	2f00      	cmp	r7, #0
 8000b20:	d143      	bne.n	8000baa <_malloc_r+0xd6>
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d04b      	beq.n	8000bbe <_malloc_r+0xea>
 8000b26:	6823      	ldr	r3, [r4, #0]
 8000b28:	4639      	mov	r1, r7
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	eb04 0903 	add.w	r9, r4, r3
 8000b30:	f000 fc6c 	bl	800140c <_sbrk_r>
 8000b34:	4581      	cmp	r9, r0
 8000b36:	d142      	bne.n	8000bbe <_malloc_r+0xea>
 8000b38:	6821      	ldr	r1, [r4, #0]
 8000b3a:	1a6d      	subs	r5, r5, r1
 8000b3c:	4629      	mov	r1, r5
 8000b3e:	4630      	mov	r0, r6
 8000b40:	f7ff ffa6 	bl	8000a90 <sbrk_aligned>
 8000b44:	3001      	adds	r0, #1
 8000b46:	d03a      	beq.n	8000bbe <_malloc_r+0xea>
 8000b48:	6823      	ldr	r3, [r4, #0]
 8000b4a:	442b      	add	r3, r5
 8000b4c:	6023      	str	r3, [r4, #0]
 8000b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	bb62      	cbnz	r2, 8000bb0 <_malloc_r+0xdc>
 8000b56:	f8c8 7000 	str.w	r7, [r8]
 8000b5a:	e00f      	b.n	8000b7c <_malloc_r+0xa8>
 8000b5c:	6822      	ldr	r2, [r4, #0]
 8000b5e:	1b52      	subs	r2, r2, r5
 8000b60:	d420      	bmi.n	8000ba4 <_malloc_r+0xd0>
 8000b62:	2a0b      	cmp	r2, #11
 8000b64:	d917      	bls.n	8000b96 <_malloc_r+0xc2>
 8000b66:	1961      	adds	r1, r4, r5
 8000b68:	42a3      	cmp	r3, r4
 8000b6a:	6025      	str	r5, [r4, #0]
 8000b6c:	bf18      	it	ne
 8000b6e:	6059      	strne	r1, [r3, #4]
 8000b70:	6863      	ldr	r3, [r4, #4]
 8000b72:	bf08      	it	eq
 8000b74:	f8c8 1000 	streq.w	r1, [r8]
 8000b78:	5162      	str	r2, [r4, r5]
 8000b7a:	604b      	str	r3, [r1, #4]
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	f000 f82f 	bl	8000be0 <__malloc_unlock>
 8000b82:	f104 000b 	add.w	r0, r4, #11
 8000b86:	1d23      	adds	r3, r4, #4
 8000b88:	f020 0007 	bic.w	r0, r0, #7
 8000b8c:	1ac2      	subs	r2, r0, r3
 8000b8e:	bf1c      	itt	ne
 8000b90:	1a1b      	subne	r3, r3, r0
 8000b92:	50a3      	strne	r3, [r4, r2]
 8000b94:	e7af      	b.n	8000af6 <_malloc_r+0x22>
 8000b96:	6862      	ldr	r2, [r4, #4]
 8000b98:	42a3      	cmp	r3, r4
 8000b9a:	bf0c      	ite	eq
 8000b9c:	f8c8 2000 	streq.w	r2, [r8]
 8000ba0:	605a      	strne	r2, [r3, #4]
 8000ba2:	e7eb      	b.n	8000b7c <_malloc_r+0xa8>
 8000ba4:	4623      	mov	r3, r4
 8000ba6:	6864      	ldr	r4, [r4, #4]
 8000ba8:	e7ae      	b.n	8000b08 <_malloc_r+0x34>
 8000baa:	463c      	mov	r4, r7
 8000bac:	687f      	ldr	r7, [r7, #4]
 8000bae:	e7b6      	b.n	8000b1e <_malloc_r+0x4a>
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	42a3      	cmp	r3, r4
 8000bb6:	d1fb      	bne.n	8000bb0 <_malloc_r+0xdc>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	6053      	str	r3, [r2, #4]
 8000bbc:	e7de      	b.n	8000b7c <_malloc_r+0xa8>
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	6033      	str	r3, [r6, #0]
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	f000 f80c 	bl	8000be0 <__malloc_unlock>
 8000bc8:	e794      	b.n	8000af4 <_malloc_r+0x20>
 8000bca:	6005      	str	r5, [r0, #0]
 8000bcc:	e7d6      	b.n	8000b7c <_malloc_r+0xa8>
 8000bce:	bf00      	nop
 8000bd0:	200001d0 	.word	0x200001d0

08000bd4 <__malloc_lock>:
 8000bd4:	4801      	ldr	r0, [pc, #4]	@ (8000bdc <__malloc_lock+0x8>)
 8000bd6:	f7ff bf0e 	b.w	80009f6 <__retarget_lock_acquire_recursive>
 8000bda:	bf00      	nop
 8000bdc:	200001c8 	.word	0x200001c8

08000be0 <__malloc_unlock>:
 8000be0:	4801      	ldr	r0, [pc, #4]	@ (8000be8 <__malloc_unlock+0x8>)
 8000be2:	f7ff bf09 	b.w	80009f8 <__retarget_lock_release_recursive>
 8000be6:	bf00      	nop
 8000be8:	200001c8 	.word	0x200001c8

08000bec <__sfputc_r>:
 8000bec:	6893      	ldr	r3, [r2, #8]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	b410      	push	{r4}
 8000bf4:	6093      	str	r3, [r2, #8]
 8000bf6:	da08      	bge.n	8000c0a <__sfputc_r+0x1e>
 8000bf8:	6994      	ldr	r4, [r2, #24]
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	db01      	blt.n	8000c02 <__sfputc_r+0x16>
 8000bfe:	290a      	cmp	r1, #10
 8000c00:	d103      	bne.n	8000c0a <__sfputc_r+0x1e>
 8000c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c06:	f000 bb6d 	b.w	80012e4 <__swbuf_r>
 8000c0a:	6813      	ldr	r3, [r2, #0]
 8000c0c:	1c58      	adds	r0, r3, #1
 8000c0e:	6010      	str	r0, [r2, #0]
 8000c10:	7019      	strb	r1, [r3, #0]
 8000c12:	4608      	mov	r0, r1
 8000c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <__sfputs_r>:
 8000c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1c:	4606      	mov	r6, r0
 8000c1e:	460f      	mov	r7, r1
 8000c20:	4614      	mov	r4, r2
 8000c22:	18d5      	adds	r5, r2, r3
 8000c24:	42ac      	cmp	r4, r5
 8000c26:	d101      	bne.n	8000c2c <__sfputs_r+0x12>
 8000c28:	2000      	movs	r0, #0
 8000c2a:	e007      	b.n	8000c3c <__sfputs_r+0x22>
 8000c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c30:	463a      	mov	r2, r7
 8000c32:	4630      	mov	r0, r6
 8000c34:	f7ff ffda 	bl	8000bec <__sfputc_r>
 8000c38:	1c43      	adds	r3, r0, #1
 8000c3a:	d1f3      	bne.n	8000c24 <__sfputs_r+0xa>
 8000c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c40 <_vfiprintf_r>:
 8000c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c44:	460d      	mov	r5, r1
 8000c46:	b09d      	sub	sp, #116	@ 0x74
 8000c48:	4614      	mov	r4, r2
 8000c4a:	4698      	mov	r8, r3
 8000c4c:	4606      	mov	r6, r0
 8000c4e:	b118      	cbz	r0, 8000c58 <_vfiprintf_r+0x18>
 8000c50:	6a03      	ldr	r3, [r0, #32]
 8000c52:	b90b      	cbnz	r3, 8000c58 <_vfiprintf_r+0x18>
 8000c54:	f7ff fdca 	bl	80007ec <__sinit>
 8000c58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c5a:	07d9      	lsls	r1, r3, #31
 8000c5c:	d405      	bmi.n	8000c6a <_vfiprintf_r+0x2a>
 8000c5e:	89ab      	ldrh	r3, [r5, #12]
 8000c60:	059a      	lsls	r2, r3, #22
 8000c62:	d402      	bmi.n	8000c6a <_vfiprintf_r+0x2a>
 8000c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c66:	f7ff fec6 	bl	80009f6 <__retarget_lock_acquire_recursive>
 8000c6a:	89ab      	ldrh	r3, [r5, #12]
 8000c6c:	071b      	lsls	r3, r3, #28
 8000c6e:	d501      	bpl.n	8000c74 <_vfiprintf_r+0x34>
 8000c70:	692b      	ldr	r3, [r5, #16]
 8000c72:	b99b      	cbnz	r3, 8000c9c <_vfiprintf_r+0x5c>
 8000c74:	4629      	mov	r1, r5
 8000c76:	4630      	mov	r0, r6
 8000c78:	f000 fb72 	bl	8001360 <__swsetup_r>
 8000c7c:	b170      	cbz	r0, 8000c9c <_vfiprintf_r+0x5c>
 8000c7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c80:	07dc      	lsls	r4, r3, #31
 8000c82:	d504      	bpl.n	8000c8e <_vfiprintf_r+0x4e>
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c88:	b01d      	add	sp, #116	@ 0x74
 8000c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c8e:	89ab      	ldrh	r3, [r5, #12]
 8000c90:	0598      	lsls	r0, r3, #22
 8000c92:	d4f7      	bmi.n	8000c84 <_vfiprintf_r+0x44>
 8000c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c96:	f7ff feaf 	bl	80009f8 <__retarget_lock_release_recursive>
 8000c9a:	e7f3      	b.n	8000c84 <_vfiprintf_r+0x44>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ca0:	2320      	movs	r3, #32
 8000ca2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000ca6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000caa:	2330      	movs	r3, #48	@ 0x30
 8000cac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000e5c <_vfiprintf_r+0x21c>
 8000cb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000cb4:	f04f 0901 	mov.w	r9, #1
 8000cb8:	4623      	mov	r3, r4
 8000cba:	469a      	mov	sl, r3
 8000cbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cc0:	b10a      	cbz	r2, 8000cc6 <_vfiprintf_r+0x86>
 8000cc2:	2a25      	cmp	r2, #37	@ 0x25
 8000cc4:	d1f9      	bne.n	8000cba <_vfiprintf_r+0x7a>
 8000cc6:	ebba 0b04 	subs.w	fp, sl, r4
 8000cca:	d00b      	beq.n	8000ce4 <_vfiprintf_r+0xa4>
 8000ccc:	465b      	mov	r3, fp
 8000cce:	4622      	mov	r2, r4
 8000cd0:	4629      	mov	r1, r5
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	f7ff ffa1 	bl	8000c1a <__sfputs_r>
 8000cd8:	3001      	adds	r0, #1
 8000cda:	f000 80a7 	beq.w	8000e2c <_vfiprintf_r+0x1ec>
 8000cde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ce0:	445a      	add	r2, fp
 8000ce2:	9209      	str	r2, [sp, #36]	@ 0x24
 8000ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 809f 	beq.w	8000e2c <_vfiprintf_r+0x1ec>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cf8:	f10a 0a01 	add.w	sl, sl, #1
 8000cfc:	9304      	str	r3, [sp, #16]
 8000cfe:	9307      	str	r3, [sp, #28]
 8000d00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d04:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d06:	4654      	mov	r4, sl
 8000d08:	2205      	movs	r2, #5
 8000d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d0e:	4853      	ldr	r0, [pc, #332]	@ (8000e5c <_vfiprintf_r+0x21c>)
 8000d10:	f7ff fa7e 	bl	8000210 <memchr>
 8000d14:	9a04      	ldr	r2, [sp, #16]
 8000d16:	b9d8      	cbnz	r0, 8000d50 <_vfiprintf_r+0x110>
 8000d18:	06d1      	lsls	r1, r2, #27
 8000d1a:	bf44      	itt	mi
 8000d1c:	2320      	movmi	r3, #32
 8000d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d22:	0713      	lsls	r3, r2, #28
 8000d24:	bf44      	itt	mi
 8000d26:	232b      	movmi	r3, #43	@ 0x2b
 8000d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8000d30:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d32:	d015      	beq.n	8000d60 <_vfiprintf_r+0x120>
 8000d34:	9a07      	ldr	r2, [sp, #28]
 8000d36:	4654      	mov	r4, sl
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f04f 0c0a 	mov.w	ip, #10
 8000d3e:	4621      	mov	r1, r4
 8000d40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d44:	3b30      	subs	r3, #48	@ 0x30
 8000d46:	2b09      	cmp	r3, #9
 8000d48:	d94b      	bls.n	8000de2 <_vfiprintf_r+0x1a2>
 8000d4a:	b1b0      	cbz	r0, 8000d7a <_vfiprintf_r+0x13a>
 8000d4c:	9207      	str	r2, [sp, #28]
 8000d4e:	e014      	b.n	8000d7a <_vfiprintf_r+0x13a>
 8000d50:	eba0 0308 	sub.w	r3, r0, r8
 8000d54:	fa09 f303 	lsl.w	r3, r9, r3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	9304      	str	r3, [sp, #16]
 8000d5c:	46a2      	mov	sl, r4
 8000d5e:	e7d2      	b.n	8000d06 <_vfiprintf_r+0xc6>
 8000d60:	9b03      	ldr	r3, [sp, #12]
 8000d62:	1d19      	adds	r1, r3, #4
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	9103      	str	r1, [sp, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	bfbb      	ittet	lt
 8000d6c:	425b      	neglt	r3, r3
 8000d6e:	f042 0202 	orrlt.w	r2, r2, #2
 8000d72:	9307      	strge	r3, [sp, #28]
 8000d74:	9307      	strlt	r3, [sp, #28]
 8000d76:	bfb8      	it	lt
 8000d78:	9204      	strlt	r2, [sp, #16]
 8000d7a:	7823      	ldrb	r3, [r4, #0]
 8000d7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d7e:	d10a      	bne.n	8000d96 <_vfiprintf_r+0x156>
 8000d80:	7863      	ldrb	r3, [r4, #1]
 8000d82:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d84:	d132      	bne.n	8000dec <_vfiprintf_r+0x1ac>
 8000d86:	9b03      	ldr	r3, [sp, #12]
 8000d88:	1d1a      	adds	r2, r3, #4
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	9203      	str	r2, [sp, #12]
 8000d8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d92:	3402      	adds	r4, #2
 8000d94:	9305      	str	r3, [sp, #20]
 8000d96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000e6c <_vfiprintf_r+0x22c>
 8000d9a:	7821      	ldrb	r1, [r4, #0]
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	4650      	mov	r0, sl
 8000da0:	f7ff fa36 	bl	8000210 <memchr>
 8000da4:	b138      	cbz	r0, 8000db6 <_vfiprintf_r+0x176>
 8000da6:	9b04      	ldr	r3, [sp, #16]
 8000da8:	eba0 000a 	sub.w	r0, r0, sl
 8000dac:	2240      	movs	r2, #64	@ 0x40
 8000dae:	4082      	lsls	r2, r0
 8000db0:	4313      	orrs	r3, r2
 8000db2:	3401      	adds	r4, #1
 8000db4:	9304      	str	r3, [sp, #16]
 8000db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dba:	4829      	ldr	r0, [pc, #164]	@ (8000e60 <_vfiprintf_r+0x220>)
 8000dbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000dc0:	2206      	movs	r2, #6
 8000dc2:	f7ff fa25 	bl	8000210 <memchr>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	d03f      	beq.n	8000e4a <_vfiprintf_r+0x20a>
 8000dca:	4b26      	ldr	r3, [pc, #152]	@ (8000e64 <_vfiprintf_r+0x224>)
 8000dcc:	bb1b      	cbnz	r3, 8000e16 <_vfiprintf_r+0x1d6>
 8000dce:	9b03      	ldr	r3, [sp, #12]
 8000dd0:	3307      	adds	r3, #7
 8000dd2:	f023 0307 	bic.w	r3, r3, #7
 8000dd6:	3308      	adds	r3, #8
 8000dd8:	9303      	str	r3, [sp, #12]
 8000dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ddc:	443b      	add	r3, r7
 8000dde:	9309      	str	r3, [sp, #36]	@ 0x24
 8000de0:	e76a      	b.n	8000cb8 <_vfiprintf_r+0x78>
 8000de2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000de6:	460c      	mov	r4, r1
 8000de8:	2001      	movs	r0, #1
 8000dea:	e7a8      	b.n	8000d3e <_vfiprintf_r+0xfe>
 8000dec:	2300      	movs	r3, #0
 8000dee:	3401      	adds	r4, #1
 8000df0:	9305      	str	r3, [sp, #20]
 8000df2:	4619      	mov	r1, r3
 8000df4:	f04f 0c0a 	mov.w	ip, #10
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000dfe:	3a30      	subs	r2, #48	@ 0x30
 8000e00:	2a09      	cmp	r2, #9
 8000e02:	d903      	bls.n	8000e0c <_vfiprintf_r+0x1cc>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0c6      	beq.n	8000d96 <_vfiprintf_r+0x156>
 8000e08:	9105      	str	r1, [sp, #20]
 8000e0a:	e7c4      	b.n	8000d96 <_vfiprintf_r+0x156>
 8000e0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e10:	4604      	mov	r4, r0
 8000e12:	2301      	movs	r3, #1
 8000e14:	e7f0      	b.n	8000df8 <_vfiprintf_r+0x1b8>
 8000e16:	ab03      	add	r3, sp, #12
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	462a      	mov	r2, r5
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <_vfiprintf_r+0x228>)
 8000e1e:	a904      	add	r1, sp, #16
 8000e20:	4630      	mov	r0, r6
 8000e22:	f3af 8000 	nop.w
 8000e26:	4607      	mov	r7, r0
 8000e28:	1c78      	adds	r0, r7, #1
 8000e2a:	d1d6      	bne.n	8000dda <_vfiprintf_r+0x19a>
 8000e2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e2e:	07d9      	lsls	r1, r3, #31
 8000e30:	d405      	bmi.n	8000e3e <_vfiprintf_r+0x1fe>
 8000e32:	89ab      	ldrh	r3, [r5, #12]
 8000e34:	059a      	lsls	r2, r3, #22
 8000e36:	d402      	bmi.n	8000e3e <_vfiprintf_r+0x1fe>
 8000e38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e3a:	f7ff fddd 	bl	80009f8 <__retarget_lock_release_recursive>
 8000e3e:	89ab      	ldrh	r3, [r5, #12]
 8000e40:	065b      	lsls	r3, r3, #25
 8000e42:	f53f af1f 	bmi.w	8000c84 <_vfiprintf_r+0x44>
 8000e46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e48:	e71e      	b.n	8000c88 <_vfiprintf_r+0x48>
 8000e4a:	ab03      	add	r3, sp, #12
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	462a      	mov	r2, r5
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <_vfiprintf_r+0x228>)
 8000e52:	a904      	add	r1, sp, #16
 8000e54:	4630      	mov	r0, r6
 8000e56:	f000 f879 	bl	8000f4c <_printf_i>
 8000e5a:	e7e4      	b.n	8000e26 <_vfiprintf_r+0x1e6>
 8000e5c:	0800155b 	.word	0x0800155b
 8000e60:	08001565 	.word	0x08001565
 8000e64:	00000000 	.word	0x00000000
 8000e68:	08000c1b 	.word	0x08000c1b
 8000e6c:	08001561 	.word	0x08001561

08000e70 <_printf_common>:
 8000e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e74:	4616      	mov	r6, r2
 8000e76:	4698      	mov	r8, r3
 8000e78:	688a      	ldr	r2, [r1, #8]
 8000e7a:	690b      	ldr	r3, [r1, #16]
 8000e7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e80:	4293      	cmp	r3, r2
 8000e82:	bfb8      	it	lt
 8000e84:	4613      	movlt	r3, r2
 8000e86:	6033      	str	r3, [r6, #0]
 8000e88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e8c:	4607      	mov	r7, r0
 8000e8e:	460c      	mov	r4, r1
 8000e90:	b10a      	cbz	r2, 8000e96 <_printf_common+0x26>
 8000e92:	3301      	adds	r3, #1
 8000e94:	6033      	str	r3, [r6, #0]
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	0699      	lsls	r1, r3, #26
 8000e9a:	bf42      	ittt	mi
 8000e9c:	6833      	ldrmi	r3, [r6, #0]
 8000e9e:	3302      	addmi	r3, #2
 8000ea0:	6033      	strmi	r3, [r6, #0]
 8000ea2:	6825      	ldr	r5, [r4, #0]
 8000ea4:	f015 0506 	ands.w	r5, r5, #6
 8000ea8:	d106      	bne.n	8000eb8 <_printf_common+0x48>
 8000eaa:	f104 0a19 	add.w	sl, r4, #25
 8000eae:	68e3      	ldr	r3, [r4, #12]
 8000eb0:	6832      	ldr	r2, [r6, #0]
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	42ab      	cmp	r3, r5
 8000eb6:	dc26      	bgt.n	8000f06 <_printf_common+0x96>
 8000eb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ebc:	6822      	ldr	r2, [r4, #0]
 8000ebe:	3b00      	subs	r3, #0
 8000ec0:	bf18      	it	ne
 8000ec2:	2301      	movne	r3, #1
 8000ec4:	0692      	lsls	r2, r2, #26
 8000ec6:	d42b      	bmi.n	8000f20 <_printf_common+0xb0>
 8000ec8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ecc:	4641      	mov	r1, r8
 8000ece:	4638      	mov	r0, r7
 8000ed0:	47c8      	blx	r9
 8000ed2:	3001      	adds	r0, #1
 8000ed4:	d01e      	beq.n	8000f14 <_printf_common+0xa4>
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	6922      	ldr	r2, [r4, #16]
 8000eda:	f003 0306 	and.w	r3, r3, #6
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf02      	ittt	eq
 8000ee2:	68e5      	ldreq	r5, [r4, #12]
 8000ee4:	6833      	ldreq	r3, [r6, #0]
 8000ee6:	1aed      	subeq	r5, r5, r3
 8000ee8:	68a3      	ldr	r3, [r4, #8]
 8000eea:	bf0c      	ite	eq
 8000eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ef0:	2500      	movne	r5, #0
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	bfc4      	itt	gt
 8000ef6:	1a9b      	subgt	r3, r3, r2
 8000ef8:	18ed      	addgt	r5, r5, r3
 8000efa:	2600      	movs	r6, #0
 8000efc:	341a      	adds	r4, #26
 8000efe:	42b5      	cmp	r5, r6
 8000f00:	d11a      	bne.n	8000f38 <_printf_common+0xc8>
 8000f02:	2000      	movs	r0, #0
 8000f04:	e008      	b.n	8000f18 <_printf_common+0xa8>
 8000f06:	2301      	movs	r3, #1
 8000f08:	4652      	mov	r2, sl
 8000f0a:	4641      	mov	r1, r8
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	47c8      	blx	r9
 8000f10:	3001      	adds	r0, #1
 8000f12:	d103      	bne.n	8000f1c <_printf_common+0xac>
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1c:	3501      	adds	r5, #1
 8000f1e:	e7c6      	b.n	8000eae <_printf_common+0x3e>
 8000f20:	18e1      	adds	r1, r4, r3
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	2030      	movs	r0, #48	@ 0x30
 8000f26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f2a:	4422      	add	r2, r4
 8000f2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f34:	3302      	adds	r3, #2
 8000f36:	e7c7      	b.n	8000ec8 <_printf_common+0x58>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	4622      	mov	r2, r4
 8000f3c:	4641      	mov	r1, r8
 8000f3e:	4638      	mov	r0, r7
 8000f40:	47c8      	blx	r9
 8000f42:	3001      	adds	r0, #1
 8000f44:	d0e6      	beq.n	8000f14 <_printf_common+0xa4>
 8000f46:	3601      	adds	r6, #1
 8000f48:	e7d9      	b.n	8000efe <_printf_common+0x8e>
	...

08000f4c <_printf_i>:
 8000f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f50:	7e0f      	ldrb	r7, [r1, #24]
 8000f52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f54:	2f78      	cmp	r7, #120	@ 0x78
 8000f56:	4691      	mov	r9, r2
 8000f58:	4680      	mov	r8, r0
 8000f5a:	460c      	mov	r4, r1
 8000f5c:	469a      	mov	sl, r3
 8000f5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f62:	d807      	bhi.n	8000f74 <_printf_i+0x28>
 8000f64:	2f62      	cmp	r7, #98	@ 0x62
 8000f66:	d80a      	bhi.n	8000f7e <_printf_i+0x32>
 8000f68:	2f00      	cmp	r7, #0
 8000f6a:	f000 80d2 	beq.w	8001112 <_printf_i+0x1c6>
 8000f6e:	2f58      	cmp	r7, #88	@ 0x58
 8000f70:	f000 80b9 	beq.w	80010e6 <_printf_i+0x19a>
 8000f74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f7c:	e03a      	b.n	8000ff4 <_printf_i+0xa8>
 8000f7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f82:	2b15      	cmp	r3, #21
 8000f84:	d8f6      	bhi.n	8000f74 <_printf_i+0x28>
 8000f86:	a101      	add	r1, pc, #4	@ (adr r1, 8000f8c <_printf_i+0x40>)
 8000f88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f8c:	08000fe5 	.word	0x08000fe5
 8000f90:	08000ff9 	.word	0x08000ff9
 8000f94:	08000f75 	.word	0x08000f75
 8000f98:	08000f75 	.word	0x08000f75
 8000f9c:	08000f75 	.word	0x08000f75
 8000fa0:	08000f75 	.word	0x08000f75
 8000fa4:	08000ff9 	.word	0x08000ff9
 8000fa8:	08000f75 	.word	0x08000f75
 8000fac:	08000f75 	.word	0x08000f75
 8000fb0:	08000f75 	.word	0x08000f75
 8000fb4:	08000f75 	.word	0x08000f75
 8000fb8:	080010f9 	.word	0x080010f9
 8000fbc:	08001023 	.word	0x08001023
 8000fc0:	080010b3 	.word	0x080010b3
 8000fc4:	08000f75 	.word	0x08000f75
 8000fc8:	08000f75 	.word	0x08000f75
 8000fcc:	0800111b 	.word	0x0800111b
 8000fd0:	08000f75 	.word	0x08000f75
 8000fd4:	08001023 	.word	0x08001023
 8000fd8:	08000f75 	.word	0x08000f75
 8000fdc:	08000f75 	.word	0x08000f75
 8000fe0:	080010bb 	.word	0x080010bb
 8000fe4:	6833      	ldr	r3, [r6, #0]
 8000fe6:	1d1a      	adds	r2, r3, #4
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6032      	str	r2, [r6, #0]
 8000fec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ff0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e09d      	b.n	8001134 <_printf_i+0x1e8>
 8000ff8:	6833      	ldr	r3, [r6, #0]
 8000ffa:	6820      	ldr	r0, [r4, #0]
 8000ffc:	1d19      	adds	r1, r3, #4
 8000ffe:	6031      	str	r1, [r6, #0]
 8001000:	0606      	lsls	r6, r0, #24
 8001002:	d501      	bpl.n	8001008 <_printf_i+0xbc>
 8001004:	681d      	ldr	r5, [r3, #0]
 8001006:	e003      	b.n	8001010 <_printf_i+0xc4>
 8001008:	0645      	lsls	r5, r0, #25
 800100a:	d5fb      	bpl.n	8001004 <_printf_i+0xb8>
 800100c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001010:	2d00      	cmp	r5, #0
 8001012:	da03      	bge.n	800101c <_printf_i+0xd0>
 8001014:	232d      	movs	r3, #45	@ 0x2d
 8001016:	426d      	negs	r5, r5
 8001018:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800101c:	4859      	ldr	r0, [pc, #356]	@ (8001184 <_printf_i+0x238>)
 800101e:	230a      	movs	r3, #10
 8001020:	e011      	b.n	8001046 <_printf_i+0xfa>
 8001022:	6821      	ldr	r1, [r4, #0]
 8001024:	6833      	ldr	r3, [r6, #0]
 8001026:	0608      	lsls	r0, r1, #24
 8001028:	f853 5b04 	ldr.w	r5, [r3], #4
 800102c:	d402      	bmi.n	8001034 <_printf_i+0xe8>
 800102e:	0649      	lsls	r1, r1, #25
 8001030:	bf48      	it	mi
 8001032:	b2ad      	uxthmi	r5, r5
 8001034:	2f6f      	cmp	r7, #111	@ 0x6f
 8001036:	4853      	ldr	r0, [pc, #332]	@ (8001184 <_printf_i+0x238>)
 8001038:	6033      	str	r3, [r6, #0]
 800103a:	bf14      	ite	ne
 800103c:	230a      	movne	r3, #10
 800103e:	2308      	moveq	r3, #8
 8001040:	2100      	movs	r1, #0
 8001042:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001046:	6866      	ldr	r6, [r4, #4]
 8001048:	60a6      	str	r6, [r4, #8]
 800104a:	2e00      	cmp	r6, #0
 800104c:	bfa2      	ittt	ge
 800104e:	6821      	ldrge	r1, [r4, #0]
 8001050:	f021 0104 	bicge.w	r1, r1, #4
 8001054:	6021      	strge	r1, [r4, #0]
 8001056:	b90d      	cbnz	r5, 800105c <_printf_i+0x110>
 8001058:	2e00      	cmp	r6, #0
 800105a:	d04b      	beq.n	80010f4 <_printf_i+0x1a8>
 800105c:	4616      	mov	r6, r2
 800105e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001062:	fb03 5711 	mls	r7, r3, r1, r5
 8001066:	5dc7      	ldrb	r7, [r0, r7]
 8001068:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800106c:	462f      	mov	r7, r5
 800106e:	42bb      	cmp	r3, r7
 8001070:	460d      	mov	r5, r1
 8001072:	d9f4      	bls.n	800105e <_printf_i+0x112>
 8001074:	2b08      	cmp	r3, #8
 8001076:	d10b      	bne.n	8001090 <_printf_i+0x144>
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	07df      	lsls	r7, r3, #31
 800107c:	d508      	bpl.n	8001090 <_printf_i+0x144>
 800107e:	6923      	ldr	r3, [r4, #16]
 8001080:	6861      	ldr	r1, [r4, #4]
 8001082:	4299      	cmp	r1, r3
 8001084:	bfde      	ittt	le
 8001086:	2330      	movle	r3, #48	@ 0x30
 8001088:	f806 3c01 	strble.w	r3, [r6, #-1]
 800108c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001090:	1b92      	subs	r2, r2, r6
 8001092:	6122      	str	r2, [r4, #16]
 8001094:	f8cd a000 	str.w	sl, [sp]
 8001098:	464b      	mov	r3, r9
 800109a:	aa03      	add	r2, sp, #12
 800109c:	4621      	mov	r1, r4
 800109e:	4640      	mov	r0, r8
 80010a0:	f7ff fee6 	bl	8000e70 <_printf_common>
 80010a4:	3001      	adds	r0, #1
 80010a6:	d14a      	bne.n	800113e <_printf_i+0x1f2>
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010ac:	b004      	add	sp, #16
 80010ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	f043 0320 	orr.w	r3, r3, #32
 80010b8:	6023      	str	r3, [r4, #0]
 80010ba:	4833      	ldr	r0, [pc, #204]	@ (8001188 <_printf_i+0x23c>)
 80010bc:	2778      	movs	r7, #120	@ 0x78
 80010be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	6831      	ldr	r1, [r6, #0]
 80010c6:	061f      	lsls	r7, r3, #24
 80010c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80010cc:	d402      	bmi.n	80010d4 <_printf_i+0x188>
 80010ce:	065f      	lsls	r7, r3, #25
 80010d0:	bf48      	it	mi
 80010d2:	b2ad      	uxthmi	r5, r5
 80010d4:	6031      	str	r1, [r6, #0]
 80010d6:	07d9      	lsls	r1, r3, #31
 80010d8:	bf44      	itt	mi
 80010da:	f043 0320 	orrmi.w	r3, r3, #32
 80010de:	6023      	strmi	r3, [r4, #0]
 80010e0:	b11d      	cbz	r5, 80010ea <_printf_i+0x19e>
 80010e2:	2310      	movs	r3, #16
 80010e4:	e7ac      	b.n	8001040 <_printf_i+0xf4>
 80010e6:	4827      	ldr	r0, [pc, #156]	@ (8001184 <_printf_i+0x238>)
 80010e8:	e7e9      	b.n	80010be <_printf_i+0x172>
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	f023 0320 	bic.w	r3, r3, #32
 80010f0:	6023      	str	r3, [r4, #0]
 80010f2:	e7f6      	b.n	80010e2 <_printf_i+0x196>
 80010f4:	4616      	mov	r6, r2
 80010f6:	e7bd      	b.n	8001074 <_printf_i+0x128>
 80010f8:	6833      	ldr	r3, [r6, #0]
 80010fa:	6825      	ldr	r5, [r4, #0]
 80010fc:	6961      	ldr	r1, [r4, #20]
 80010fe:	1d18      	adds	r0, r3, #4
 8001100:	6030      	str	r0, [r6, #0]
 8001102:	062e      	lsls	r6, r5, #24
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	d501      	bpl.n	800110c <_printf_i+0x1c0>
 8001108:	6019      	str	r1, [r3, #0]
 800110a:	e002      	b.n	8001112 <_printf_i+0x1c6>
 800110c:	0668      	lsls	r0, r5, #25
 800110e:	d5fb      	bpl.n	8001108 <_printf_i+0x1bc>
 8001110:	8019      	strh	r1, [r3, #0]
 8001112:	2300      	movs	r3, #0
 8001114:	6123      	str	r3, [r4, #16]
 8001116:	4616      	mov	r6, r2
 8001118:	e7bc      	b.n	8001094 <_printf_i+0x148>
 800111a:	6833      	ldr	r3, [r6, #0]
 800111c:	1d1a      	adds	r2, r3, #4
 800111e:	6032      	str	r2, [r6, #0]
 8001120:	681e      	ldr	r6, [r3, #0]
 8001122:	6862      	ldr	r2, [r4, #4]
 8001124:	2100      	movs	r1, #0
 8001126:	4630      	mov	r0, r6
 8001128:	f7ff f872 	bl	8000210 <memchr>
 800112c:	b108      	cbz	r0, 8001132 <_printf_i+0x1e6>
 800112e:	1b80      	subs	r0, r0, r6
 8001130:	6060      	str	r0, [r4, #4]
 8001132:	6863      	ldr	r3, [r4, #4]
 8001134:	6123      	str	r3, [r4, #16]
 8001136:	2300      	movs	r3, #0
 8001138:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800113c:	e7aa      	b.n	8001094 <_printf_i+0x148>
 800113e:	6923      	ldr	r3, [r4, #16]
 8001140:	4632      	mov	r2, r6
 8001142:	4649      	mov	r1, r9
 8001144:	4640      	mov	r0, r8
 8001146:	47d0      	blx	sl
 8001148:	3001      	adds	r0, #1
 800114a:	d0ad      	beq.n	80010a8 <_printf_i+0x15c>
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	079b      	lsls	r3, r3, #30
 8001150:	d413      	bmi.n	800117a <_printf_i+0x22e>
 8001152:	68e0      	ldr	r0, [r4, #12]
 8001154:	9b03      	ldr	r3, [sp, #12]
 8001156:	4298      	cmp	r0, r3
 8001158:	bfb8      	it	lt
 800115a:	4618      	movlt	r0, r3
 800115c:	e7a6      	b.n	80010ac <_printf_i+0x160>
 800115e:	2301      	movs	r3, #1
 8001160:	4632      	mov	r2, r6
 8001162:	4649      	mov	r1, r9
 8001164:	4640      	mov	r0, r8
 8001166:	47d0      	blx	sl
 8001168:	3001      	adds	r0, #1
 800116a:	d09d      	beq.n	80010a8 <_printf_i+0x15c>
 800116c:	3501      	adds	r5, #1
 800116e:	68e3      	ldr	r3, [r4, #12]
 8001170:	9903      	ldr	r1, [sp, #12]
 8001172:	1a5b      	subs	r3, r3, r1
 8001174:	42ab      	cmp	r3, r5
 8001176:	dcf2      	bgt.n	800115e <_printf_i+0x212>
 8001178:	e7eb      	b.n	8001152 <_printf_i+0x206>
 800117a:	2500      	movs	r5, #0
 800117c:	f104 0619 	add.w	r6, r4, #25
 8001180:	e7f5      	b.n	800116e <_printf_i+0x222>
 8001182:	bf00      	nop
 8001184:	0800156c 	.word	0x0800156c
 8001188:	0800157d 	.word	0x0800157d

0800118c <__sflush_r>:
 800118c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001194:	0716      	lsls	r6, r2, #28
 8001196:	4605      	mov	r5, r0
 8001198:	460c      	mov	r4, r1
 800119a:	d454      	bmi.n	8001246 <__sflush_r+0xba>
 800119c:	684b      	ldr	r3, [r1, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	dc02      	bgt.n	80011a8 <__sflush_r+0x1c>
 80011a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	dd48      	ble.n	800123a <__sflush_r+0xae>
 80011a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011aa:	2e00      	cmp	r6, #0
 80011ac:	d045      	beq.n	800123a <__sflush_r+0xae>
 80011ae:	2300      	movs	r3, #0
 80011b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011b4:	682f      	ldr	r7, [r5, #0]
 80011b6:	6a21      	ldr	r1, [r4, #32]
 80011b8:	602b      	str	r3, [r5, #0]
 80011ba:	d030      	beq.n	800121e <__sflush_r+0x92>
 80011bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011be:	89a3      	ldrh	r3, [r4, #12]
 80011c0:	0759      	lsls	r1, r3, #29
 80011c2:	d505      	bpl.n	80011d0 <__sflush_r+0x44>
 80011c4:	6863      	ldr	r3, [r4, #4]
 80011c6:	1ad2      	subs	r2, r2, r3
 80011c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80011ca:	b10b      	cbz	r3, 80011d0 <__sflush_r+0x44>
 80011cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011ce:	1ad2      	subs	r2, r2, r3
 80011d0:	2300      	movs	r3, #0
 80011d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011d4:	6a21      	ldr	r1, [r4, #32]
 80011d6:	4628      	mov	r0, r5
 80011d8:	47b0      	blx	r6
 80011da:	1c43      	adds	r3, r0, #1
 80011dc:	89a3      	ldrh	r3, [r4, #12]
 80011de:	d106      	bne.n	80011ee <__sflush_r+0x62>
 80011e0:	6829      	ldr	r1, [r5, #0]
 80011e2:	291d      	cmp	r1, #29
 80011e4:	d82b      	bhi.n	800123e <__sflush_r+0xb2>
 80011e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001290 <__sflush_r+0x104>)
 80011e8:	410a      	asrs	r2, r1
 80011ea:	07d6      	lsls	r6, r2, #31
 80011ec:	d427      	bmi.n	800123e <__sflush_r+0xb2>
 80011ee:	2200      	movs	r2, #0
 80011f0:	6062      	str	r2, [r4, #4]
 80011f2:	04d9      	lsls	r1, r3, #19
 80011f4:	6922      	ldr	r2, [r4, #16]
 80011f6:	6022      	str	r2, [r4, #0]
 80011f8:	d504      	bpl.n	8001204 <__sflush_r+0x78>
 80011fa:	1c42      	adds	r2, r0, #1
 80011fc:	d101      	bne.n	8001202 <__sflush_r+0x76>
 80011fe:	682b      	ldr	r3, [r5, #0]
 8001200:	b903      	cbnz	r3, 8001204 <__sflush_r+0x78>
 8001202:	6560      	str	r0, [r4, #84]	@ 0x54
 8001204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001206:	602f      	str	r7, [r5, #0]
 8001208:	b1b9      	cbz	r1, 800123a <__sflush_r+0xae>
 800120a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800120e:	4299      	cmp	r1, r3
 8001210:	d002      	beq.n	8001218 <__sflush_r+0x8c>
 8001212:	4628      	mov	r0, r5
 8001214:	f7ff fbf2 	bl	80009fc <_free_r>
 8001218:	2300      	movs	r3, #0
 800121a:	6363      	str	r3, [r4, #52]	@ 0x34
 800121c:	e00d      	b.n	800123a <__sflush_r+0xae>
 800121e:	2301      	movs	r3, #1
 8001220:	4628      	mov	r0, r5
 8001222:	47b0      	blx	r6
 8001224:	4602      	mov	r2, r0
 8001226:	1c50      	adds	r0, r2, #1
 8001228:	d1c9      	bne.n	80011be <__sflush_r+0x32>
 800122a:	682b      	ldr	r3, [r5, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0c6      	beq.n	80011be <__sflush_r+0x32>
 8001230:	2b1d      	cmp	r3, #29
 8001232:	d001      	beq.n	8001238 <__sflush_r+0xac>
 8001234:	2b16      	cmp	r3, #22
 8001236:	d11e      	bne.n	8001276 <__sflush_r+0xea>
 8001238:	602f      	str	r7, [r5, #0]
 800123a:	2000      	movs	r0, #0
 800123c:	e022      	b.n	8001284 <__sflush_r+0xf8>
 800123e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001242:	b21b      	sxth	r3, r3
 8001244:	e01b      	b.n	800127e <__sflush_r+0xf2>
 8001246:	690f      	ldr	r7, [r1, #16]
 8001248:	2f00      	cmp	r7, #0
 800124a:	d0f6      	beq.n	800123a <__sflush_r+0xae>
 800124c:	0793      	lsls	r3, r2, #30
 800124e:	680e      	ldr	r6, [r1, #0]
 8001250:	bf08      	it	eq
 8001252:	694b      	ldreq	r3, [r1, #20]
 8001254:	600f      	str	r7, [r1, #0]
 8001256:	bf18      	it	ne
 8001258:	2300      	movne	r3, #0
 800125a:	eba6 0807 	sub.w	r8, r6, r7
 800125e:	608b      	str	r3, [r1, #8]
 8001260:	f1b8 0f00 	cmp.w	r8, #0
 8001264:	dde9      	ble.n	800123a <__sflush_r+0xae>
 8001266:	6a21      	ldr	r1, [r4, #32]
 8001268:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800126a:	4643      	mov	r3, r8
 800126c:	463a      	mov	r2, r7
 800126e:	4628      	mov	r0, r5
 8001270:	47b0      	blx	r6
 8001272:	2800      	cmp	r0, #0
 8001274:	dc08      	bgt.n	8001288 <__sflush_r+0xfc>
 8001276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800127a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800127e:	81a3      	strh	r3, [r4, #12]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001288:	4407      	add	r7, r0
 800128a:	eba8 0800 	sub.w	r8, r8, r0
 800128e:	e7e7      	b.n	8001260 <__sflush_r+0xd4>
 8001290:	dfbffffe 	.word	0xdfbffffe

08001294 <_fflush_r>:
 8001294:	b538      	push	{r3, r4, r5, lr}
 8001296:	690b      	ldr	r3, [r1, #16]
 8001298:	4605      	mov	r5, r0
 800129a:	460c      	mov	r4, r1
 800129c:	b913      	cbnz	r3, 80012a4 <_fflush_r+0x10>
 800129e:	2500      	movs	r5, #0
 80012a0:	4628      	mov	r0, r5
 80012a2:	bd38      	pop	{r3, r4, r5, pc}
 80012a4:	b118      	cbz	r0, 80012ae <_fflush_r+0x1a>
 80012a6:	6a03      	ldr	r3, [r0, #32]
 80012a8:	b90b      	cbnz	r3, 80012ae <_fflush_r+0x1a>
 80012aa:	f7ff fa9f 	bl	80007ec <__sinit>
 80012ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f3      	beq.n	800129e <_fflush_r+0xa>
 80012b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80012b8:	07d0      	lsls	r0, r2, #31
 80012ba:	d404      	bmi.n	80012c6 <_fflush_r+0x32>
 80012bc:	0599      	lsls	r1, r3, #22
 80012be:	d402      	bmi.n	80012c6 <_fflush_r+0x32>
 80012c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012c2:	f7ff fb98 	bl	80009f6 <__retarget_lock_acquire_recursive>
 80012c6:	4628      	mov	r0, r5
 80012c8:	4621      	mov	r1, r4
 80012ca:	f7ff ff5f 	bl	800118c <__sflush_r>
 80012ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012d0:	07da      	lsls	r2, r3, #31
 80012d2:	4605      	mov	r5, r0
 80012d4:	d4e4      	bmi.n	80012a0 <_fflush_r+0xc>
 80012d6:	89a3      	ldrh	r3, [r4, #12]
 80012d8:	059b      	lsls	r3, r3, #22
 80012da:	d4e1      	bmi.n	80012a0 <_fflush_r+0xc>
 80012dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012de:	f7ff fb8b 	bl	80009f8 <__retarget_lock_release_recursive>
 80012e2:	e7dd      	b.n	80012a0 <_fflush_r+0xc>

080012e4 <__swbuf_r>:
 80012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e6:	460e      	mov	r6, r1
 80012e8:	4614      	mov	r4, r2
 80012ea:	4605      	mov	r5, r0
 80012ec:	b118      	cbz	r0, 80012f6 <__swbuf_r+0x12>
 80012ee:	6a03      	ldr	r3, [r0, #32]
 80012f0:	b90b      	cbnz	r3, 80012f6 <__swbuf_r+0x12>
 80012f2:	f7ff fa7b 	bl	80007ec <__sinit>
 80012f6:	69a3      	ldr	r3, [r4, #24]
 80012f8:	60a3      	str	r3, [r4, #8]
 80012fa:	89a3      	ldrh	r3, [r4, #12]
 80012fc:	071a      	lsls	r2, r3, #28
 80012fe:	d501      	bpl.n	8001304 <__swbuf_r+0x20>
 8001300:	6923      	ldr	r3, [r4, #16]
 8001302:	b943      	cbnz	r3, 8001316 <__swbuf_r+0x32>
 8001304:	4621      	mov	r1, r4
 8001306:	4628      	mov	r0, r5
 8001308:	f000 f82a 	bl	8001360 <__swsetup_r>
 800130c:	b118      	cbz	r0, 8001316 <__swbuf_r+0x32>
 800130e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001312:	4638      	mov	r0, r7
 8001314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	6922      	ldr	r2, [r4, #16]
 800131a:	1a98      	subs	r0, r3, r2
 800131c:	6963      	ldr	r3, [r4, #20]
 800131e:	b2f6      	uxtb	r6, r6
 8001320:	4283      	cmp	r3, r0
 8001322:	4637      	mov	r7, r6
 8001324:	dc05      	bgt.n	8001332 <__swbuf_r+0x4e>
 8001326:	4621      	mov	r1, r4
 8001328:	4628      	mov	r0, r5
 800132a:	f7ff ffb3 	bl	8001294 <_fflush_r>
 800132e:	2800      	cmp	r0, #0
 8001330:	d1ed      	bne.n	800130e <__swbuf_r+0x2a>
 8001332:	68a3      	ldr	r3, [r4, #8]
 8001334:	3b01      	subs	r3, #1
 8001336:	60a3      	str	r3, [r4, #8]
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	6022      	str	r2, [r4, #0]
 800133e:	701e      	strb	r6, [r3, #0]
 8001340:	6962      	ldr	r2, [r4, #20]
 8001342:	1c43      	adds	r3, r0, #1
 8001344:	429a      	cmp	r2, r3
 8001346:	d004      	beq.n	8001352 <__swbuf_r+0x6e>
 8001348:	89a3      	ldrh	r3, [r4, #12]
 800134a:	07db      	lsls	r3, r3, #31
 800134c:	d5e1      	bpl.n	8001312 <__swbuf_r+0x2e>
 800134e:	2e0a      	cmp	r6, #10
 8001350:	d1df      	bne.n	8001312 <__swbuf_r+0x2e>
 8001352:	4621      	mov	r1, r4
 8001354:	4628      	mov	r0, r5
 8001356:	f7ff ff9d 	bl	8001294 <_fflush_r>
 800135a:	2800      	cmp	r0, #0
 800135c:	d0d9      	beq.n	8001312 <__swbuf_r+0x2e>
 800135e:	e7d6      	b.n	800130e <__swbuf_r+0x2a>

08001360 <__swsetup_r>:
 8001360:	b538      	push	{r3, r4, r5, lr}
 8001362:	4b29      	ldr	r3, [pc, #164]	@ (8001408 <__swsetup_r+0xa8>)
 8001364:	4605      	mov	r5, r0
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	460c      	mov	r4, r1
 800136a:	b118      	cbz	r0, 8001374 <__swsetup_r+0x14>
 800136c:	6a03      	ldr	r3, [r0, #32]
 800136e:	b90b      	cbnz	r3, 8001374 <__swsetup_r+0x14>
 8001370:	f7ff fa3c 	bl	80007ec <__sinit>
 8001374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001378:	0719      	lsls	r1, r3, #28
 800137a:	d422      	bmi.n	80013c2 <__swsetup_r+0x62>
 800137c:	06da      	lsls	r2, r3, #27
 800137e:	d407      	bmi.n	8001390 <__swsetup_r+0x30>
 8001380:	2209      	movs	r2, #9
 8001382:	602a      	str	r2, [r5, #0]
 8001384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001388:	81a3      	strh	r3, [r4, #12]
 800138a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800138e:	e033      	b.n	80013f8 <__swsetup_r+0x98>
 8001390:	0758      	lsls	r0, r3, #29
 8001392:	d512      	bpl.n	80013ba <__swsetup_r+0x5a>
 8001394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001396:	b141      	cbz	r1, 80013aa <__swsetup_r+0x4a>
 8001398:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800139c:	4299      	cmp	r1, r3
 800139e:	d002      	beq.n	80013a6 <__swsetup_r+0x46>
 80013a0:	4628      	mov	r0, r5
 80013a2:	f7ff fb2b 	bl	80009fc <_free_r>
 80013a6:	2300      	movs	r3, #0
 80013a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80013aa:	89a3      	ldrh	r3, [r4, #12]
 80013ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80013b0:	81a3      	strh	r3, [r4, #12]
 80013b2:	2300      	movs	r3, #0
 80013b4:	6063      	str	r3, [r4, #4]
 80013b6:	6923      	ldr	r3, [r4, #16]
 80013b8:	6023      	str	r3, [r4, #0]
 80013ba:	89a3      	ldrh	r3, [r4, #12]
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	81a3      	strh	r3, [r4, #12]
 80013c2:	6923      	ldr	r3, [r4, #16]
 80013c4:	b94b      	cbnz	r3, 80013da <__swsetup_r+0x7a>
 80013c6:	89a3      	ldrh	r3, [r4, #12]
 80013c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80013cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013d0:	d003      	beq.n	80013da <__swsetup_r+0x7a>
 80013d2:	4621      	mov	r1, r4
 80013d4:	4628      	mov	r0, r5
 80013d6:	f000 f84f 	bl	8001478 <__smakebuf_r>
 80013da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013de:	f013 0201 	ands.w	r2, r3, #1
 80013e2:	d00a      	beq.n	80013fa <__swsetup_r+0x9a>
 80013e4:	2200      	movs	r2, #0
 80013e6:	60a2      	str	r2, [r4, #8]
 80013e8:	6962      	ldr	r2, [r4, #20]
 80013ea:	4252      	negs	r2, r2
 80013ec:	61a2      	str	r2, [r4, #24]
 80013ee:	6922      	ldr	r2, [r4, #16]
 80013f0:	b942      	cbnz	r2, 8001404 <__swsetup_r+0xa4>
 80013f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80013f6:	d1c5      	bne.n	8001384 <__swsetup_r+0x24>
 80013f8:	bd38      	pop	{r3, r4, r5, pc}
 80013fa:	0799      	lsls	r1, r3, #30
 80013fc:	bf58      	it	pl
 80013fe:	6962      	ldrpl	r2, [r4, #20]
 8001400:	60a2      	str	r2, [r4, #8]
 8001402:	e7f4      	b.n	80013ee <__swsetup_r+0x8e>
 8001404:	2000      	movs	r0, #0
 8001406:	e7f7      	b.n	80013f8 <__swsetup_r+0x98>
 8001408:	20000010 	.word	0x20000010

0800140c <_sbrk_r>:
 800140c:	b538      	push	{r3, r4, r5, lr}
 800140e:	4d06      	ldr	r5, [pc, #24]	@ (8001428 <_sbrk_r+0x1c>)
 8001410:	2300      	movs	r3, #0
 8001412:	4604      	mov	r4, r0
 8001414:	4608      	mov	r0, r1
 8001416:	602b      	str	r3, [r5, #0]
 8001418:	f7fe fff0 	bl	80003fc <_sbrk>
 800141c:	1c43      	adds	r3, r0, #1
 800141e:	d102      	bne.n	8001426 <_sbrk_r+0x1a>
 8001420:	682b      	ldr	r3, [r5, #0]
 8001422:	b103      	cbz	r3, 8001426 <_sbrk_r+0x1a>
 8001424:	6023      	str	r3, [r4, #0]
 8001426:	bd38      	pop	{r3, r4, r5, pc}
 8001428:	200001c4 	.word	0x200001c4

0800142c <__swhatbuf_r>:
 800142c:	b570      	push	{r4, r5, r6, lr}
 800142e:	460c      	mov	r4, r1
 8001430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001434:	2900      	cmp	r1, #0
 8001436:	b096      	sub	sp, #88	@ 0x58
 8001438:	4615      	mov	r5, r2
 800143a:	461e      	mov	r6, r3
 800143c:	da0d      	bge.n	800145a <__swhatbuf_r+0x2e>
 800143e:	89a3      	ldrh	r3, [r4, #12]
 8001440:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001444:	f04f 0100 	mov.w	r1, #0
 8001448:	bf14      	ite	ne
 800144a:	2340      	movne	r3, #64	@ 0x40
 800144c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001450:	2000      	movs	r0, #0
 8001452:	6031      	str	r1, [r6, #0]
 8001454:	602b      	str	r3, [r5, #0]
 8001456:	b016      	add	sp, #88	@ 0x58
 8001458:	bd70      	pop	{r4, r5, r6, pc}
 800145a:	466a      	mov	r2, sp
 800145c:	f000 f848 	bl	80014f0 <_fstat_r>
 8001460:	2800      	cmp	r0, #0
 8001462:	dbec      	blt.n	800143e <__swhatbuf_r+0x12>
 8001464:	9901      	ldr	r1, [sp, #4]
 8001466:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800146a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800146e:	4259      	negs	r1, r3
 8001470:	4159      	adcs	r1, r3
 8001472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001476:	e7eb      	b.n	8001450 <__swhatbuf_r+0x24>

08001478 <__smakebuf_r>:
 8001478:	898b      	ldrh	r3, [r1, #12]
 800147a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800147c:	079d      	lsls	r5, r3, #30
 800147e:	4606      	mov	r6, r0
 8001480:	460c      	mov	r4, r1
 8001482:	d507      	bpl.n	8001494 <__smakebuf_r+0x1c>
 8001484:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001488:	6023      	str	r3, [r4, #0]
 800148a:	6123      	str	r3, [r4, #16]
 800148c:	2301      	movs	r3, #1
 800148e:	6163      	str	r3, [r4, #20]
 8001490:	b003      	add	sp, #12
 8001492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001494:	ab01      	add	r3, sp, #4
 8001496:	466a      	mov	r2, sp
 8001498:	f7ff ffc8 	bl	800142c <__swhatbuf_r>
 800149c:	9f00      	ldr	r7, [sp, #0]
 800149e:	4605      	mov	r5, r0
 80014a0:	4639      	mov	r1, r7
 80014a2:	4630      	mov	r0, r6
 80014a4:	f7ff fb16 	bl	8000ad4 <_malloc_r>
 80014a8:	b948      	cbnz	r0, 80014be <__smakebuf_r+0x46>
 80014aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014ae:	059a      	lsls	r2, r3, #22
 80014b0:	d4ee      	bmi.n	8001490 <__smakebuf_r+0x18>
 80014b2:	f023 0303 	bic.w	r3, r3, #3
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	81a3      	strh	r3, [r4, #12]
 80014bc:	e7e2      	b.n	8001484 <__smakebuf_r+0xc>
 80014be:	89a3      	ldrh	r3, [r4, #12]
 80014c0:	6020      	str	r0, [r4, #0]
 80014c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c6:	81a3      	strh	r3, [r4, #12]
 80014c8:	9b01      	ldr	r3, [sp, #4]
 80014ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014ce:	b15b      	cbz	r3, 80014e8 <__smakebuf_r+0x70>
 80014d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014d4:	4630      	mov	r0, r6
 80014d6:	f000 f81d 	bl	8001514 <_isatty_r>
 80014da:	b128      	cbz	r0, 80014e8 <__smakebuf_r+0x70>
 80014dc:	89a3      	ldrh	r3, [r4, #12]
 80014de:	f023 0303 	bic.w	r3, r3, #3
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	81a3      	strh	r3, [r4, #12]
 80014e8:	89a3      	ldrh	r3, [r4, #12]
 80014ea:	431d      	orrs	r5, r3
 80014ec:	81a5      	strh	r5, [r4, #12]
 80014ee:	e7cf      	b.n	8001490 <__smakebuf_r+0x18>

080014f0 <_fstat_r>:
 80014f0:	b538      	push	{r3, r4, r5, lr}
 80014f2:	4d07      	ldr	r5, [pc, #28]	@ (8001510 <_fstat_r+0x20>)
 80014f4:	2300      	movs	r3, #0
 80014f6:	4604      	mov	r4, r0
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	602b      	str	r3, [r5, #0]
 80014fe:	f7fe ff54 	bl	80003aa <_fstat>
 8001502:	1c43      	adds	r3, r0, #1
 8001504:	d102      	bne.n	800150c <_fstat_r+0x1c>
 8001506:	682b      	ldr	r3, [r5, #0]
 8001508:	b103      	cbz	r3, 800150c <_fstat_r+0x1c>
 800150a:	6023      	str	r3, [r4, #0]
 800150c:	bd38      	pop	{r3, r4, r5, pc}
 800150e:	bf00      	nop
 8001510:	200001c4 	.word	0x200001c4

08001514 <_isatty_r>:
 8001514:	b538      	push	{r3, r4, r5, lr}
 8001516:	4d06      	ldr	r5, [pc, #24]	@ (8001530 <_isatty_r+0x1c>)
 8001518:	2300      	movs	r3, #0
 800151a:	4604      	mov	r4, r0
 800151c:	4608      	mov	r0, r1
 800151e:	602b      	str	r3, [r5, #0]
 8001520:	f7fe ff53 	bl	80003ca <_isatty>
 8001524:	1c43      	adds	r3, r0, #1
 8001526:	d102      	bne.n	800152e <_isatty_r+0x1a>
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	b103      	cbz	r3, 800152e <_isatty_r+0x1a>
 800152c:	6023      	str	r3, [r4, #0]
 800152e:	bd38      	pop	{r3, r4, r5, pc}
 8001530:	200001c4 	.word	0x200001c4

08001534 <_init>:
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	bf00      	nop
 8001538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153a:	bc08      	pop	{r3}
 800153c:	469e      	mov	lr, r3
 800153e:	4770      	bx	lr

08001540 <_fini>:
 8001540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001542:	bf00      	nop
 8001544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001546:	bc08      	pop	{r3}
 8001548:	469e      	mov	lr, r3
 800154a:	4770      	bx	lr
